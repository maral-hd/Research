%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: bargraph.pdf
%%Creator: Adobe Acrobat 10.1.4
%%For: hdo
%%CreationDate: 11/4/12, 10:12 AM
%%BoundingBox: 0 0 720 540
%%HiResBoundingBox: 0 0 720 540
%%CropBox: 0 0 720 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 726 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2012-11-04T16:04:26Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2012-11-04T16:04:26Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.7.5 Quartz PDFContext">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Hyunsook Do</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
720 540 li
720 0 li
cp
clp
0 .00012207 mo
720 .00012207 li
720 540 li
0 540 li
cp
false sop
0 0 0 0 cmyk
ef
23.7673 25.0769 mo
206.154 25.0769 li
206.154 241.077 li
23.7673 241.077 li
cp
ef
.75 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
81.0401 155.004 mo
193.154 155.004 li
81.0401 142.241 mo
193.154 142.241 li
81.0401 129.477 mo
193.154 129.477 li
81.0401 116.713 mo
193.154 116.713 li
81.0401 103.95 mo
193.154 103.95 li
81.0401 91.186 mo
193.154 91.186 li
81.0401 78.7497 mo
193.154 78.7497 li
81.0401 65.986 mo
193.154 65.986 li
0 0 0 .130129 cmyk
@
94.7855 128.822 mo
107.549 128.822 li
107.549 167.697 li
94.7855 167.697 li
cp
150.749 77.4405 mo
163.513 77.4405 li
163.513 167.697 li
150.749 167.697 li
cp
.630945 .325231 .0310369 0 cmyk
f
110.822 166.459 mo
123.258 166.459 li
123.258 167.697 li
110.822 167.697 li
cp
166.786 146.495 mo
179.549 146.495 li
179.549 167.697 li
166.786 167.697 li
cp
.158206 .719326 .596887 .0181277 cmyk
f
81.1123 167.697 mo
193.154 167.697 li
0 0 0 .130129 cmyk
@
0 0 0 .774868 cmyk
%ADOBeginSubsetFont: IKBBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /IKBBAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000051c6670
676d00000000000005d80000091a676c796600000000000034bc0000327a
686561640000000000000ef400000036686865610000000000000f2c0000
0024686d74780000000000000f50000000bc6c6f6361000000000000100c
000000606d617870000000000000106c000000206e616d65000000000000
108c000000207072657000000000000010ac000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d00000001000000059eb88df7cb11
5f0f3cf50019080000000000bbeb7ccc00000000c787a88bfbfafd8b09ec
07b600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec00010000000000000000000000000000002f040e000001cf000004a1
00230444006103ad00ac020400ac06d700ac052a00ac042200ac05620063
03ad0047048a002203d5005c043400990362005a0434006003fb005d0271
002503c400350434009901d6008501d6009906640099043400990438005a
0434009902ca00990321005102ae002104750021047500210434009401d6
00000205009702730045040e006b040e0052040e0048040e00ae040e0072
040e0067040e0030040e0065040e006b040e0063040e0052040e00520000
00a100a1012f01ac02150260030d03a8042104bc058e060006af074807d4
086b090c098f0a7c0b000b790bbc0c9d0d2e0dbc0e530ecc0f92100e101a
109011201144116611891237135d141014c71567165b172017d517dd187c
1884193d00010000002f0120001000c3000700020010002f006500001190
0182000400010000000100120001000000000006000e00004a494e49494e
2b43616c69627269b2090320b80284b40918014a20b80283b40918014a20
b80282b40918014a20b80281b40918014a20b80280b40918014a20b8027f
b40918014a20b8027eb40918014a20b8027db40918014a20b8027cb40918
014a20b8027bb40918014a20b8027ab40918014a20b80279b40918014a20
b80278b40918014a20b80277b40918014a20b80276b40918014a20b80275
b40918014a20b80274b40918014a20b80273b40918014a20b80271b40918
014a20b80270b40918014a20b8026fb40918014a20b8026eb40918014a20
b8026db40918014a20b8026cb40918014a20b8026bb40918014a20b8026a
b40918014a20b80269b40918014a20b80268b40918014a20b80267b40918
014a20b80266b40918014a20b80265b40918014a20b80264b40918014a20
b80263b40918014a20b80262b40918014a20b80261b40918014a20b80260
b40918014a20b8025fb40918014a20b8025eb40918014a20b8025db40918
014a20b8025cb40918014a20b8025bb40918014a20b8025ab40918014a20
b80259b40918014a20b80258b40918014a20b80257b40918014a20b80256
b40918014a20b80255b40918014a20b80254b40918014a20b80253b40918
014a20b80252b40918014a20b80251b40918014a20b80250b40918014a20
b8024fb40918014a20b8024eb40918014a20b8024db40918014a20b8024c
b40918014a20b8024bb40918014a20b8024ab40918014a20b80249b40918
014a20b80248b40918014a20b80247b40918014a20b80246b40918014a20
b80245b40918014a20b80244b40918014a20b80243b40918014a20b80242
b40918014a20b80241b40918014a20b80240b40918014a20b8023fb40918
014a20b8023eb40918014a20b8023db40918014a20b8023cb40918014a20
b8023bb40918014a20b8023ab40918014a20b80239b40918014a20b80238
b40918014a20b80237b40918014a20b80236b40918014a20b80235b40918
014a20b80234b40918014a20b80233b40918014a20b80232b40918014a20
b80231b40918014a20b80230b40918014a20b8022fb40918014a20b8022e
b40918014a20b8022db40918014a20b8022cb40918014a20b8022bb40918
014a20b8022ab40918014a20b80229b40918014a20b80228b40918014a20
b80227b40918014a20b80226b40918014a20b80225b40918014a20b80224
b40918014a20b80223b40918014a20b80222b40918014a20b80221b40918
014a20b80220b40918014a20b8021fb40918014a20b8021eb40918014a20
b8021db40918014a20b8021cb40918014a20b8021bb40918014a20b8021a
b40918014a20b80219b40918014a20b80218b40918014a20b80217b40918
014a20b80216b40918014a20b80215b40918014a20b80214b40918014a20
b80213b40918014a20b80212b40918014a20b80211b40918014a20b80210
b40918014a20b8020fb40918014a20b8020eb40918014a20b8020db40918
014a20b8020cb40918014a20b8020bb40918014a20b8020ab40918014a20
b80209b40918014a20b80208b40918014a20b80207b40918014a20b80206
b40918014a20b80205b40918014a20b80204b40918014a20b80203b40918
014a20b80202b40918014a20b80201b40918014a20b80200b40918014a20
b801ffb40918014a20b801feb40918014a20b801fdb40918014a20b801fc
b40918014a20b801fbb40918014a20b801fab40918014a20b801f9b40918
014a20b801f8b40918014a20b801f7b40918014a20b801f6b40918014a20
b801f5b40918014a20b801f4b40918014a20b801f3b40918014a20b801f2
b40918014a20b801f1b40918014a20b801f0b40918014a20b801efb40918
014a20b801eeb40918014a20b801edb40918014a20b801ecb40918014a20
b801ebb40918014a20b801eab40918014a20b801e9b40918014a20b801e8
b40918014a20b801e7b40918014a20b801e6b40918014a20b801e5b40918
014a20b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20
b801e1b40918014a20b801e0b40918014a20b801dfb40918014a20b801de
b40918014a20b801ddb40918014a20b801dcb40918014a20b801dbb40918
014a20b801dab40918014a20b801d9b40918014a20b801d8b40918014a20
b801d7b40918014a20b801d6b40918014a20b801d5b40918014a20b801d4
b40918014a20b801d3b40918014a20b801d2b40918014a20b801d1b40918
014a20b801d0b40918014a20b801cfb40918014a20b801ceb40918014a20
b801cdb40918014a20b801ccb40918014a20b801cbb40918014a20b801ca
b40918014a20b801c9b40918014a20b801c8b40918014a20b801c7b40918
014a20b801c6b40918014a20b801c5b40918014a20b801c4b40918014a20
b801c3b40918014a20b801c2b40918014a20b801c1b40918014a20b801c0
b40918014a20b801bfb40918014a20b801beb40918014a20b801bdb40918
014a20b801bcb40918014a20b801bbb40918014a20b801bab40918014a20
b801b9b40918014a20b801b8b40918014a20b801b7b40918014a20b801b6
b40918014a20b801b5b40918014a20b801b4b40918014a20b801b3b40918
014a20b801b2b40918014a20b801b1b40918014a20b801b0b40918014a20
b801afb40918014a20b801aeb40918014a20b801adb40918014a20b801ac
b40918014a20b801abb40918014a20b801aab40918014a20b801a9b40918
014a20b801a8b40918014a20b801a7b40918014a20b801a6b40918014a20
b801a5b40918014a20b801a4b40918014a20b801a3b40918014a20b801a2
b40918014a20b801a1b40918014a20b801a0b40918014a20b8019fb40918
014a20b8019eb40918014a20b8019db40918014a20b8019cb40918014a20
b8019bb40918014a20b8019ab40918014a20b80199b40918014a20b80198
b40918014a20b80197b40918014a20b80196b40918014a20b80195b40918
014a20b80194b40918014a20b80193b40918014a20b80192b40918014a20
b80191b40918014a20b80190b40918014a20b8018fb40918014a20b8018e
b40918014a20b8018db40918014a20b8018cb40918014a20b8018bb40918
014a20b8018ab40918014a20b80189b40918014a20b80188b40918014a20
b80187b40918014a20b80186b40918014a20b80185b40918014a20b80184
b40918014a20b80183b40918014a20b80182b40918014a20b80181b40918
014a20b80180b40918014a20b8017fb40918014a20b8017eb40918014a20
b8017db40918014a20b8017cb40918014a20b8017bb40918014a20b8017a
b40918014a20b80179b40918014a20b80178b40918014a20b80177b40918
014a20b80176b40918014a20b80175b40918014a20b80174b40918014a20
b80173b40918014a20b80172b40918014a20b80171b40918014a20b80170
b40918014a20b8016fb40918014a20b8016eb40918014a20b8016db40918
014a20b8016cb40918014a20b8016bb40918014a20b8016ab40918014a20
b80169b40918014a20b80168b40918014a20b80167b40918014a20b80166
b40918014a20b80165b40918014a20b80164b40918014a20b80163b40918
014a20b80162b40918014a20b80161b40918014a20b80160b40918014a20
b8015fb40918014a20b8015eb40918014a20b8015db40918014a20b8015c
b40918014a20b8015bb40918014a20b8015ab40918014a20b80159b40918
014a20b80158b40918014a20b80157b40918014a20b80156b40918014a20
b80155b40918014a20b80154b40918014a20b80153b40918014a20b80152
b40918014a20b80150b40918014a20b8014fb40918014a20b8014eb40918
014a20b8014cb40918014a20b8014bb40918014a20b8014ab40918014a20
b80149b40918014a20b80148b40918014a20b80147b40918014a20b80146
b40918014a20b80145b40918014a20b80144b40918014a20b80143b30918
014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1f
b80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb802
7cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b2
1d431fb80277b21d431fb80276b21d431fb80275b21d411fb80274b21d43
1fb80273b21d431fb80272b21d411fb80271b21d421fb80270b21d421fb8
026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d431fb8026b
b21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb80267b21c
451fb80266b21c441fb80265b21c451fb80264b21c451fb80263b21c451f
b80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c451fb802
5eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451fb8025ab2
1c451fb80259b21c451fb80258b21c451fb80257b21c451fb80256b21c45
1fb80255b21c451fb80254b21c451fb80253b21c451fb80252b21c451fb8
0251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c451fb8024d
b21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b
491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1f
b80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb802
40b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb2
1b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c
1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb8
0233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022f
b21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b
4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491f
b80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb802
22b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb2
1b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e
1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb8
0215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211
b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a
4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1f
b80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219511fb802
04b219511fb80203b219501fb80202b219511fb80201b219511fb80200b2
19511fb801ffb219511fb801feb219501fb801fdb219511fb801fcb21951
1fb801fbb219511fb801fab219501fb801f9b219511fb801f8b219511fb8
01f7b219511fb801f6b219511fb801f5b218541fb801f4b218531fb801f3
b218541fb801f2b218541fb801f1b218541fb801f0b218531fb801efb218
541fb801eeb218541fb801edb218541fb801ecb218531fb801ebb218531f
b801eab218541fb801e9b218541fb801e8b218541fb801e7b218541fb801
e6b218531fb801e5b218541fb801e4b218531fb801e3b218541fb801e2b2
18541fb801e1b218541fb801e0b218531fb801dfb218531fb801deb21854
1fb801ddb218541fb801dcb218541fb801dbb218541fb801dab218531fb8
01d9b218541fb801d8b218541fb801d7b217571fb801d6b217561fb801d5
b217561fb801d4b217571fb801d3b217571fb801d2b217571fb801d1b217
571fb801d0b217561fb801cfb217561fb801ceb217571fb801cdb217571f
b801ccb217571fb801cbb217571fb801cab217561fb801c9b217561fb801
c8b217571fb801c7b217571fb801c6b217571fb801c5b217571fb801c4b2
17571fb801c3b217561fb801c2b217571fb801c1b217571fb801c0b21757
1fb801bfb217561fb801beb217561fb801bdb217571fb801bcb217571fb8
01bbb217571fb801bab217571fb801b9b217571fb801b8b217561fb801b7
b217571fb801b6b217571fb801b5b217571fb801b4b217571fb801b3b216
3f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1f
b801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801
aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2
165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b
1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8
019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199
b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb80195b216
5b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1f
b80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb801
8cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2
165b1fb80187b2165b1fb80186b215611fb80185b215621fb80184b21562
1fb80183b215661fb80182b215661fb80181b215551fb80180b215451fb8
017fb215361fb8017eb215361fb8017db215611fb8017cb215621fb8017b
b215621fb8017ab215641fb80179b215661fb80178b215661fb80177b215
661fb80176b215661fb80175b215661fb80174b215661fb80173b215451f
b80172b215621fb80171b215621fb80170b215631fb8016fb215641fb801
6eb215661fb8016db215661fb8016cb215661fb8016bb215661fb8016ab2
15661fb80169b215621fb80168b215621fb80167b215611fb80166b21564
1fb80165b215641fb80164b215661fb80163b215661fb80162b215661fb8
0161b215661fb80160b215661fb8015fb215661fb8015eb215551fb8015d
b215451fb8015cb215451fb8015bb215361fb8015ab215611fb80159b215
621fb80158b215621fb80157b215631fb80156b215641fb80155b215661f
b80154b215661fb80153b215661fb80152b215661fb80151b214401fb801
50b214551fb8014fb214561fb8014eb214831fb8014db2142d1fb8014cb2
14401fb8014bb214401fb8014ab214411fb80149b214401fb80148b21440
1fb80147b214411fb80146b2147e1fb80145b214871fb80144b2147f1fb8
0143b214801fb80142b212461fb80141b212461fb80140b212461fb8013f
b212461fb8013eb212441fb8013db212461fb8013cb211591fb8013bb211
591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137b211581f
b80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb801
32b211471fb80131b211551fb80130b211571fb8012fb211571fb8012eb2
11581fb8012db211591fb8012cb211591fb8012bb2115a1fb8012ab2115a
1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb8
0125b211561fb80124b211561fb80123b211571fb80122b211581fb80121
b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db211
5b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1f
b80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb801
14b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2
105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d
1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb8
0107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f1fb80103
b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621fff0f621f
fe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f
641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641ff00f641f
ef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f
641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681fe10e671f
e00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e
681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1f
d10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d
6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311f
c20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721f
bb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c
731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1f
ac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b
2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f
9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b
7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f
8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255805581ab
80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c
557a557bab7a557955775578ab7755ba028600660285403c5576ab755504
751475747503f47501ab750144750130750102007510752075030c745572
5573ab7255007250728072b072043bb072e072020072010ab8ffc0b3721b
1e46b8ffc0407c720d104671556f5570ab6f556e666d556a03251f693867
5568ab67556638645565ab645563386255613860555f385d555eab5d555c
385a555bab5a55593858555703251f5638545555ab54555338515552ab51
554f384e554e03251f4d384b554cab4b554a38485549ab48554738465545
03381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b401be01b
f01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f197f198f19
030f18cf18024018292c460f17cf17df17ef1704134017292e4600161016
20160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ff
c0404d162326460f15010f151f1502451f15010011e011f0110315bf10cf
10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e31
37460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054460f
0b1f0b02553f0b4f0b02400b3f4346400b2d304600030120010100011001
20010308b8ffc0b301151f46b80100b316010501b80190b154532b2b4bb8
0800524bb008505bb00188b02553b00188b040515ab00688b000555a5b58
b101018e59b101024354b0144b515a58b101018e59858d8d00421d4bb01d
5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1160042592b5e
7375732b2b745e732b2b5e73742b73742b7374745e7301755e73742b2b2b
2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b
5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff0284
006402830064028200640281006402800064027f0064027e0064027d0064
027c0064027b0064027a0064027900640278006402770064027600640275
006402740064027300640271006402700064026f0064026e0064026d0064
026c0064026b0064026a0064026900640268006402670064026600640265
00640264006402630064026200640261006402600064025f0064025e0064
025d0064025c0064025b0064025a00640259006402580064025700640256
0064025500640254006402530064025200640251006402500064024f0064
024e0064024d0064024c0064024b0064024a006402490064024800640247
006402460064024500640244006402430064024200640241006402400064
023f0064023e0064023d0064023c0064023b0064023a0064023900640238
006402370064023600640235006402340064023300640232006402310064
02300064022f0064022e0064022d0064022c0064022b0064022a00640229
006402280064022700640226006402250064022400640223006402220064
0221006402200064021f0064021e0064021d0064021c0064021b0064021a
006402190064021800640217006402160064021500640214006402130064
021200640211006402100064020f0064020e0064020d0064020c0064020b
0064020a00640209006402080064020700640206006402050064020441ff
00640203006402020064020100640200006401ff006401fe006401fd0064
01fc006401fb006401fa006401f9006401f8006401f7006401f6006401f5
006401f4006401f3006401f2006401f1006401f0006401ef006401ee0064
01ed006401ec006401eb006401ea006401e9006401e8006401e7006401e6
006401e5006401e4006401e3006401e2006401e1006401e0006401df0064
01de006401dd006401dc006401db006401da006401d9006401d8006401d7
006401d6006401d5006401d4006401d3006401d2006401d1006401d00064
01cf006401ce006401cd006401cc006401cb006401ca006401c9006401c8
006401c7006401c6006401c5006401c4006401c3006401c2006401c10064
01c0006401bf006401be006401bd006401bc006401bb006401ba006401b9
006401b8006401b7006401b6006401b5006401b4006401b3006401b20064
01b1006401b0006401af006401ae006401ad006401ac006401ab006401aa
006401a9006401a8006401a7006401a6006401a5006401a4006401a30064
01a2006401a1006401a00064019f0064019e0064019d0064019c0064019b
0064019a0064019900640198006401970064019600640195006401940064
01930064019200640191006401900064018f0064018e0064018d0064018c
0064018b0064018a00640189006401880064018700640186006401850064
41800184006401830064018200640181006401800064017f0064017e0064
017d0064017c0064017b0064017a00640179006401780064017700640176
0064017500640174006401730064017200640171006401700064016f0064
016e0064016d0064016c0064016b0064016a006401690064016800640167
006401660064016500640164006401630064016200640161006401600064
015f0064015e0064015d0064015c0064015b0064015a0064015900640158
006401570064015600640155006401540064015300640152006401500064
014f0064014e0064014c0064014b0064014a006401490064014800640147
0064014600640145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e
00>
[12923 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 9914 37 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>IKBBAA+Calibri AddT42Char 

1 0 1 <> IKBBAA+Calibri AddT42Char 
1 10638 39 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>IKBBAA+Calibri AddT42Char 
1 11446 41 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>IKBBAA+Calibri AddT42Char 
1 8978 35 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>IKBBAA+Calibri AddT42Char 
1 12202 43 <ffff006bffed03bd0520020600230000>IKBBAA+Calibri AddT42Char 
1 9326 36 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>IKBBAA+Calibri AddT42Char 
1 12536 45 <ffff0052ffed03ba0521020600240000>IKBBAA+Calibri AddT42Char 
1 10272 38 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>IKBBAA+Calibri AddT42Char 
1 8840 33 <00010097fff7016e00e0000b0017b10006b8ffc0b60c014d0609034c003f
cd012f2bc13130251406232226353436333216016e2f3e3c2e2f3e3c2e6d
472f2e45472f2e00>IKBBAA+Calibri AddT42Char 
1 10958 40 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>IKBBAA+Calibri AddT42Char 
1 8908 34 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>IKBBAA+Calibri AddT42Char 
1 1562 7 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>IKBBAA+Calibri AddT42Char 
1 8480 31 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>IKBBAA+Calibri AddT42Char 
1 6008 22 <00010099fffa05d003ca005000ea401b12100b014d13180b014d26100b0c
014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b014d13b8
fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8401e1e16
0d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f10014c0ab801
f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27b8fff0b3
10014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200100106b2
4b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f1239393f
ed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b2b2b2b39
31305d002b2b2b2b25140e0223222e023511342e022322060711140e0223
222e023511342e022322060711140e0223222e023511343e0233321e0215
15363633321e02173e0333321e021505d00812201819201308142c442e39
73450813201817211307162c432e397444081220191820130706121c1716
1d10074c8f4938594430102d514b47245776491f19080b080404080b0802
23395e44245855fd8b080b080404080b080223395e44245855fd8b080b08
0404080b080384080b090303090b0877554f1a2f412831442a133d66894c
>IKBBAA+Calibri AddT42Char 
1 3422 13 <00020099ffed03d50571002a003d0085b53f3f010a2136b8fff6b30c014d
36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36b801f840
1b152b120c014d2b200d014d2b180b014d2b1810014d2b100f014d2bb802
0a400900150a363521040530b80105b6264a1b46104c39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b323931305d01
140e0223222e022715140e0223222e023511343e0233321e0215113e0333
321e0207342e0223220e020711161633323e0203d53363905d2b49464627
08121b15141c12060713201819201208284b484828628b5728ae15345640
203e404527447c433e58371901e775bb844611263a296e080c070404070c
080538080c080404080c08fde5293823104e83b0754582643d122a4232fe
9953573c637b>IKBBAA+Calibri AddT42Char 
1 4310 16 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>IKBBAA+Calibri AddT42Char 
1 7334 26 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>IKBBAA+Calibri AddT42Char 
1 6748 24 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>IKBBAA+Calibri AddT42Char 
1 4632 17 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>IKBBAA+Calibri AddT42Char 
1 1872 8 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>IKBBAA+Calibri AddT42Char 
1 3072 12 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>IKBBAA+Calibri AddT42Char 
1 7972 28 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>IKBBAA+Calibri AddT42Char 
1 5368 19 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>IKBBAA+Calibri AddT42Char 
1 7576 27 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>IKBBAA+Calibri AddT42Char 
1 2844 11 <00010022fffa046805140024006e401d24080b014d2824011a080b014d26
1a01281701260d012c19012c180119b8ffe8b40f10014c19b8ffe8b40c0d
014c18b8ffe8b40f10014c18b8ffe840120c0d014c1918191826251f5218
0512520555003f3f12393f11120139392f2f2b2b2b2b3130005d5d015d5d
5d2b5d2b250e0323222e0427012626363633321e02170133013e03333216
16060702b7040e19271d162118110c0703fe5908011228221c2112090401
73010169030814241e1f240d03081e0b0e0803010405080b0804b2161b0e
0403080d0afbbf043f0b0e0803050e1b1600>IKBBAA+Calibri AddT42Char 
1 5632 20 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>IKBBAA+Calibri AddT42Char 
1 6458 23 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>IKBBAA+Calibri AddT42Char 
1 856 4 <000100acfffa0354050e0027005cb10713b8ffe8b310014d13b8fff0b30f
014d13b8fff0b30d014d13b8fff6b30c014d13b8ffe8b30b014d13b80211
b50d1d001e1d07b8010cb313131906b80128b322511955003f3fed12392f
ed012f2fc41139e12b2b2b2b2b32313001140e0223211121321e0215140e
02232111140e0223222e02351134363321321e020354040a0d07fe2601c0
070d0a04040a0d07fe400814201a1822140829170246070d0a0404c4131c
1108fe4807101b15131b1109fde5070d070505070d0704ae271f08121d00
>IKBBAA+Calibri AddT42Char 
1 322 2 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>IKBBAA+Calibri AddT42Char 
1 2114 9 <00020063ff41058705210027003b008e401d0a2112281810014d28100f01
4d28140d014d28120c014d28180b014d28b80232400a00201c301c801c03
1c32b8ffe8b310014d32b8fff0b30f014d32b8ffecb30d014d32b8ffeeb3
0c014d32b8ffe8b30b014d32b80233b412210a0d2db80129b41753250437
b8012bb10d56003fedd4cd3fed123939012fe12b2b2b2b2bd45dc4e12b2b
2b2b2b123939313005140e0223222e0227060623222e0235343e0233321e
0215140e02071e0501342e0223220e0215141e0233323e020587050a0c06
145974843e31966392d58b444a94de948bd38f4813293e2a496e48281408
feac275b987070985f29265a9772719a5e2872171f1106213f5a3c1e2c56
a6f7a09af9af5f56a5f29d519484702d3c43220f132302e06ebc8b4e538d
ba6872bf8c4d548fbd00>IKBBAA+Calibri AddT42Char 
1 4894 18 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>IKBBAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>IKBBAA+Calibri AddT42Char 
IKBBAA+Calibri /CharStrings get begin
/g37 37 def
/g1 1 def
/g39 39 def
/g41 41 def
/g43 43 def
/g45 45 def
/g38 38 def
/g33 33 def
/g40 40 def
/g34 34 def
/g7 7 def
/g31 31 def
/g22 22 def
/g13 13 def
/g16 16 def
/g26 26 def
/g24 24 def
/g17 17 def
/g8 8 def
/g12 12 def
/g28 28 def
/g19 19 def
/g27 27 def
/g11 11 def
/g20 20 def
/g23 23 def
/g4 4 def
/g2 2 def
/g9 9 def
/g18 18 def
end
IKBBAA+Calibri /Encoding get
dup 33 /g37 put
dup 34 /g1 put
dup 35 /g39 put
dup 36 /g41 put
dup 37 /g43 put
dup 38 /g45 put
dup 39 /g38 put
dup 40 /g33 put
dup 41 /g40 put
dup 42 /g34 put
dup 43 /g7 put
dup 44 /g31 put
dup 45 /g22 put
dup 46 /g13 put
dup 47 /g16 put
dup 48 /g26 put
dup 49 /g24 put
dup 50 /g17 put
dup 51 /g8 put
dup 52 /g12 put
dup 53 /g28 put
dup 54 /g19 put
dup 55 /g27 put
dup 56 /g11 put
dup 57 /g20 put
dup 58 /g23 put
dup 59 /g4 put
dup 60 /g2 put
dup 61 /g9 put
dup 62 /g18 put
pop
end
%ADOEndSubsetFont
/USTWFV+Calibri /IKBBAA+Calibri findfont ct_VMDictPut/USTWFV+Calibri*1 [33{/.notdef}rp /g37 /g1 /g39 /g41 /g43 /g45 /g38 /g33 /g40 /g34 /g7 /g31 /g22 /g13 /g16 /g26 /g24 /g17 /g8 /g12 /g28 /g19 /g27 /g11 /g20 /g23 /g4 /g2 /g9 /g18 193{/.notdef}rp]USTWFV+Calibri nfUSTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf67.7673 171.297 mo(!")[4.56123 0 ]xsh58.7673 158.569 mo(#!!")[4.56123 4.56123 4.56123 0 ]xsh58.7673 145.842 mo($!!")[4.56123 4.56123 4.56123 0 ]xsh58.7673 133.114 mo(%!!")[4.56123 4.56123 4.56123 0 ]xsh58.7673 120.387 mo(&!!")[4.56123 4.56123 4.56123 0 ]xsh53.7673 107.659 mo('!!!")[4.56123 4.56123 4.56123 4.56123 0 ]xsh53.7673 94.9317 mo('#!!")[4.56123 4.56123 4.56123 4.56123 0 ]xsh53.7673 82.2043 mo('$!!")[4.56123 4.56123 4.56123 4.56123 0 ]xsh53.7673 69.4768 mo('%!!")[4.56123 4.56123 4.56123 4.56123 0 ]xsh89.5166 182.407 mo('\(\)\(!*'\(\)\('")[4.56123 2.27518 4.56124 2.27518 4.56123 2.7522 4.56123 2.27518 4.56123 2.27519 4.56123 0 ]xsh145.471 182.407 mo('\(\)\('*'\(\)\(#")[4.56123 2.27518 4.56125 2.27518 4.56123 2.75221 4.56123 2.27518 4.56123 2.27519 4.56123 0 ]xshUSTWFV+Calibri*1 [0 -10 -10 0 0 0 ]msf48.2673 151.152 mo(+,-./0"12"34567")[-6.45496 -5.25395 -7.98795 -5.25394 -4.97601 -3.48599 -2.26098 -5.27293 -3.05193 -2.26099 -5.16598 -4.79004 -3.35007 -5.25394 -3.91106 0 ]yshUSTWFV+Calibri*1 [10 0 0 -10 0 0 ]msf112.519 197.707 mo(8/0791:"3490")[5.67402 4.97601 3.48599 3.91106 2.29504 5.27293 5.25394 2.26097 5.16599 4.79004 2.29504 3.48599 0 ]xshUSTWFV+Calibri*1 [14 0 0 -14 0 0 ]msf86.8581 48.5768 mo(;<=;10>/")[6.43299 8.09893 9.41505 6.433 7.3849 4.87897 6.5869 6.96503 0 ]xsh64.9129 221.171 mo
69.8539 221.171 li
69.8539 226.112 li
64.9129 226.112 li
cp
.630945 .325231 .0310369 0 cmyk
ef
0 0 0 .774868 cmyk
%ADOBeginSubsetFont: IKBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IKBBAA+Calibri gcheck setglobal} if
1 7032 25 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>IKBBAA+Calibri AddT42Char 
1 8244 30 <00010021ffef03dc04ad0041003db22f4110b801f8b42b1e1e2b0fb801f9
400c03352b4148102bed3b354814b80104b3254d094c003f3fed3fcded32
3f012f32dde112392f10e1322f31300132161511140e0223222e02351121
11141633323e0233321e0215140e0423222e02351123222635343e023333
35343e0233321e02151503a81e160813201719201308fe2f374717241c14
0805090504081020292e174664401d7e0f1205080d087d07132018192012
0803b71b1afc97080b080404080b080315fe0a5d5f090a09050e18121d21
110e0906254b734e020e2024131a1107d6070c090404090c07d6>IKBBAA+Calibri AddT42Char 
1 8768 32 <0002000003b70151052f000b000c0014b900000271b40609030c48003fde
cd012fe131300114062322263534363332160101512c3b3a2b2c3b3a2bfe
af04cd3a2a29393a2a29feb1>IKBBAA+Calibri AddT42Char 
1 8220 29 <ffff0021ffef03ef052f0226001e000000070020029e0000>IKBBAA+Calibri AddT42Char 
IKBBAA+Calibri /CharStrings get begin
/g25 25 def
/g29 29 def
end
IKBBAA+Calibri /Encoding get
dup 63 /g25 put
dup 64 /g29 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/USTWFV+Calibri*1 [33{/.notdef}rp /g37 /g1 /g39 /g41 /g43 /g45 /g38 /g33 /g40 /g34 /g7 /g31 /g22 /g13 /g16 /g26 /g24 /g17 /g8 /g12 /g28 /g19 /g27 /g11 /g20 /g23 /g4 /g2 /g9 /g18 /g25 /g29 191{/.notdef}rp]USTWFV+Calibri nfUSTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf71.8245 227.152 mo(?45)sh83.8792 227.152 mo(6*/:@0/")[4.72855 2.75579 4.47842 4.72854 5.01396 3.1374 4.47841 0 ]xsh122.859 221.171 mo
127.8 221.171 li
127.8 226.112 li
122.859 226.112 li
cp
.158206 .719326 .596887 .0181277 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf129.771 227.152 mo(?45)sh141.825 227.152 mo(6*?405/")[4.72855 2.75578 4.72855 4.31104 3.13739 3.01508 4.47841 0 ]xsh.75 lw
23.7673 25.077 mo
206.154 25.077 li
206.154 241.077 li
23.7673 241.077 li
cp
0 0 0 .130129 cmyk
@
232.7 25.0769 mo
432.308 25.0769 li
432.308 241.077 li
232.7 241.077 li
cp
0 0 0 0 cmyk
ef
.75 lw
293.9 114.422 mo
419.245 114.422 li
293.9 107.222 mo
419.245 107.222 li
293.9 100.35 mo
419.245 100.35 li
293.9 93.4769 mo
419.245 93.4769 li
293.9 86.6042 mo
419.245 86.6042 li
293.9 79.7314 mo
419.245 79.7314 li
293.9 72.8587 mo
419.245 72.8587 li
293.9 65.986 mo
419.245 65.986 li
0 0 0 .130129 cmyk
@
309.282 72.8587 mo
323.355 72.8587 li
323.355 121.216 li
309.282 121.216 li
cp
372.118 71.8769 mo
386.191 71.8769 li
386.191 121.216 li
372.118 121.216 li
cp
.630945 .325231 .0310369 0 cmyk
f
327.282 119.004 mo
341.355 119.004 li
341.355 121.216 li
327.282 121.216 li
cp
389.791 117.695 mo
403.864 117.695 li
403.864 121.216 li
389.791 121.216 li
cp
.158206 .719326 .596887 .0181277 cmyk
f
294.045 121.216 mo
419.308 121.216 li
0 0 0 .130129 cmyk
@
0 0 0 .774868 cmyk
%ADOBeginSubsetFont: IKBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IKBBAA+Calibri gcheck setglobal} if
1 11840 42 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>IKBBAA+Calibri AddT42Char 
IKBBAA+Calibri /CharStrings get begin
/g42 42 def
end
IKBBAA+Calibri /Encoding get
dup 65 /g42 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/USTWFV+Calibri*1 [33{/.notdef}rp /g37 /g1 /g39 /g41 /g43 /g45 /g38 /g33 /g40 /g34 /g7 /g31 /g22 /g13 /g16 /g26 /g24 /g17 /g8 /g12 /g28 /g19 /g27 /g11 /g20 /g23 /g4 /g2 /g9 /g18 /g25 /g29 /g42 190{/.notdef}rp]USTWFV+Calibri nfUSTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf280.7 124.816 mo(!")[4.56122 0 ]xsh266.7 117.899 mo(A!!!")[4.56122 4.56125 4.56122 4.56125 0 ]xsh262.7 110.981 mo('!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh262.7 104.064 mo('A!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh262.7 97.1465 mo(#!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh262.7 90.2291 mo(#A!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh262.7 83.3116 mo(\)!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh262.7 76.3942 mo(\)A!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh262.7 69.4768 mo($!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xshgsave
154.986 293.34 mo
446.335 1.99152 li
454.113 9.76971 li
162.765 301.118 li
cp
clp
288.932 171.806 mo
288.97 171.843 289 171.878 289.024 171.913 cv
289.047 171.947 289.065 171.978 289.075 172.007 cv
289.085 172.036 289.087 172.063 289.081 172.088 cv
289.074 172.112 289.062 172.134 289.043 172.153 cv
286.819 174.378 li
286.79 174.407 286.761 174.428 286.732 174.443 cv
286.703 174.457 286.672 174.464 286.64 174.463 cv
286.608 174.462 286.573 174.45 286.535 174.426 cv
286.496 174.403 286.454 174.368 286.409 174.323 cv
286.368 174.281 286.333 174.244 286.306 174.209 cv
286.278 174.175 286.257 174.141 286.244 174.107 cv
286.231 174.072 286.221 174.035 286.213 173.995 cv
286.205 173.955 286.201 173.909 286.2 173.857 cv
286.177 172.225 li
286.172 171.849 286.15 171.529 286.111 171.265 cv
286.072 171.002 286.021 170.777 285.957 170.592 cv
285.894 170.407 285.821 170.254 285.738 170.133 cv
285.656 170.012 285.57 169.907 285.481 169.818 cv
285.392 169.729 285.292 169.659 285.183 169.609 cv
285.073 169.559 284.959 169.533 284.843 169.529 cv
284.726 169.526 284.607 169.549 284.486 169.599 cv
284.366 169.649 284.25 169.73 284.138 169.841 cv
284.008 169.971 283.909 170.106 283.841 170.245 cv
283.772 170.384 283.72 170.514 283.684 170.633 cv
283.647 170.753 283.621 170.857 283.604 170.944 cv
283.587 171.032 283.565 171.089 283.54 171.115 cv
283.525 171.129 283.507 171.139 283.487 171.142 cv
283.467 171.146 283.444 171.142 283.418 171.13 cv
283.392 171.119 283.361 171.1 283.326 171.073 cv
283.29 171.047 283.251 171.012 283.207 170.968 cv
283.176 170.937 283.15 170.909 283.13 170.884 cv
283.109 170.859 283.093 170.836 283.081 170.814 cv
283.07 170.792 283.061 170.77 283.055 170.747 cv
283.049 170.724 283.047 170.69 283.05 170.643 cv
283.053 170.597 283.067 170.524 283.091 170.426 cv
283.115 170.327 283.154 170.214 283.21 170.085 cv
283.266 169.957 283.337 169.825 283.423 169.689 cv
283.509 169.553 283.613 169.424 283.735 169.302 cv
283.93 169.108 284.128 168.965 284.329 168.873 cv
284.53 168.782 284.726 168.736 284.918 168.735 cv
285.109 168.734 285.292 168.773 285.466 168.852 cv
285.64 168.93 285.799 169.041 285.941 169.184 cv
286.07 169.312 286.187 169.452 286.291 169.602 cv
286.396 169.752 286.486 169.938 286.56 170.16 cv
286.635 170.382 286.694 170.653 286.737 170.973 cv
286.779 171.293 286.804 171.686 286.81 172.152 cv
286.839 173.454 li
288.588 171.704 li
288.605 171.688 288.626 171.676 288.651 171.67 cv
288.675 171.664 288.703 171.664 288.733 171.671 cv
288.763 171.678 288.794 171.693 288.827 171.716 cv
288.86 171.739 288.895 171.769 288.932 171.806 cv
cp
290.308 170.205 mo
290.455 170.352 290.529 170.474 290.529 170.572 cv
290.529 170.669 290.465 170.783 290.336 170.911 cv
290.212 171.035 290.102 171.097 290.007 171.097 cv
289.911 171.097 289.792 171.026 289.649 170.882 cv
289.501 170.735 289.428 170.612 289.428 170.515 cv
289.427 170.418 289.492 170.305 289.62 170.176 cv
289.744 170.052 289.854 169.99 289.95 169.99 cv
290.045 169.99 290.164 170.061 290.308 170.205 cv
cp
293.764 166.974 mo
293.802 167.011 293.832 167.047 293.856 167.081 cv
293.879 167.115 293.897 167.146 293.907 167.175 cv
293.917 167.204 293.919 167.231 293.913 167.256 cv
293.906 167.28 293.894 167.302 293.875 167.321 cv
291.651 169.546 li
291.622 169.575 291.593 169.596 291.564 169.611 cv
291.535 169.625 291.504 169.632 291.472 169.631 cv
291.44 169.63 291.405 169.618 291.367 169.594 cv
291.328 169.571 291.286 169.536 291.241 169.491 cv
291.2 169.449 291.165 169.411 291.138 169.377 cv
291.11 169.343 291.089 169.309 291.076 169.274 cv
291.063 169.24 291.053 169.203 291.045 169.163 cv
291.037 169.123 291.033 169.077 291.032 169.025 cv
291.009 167.393 li
291.004 167.017 290.982 166.697 290.943 166.433 cv
290.904 166.17 290.853 165.945 290.789 165.76 cv
290.726 165.575 290.653 165.422 290.57 165.301 cv
290.488 165.18 290.402 165.075 290.313 164.986 cv
290.224 164.897 290.124 164.827 290.015 164.777 cv
289.905 164.727 289.792 164.701 289.675 164.697 cv
289.558 164.694 289.439 164.717 289.318 164.767 cv
289.198 164.817 289.082 164.898 288.97 165.009 cv
288.84 165.139 288.741 165.274 288.672 165.413 cv
288.604 165.552 288.552 165.682 288.516 165.801 cv
288.479 165.921 288.453 166.025 288.436 166.112 cv
288.419 166.2 288.397 166.257 288.372 166.282 cv
288.357 166.297 288.339 166.307 288.319 166.31 cv
288.299 166.314 288.276 166.31 288.25 166.298 cv
288.224 166.287 288.193 166.268 288.158 166.241 cv
288.122 166.215 288.083 166.18 288.039 166.136 cv
288.008 166.105 287.982 166.077 287.962 166.052 cv
287.941 166.027 287.925 166.004 287.914 165.982 cv
287.902 165.96 287.893 165.938 287.887 165.915 cv
287.881 165.892 287.879 165.858 287.882 165.811 cv
287.885 165.765 287.899 165.692 287.923 165.594 cv
287.947 165.495 287.986 165.382 288.042 165.253 cv
288.098 165.125 288.169 164.993 288.255 164.857 cv
288.341 164.721 288.445 164.592 288.567 164.47 cv
288.762 164.276 288.96 164.133 289.161 164.041 cv
289.362 163.95 289.558 163.904 289.75 163.903 cv
289.941 163.902 290.124 163.941 290.298 164.02 cv
290.472 164.098 290.631 164.209 290.773 164.352 cv
290.902 164.48 291.019 164.62 291.123 164.77 cv
291.228 164.92 291.318 165.106 291.392 165.328 cv
291.467 165.55 291.526 165.821 291.569 166.141 cv
291.611 166.461 291.636 166.854 291.642 167.32 cv
291.671 168.622 li
293.42 166.872 li
293.437 166.856 293.458 166.844 293.483 166.838 cv
293.507 166.832 293.535 166.832 293.565 166.839 cv
293.595 166.846 293.626 166.861 293.659 166.884 cv
293.692 166.907 293.727 166.937 293.764 166.974 cv
cp
295.47 158.168 mo
299.169 161.867 li
299.185 161.883 299.196 161.902 299.199 161.923 cv
299.203 161.944 299.198 161.969 299.184 161.997 cv
299.17 162.026 299.149 162.059 299.121 162.098 cv
299.093 162.136 299.053 162.182 298.999 162.235 cv
298.95 162.284 298.905 162.324 298.865 162.354 cv
298.825 162.384 298.791 162.405 298.763 162.418 cv
298.736 162.431 298.711 162.436 298.69 162.432 cv
298.669 162.428 298.651 162.418 298.634 162.401 cv
295.131 158.898 li
295.125 158.904 li
297.228 163.839 li
297.236 163.859 297.24 163.881 297.239 163.902 cv
297.238 163.924 297.23 163.949 297.215 163.978 cv
297.201 164.008 297.18 164.039 297.153 164.072 cv
297.126 164.105 297.092 164.142 297.051 164.184 cv
297.007 164.227 296.968 164.262 296.933 164.289 cv
296.897 164.316 296.866 164.336 296.838 164.35 cv
296.81 164.363 296.785 164.371 296.763 164.372 cv
296.741 164.373 296.722 164.369 296.706 164.361 cv
291.831 162.198 li
291.828 162.201 li
295.331 165.704 li
295.348 165.721 295.358 165.74 295.362 165.761 cv
295.366 165.782 295.361 165.806 295.347 165.835 cv
295.333 165.863 295.311 165.897 295.282 165.937 cv
295.253 165.976 295.212 166.022 295.159 166.076 cv
295.107 166.127 295.062 166.167 295.023 166.196 cv
294.983 166.225 294.95 166.246 294.922 166.259 cv
294.895 166.272 294.871 166.276 294.851 166.271 cv
294.832 166.266 294.813 166.255 294.797 166.239 cv
291.098 162.54 li
291.01 162.453 290.971 162.367 290.98 162.284 cv
290.989 162.2 291.022 162.13 291.079 162.073 cv
291.407 161.745 li
291.475 161.678 291.54 161.625 291.603 161.587 cv
291.665 161.549 291.729 161.524 291.794 161.513 cv
291.859 161.503 291.925 161.505 291.991 161.521 cv
292.058 161.538 292.129 161.564 292.204 161.601 cv
296.267 163.363 li
296.283 163.347 li
294.575 159.249 li
294.535 159.164 294.508 159.086 294.492 159.015 cv
294.476 158.944 294.471 158.879 294.478 158.821 cv
294.484 158.762 294.502 158.707 294.531 158.656 cv
294.559 158.604 294.6 158.552 294.652 158.5 cv
294.997 158.156 li
295.028 158.124 295.063 158.099 295.1 158.08 cv
295.138 158.06 295.177 158.051 295.217 158.051 cv
295.256 158.05 295.297 158.059 295.34 158.076 cv
295.383 158.094 295.426 158.124 295.47 158.168 cv
cp
301.353 157.585 mo
301.541 157.774 301.674 157.976 301.752 158.193 cv
301.829 158.409 301.858 158.63 301.837 158.856 cv
301.816 159.082 301.748 159.304 301.633 159.523 cv
301.517 159.741 301.363 159.947 301.171 160.14 cv
301.036 160.275 300.9 160.388 300.762 160.48 cv
300.624 160.573 300.493 160.647 300.369 160.704 cv
300.246 160.761 300.136 160.802 300.039 160.828 cv
299.943 160.854 299.87 160.866 299.821 160.865 cv
299.772 160.864 299.723 160.85 299.673 160.823 cv
299.624 160.796 299.567 160.751 299.503 160.687 cv
299.458 160.642 299.422 160.602 299.397 160.568 cv
299.371 160.534 299.353 160.503 299.342 160.476 cv
299.332 160.45 299.33 160.426 299.335 160.407 cv
299.34 160.387 299.351 160.369 299.368 160.352 cv
299.397 160.323 299.455 160.3 299.543 160.282 cv
299.631 160.264 299.737 160.234 299.861 160.193 cv
299.985 160.151 300.124 160.09 300.277 160.009 cv
300.431 159.928 300.584 159.81 300.737 159.657 cv
300.853 159.541 300.944 159.419 301.01 159.292 cv
301.075 159.164 301.114 159.038 301.127 158.911 cv
301.139 158.785 301.123 158.662 301.078 158.542 cv
301.032 158.422 300.957 158.31 300.852 158.204 cv
300.738 158.091 300.615 158.019 300.482 157.99 cv
300.35 157.961 300.21 157.958 300.065 157.982 cv
299.918 158.006 299.766 158.047 299.606 158.105 cv
299.447 158.163 299.284 158.223 299.117 158.284 cv
298.951 158.345 298.781 158.397 298.609 158.44 cv
298.438 158.484 298.266 158.505 298.094 158.503 cv
297.922 158.5 297.751 158.467 297.582 158.403 cv
297.412 158.339 297.245 158.225 297.082 158.062 cv
296.914 157.894 296.795 157.714 296.724 157.521 cv
296.654 157.329 296.629 157.134 296.648 156.936 cv
296.668 156.738 296.729 156.541 296.833 156.345 cv
296.936 156.148 297.075 155.963 297.249 155.789 cv
297.338 155.7 297.435 155.618 297.54 155.544 cv
297.646 155.47 297.751 155.405 297.857 155.352 cv
297.963 155.298 298.063 155.256 298.157 155.226 cv
298.251 155.196 298.318 155.181 298.357 155.181 cv
298.397 155.181 298.425 155.184 298.443 155.189 cv
298.46 155.194 298.48 155.204 298.502 155.217 cv
298.524 155.231 298.548 155.249 298.575 155.272 cv
298.602 155.295 298.635 155.326 298.675 155.365 cv
298.712 155.403 298.744 155.438 298.77 155.47 cv
298.796 155.502 298.815 155.531 298.829 155.557 cv
298.843 155.583 298.848 155.606 298.846 155.627 cv
298.844 155.648 298.836 155.665 298.821 155.68 cv
298.799 155.703 298.748 155.724 298.671 155.744 cv
298.593 155.763 298.5 155.79 298.394 155.824 cv
298.287 155.858 298.171 155.909 298.044 155.975 cv
297.918 156.041 297.794 156.134 297.674 156.254 cv
297.562 156.366 297.48 156.479 297.427 156.592 cv
297.374 156.704 297.345 156.813 297.341 156.916 cv
297.337 157.019 297.355 157.119 297.396 157.214 cv
297.438 157.309 297.496 157.395 297.573 157.471 cv
297.685 157.583 297.807 157.653 297.939 157.682 cv
298.072 157.711 298.212 157.713 298.361 157.689 cv
298.509 157.665 298.664 157.624 298.826 157.566 cv
298.987 157.508 299.151 157.448 299.318 157.387 cv
299.485 157.326 299.655 157.271 299.828 157.225 cv
300.001 157.178 300.174 157.154 300.346 157.154 cv
300.518 157.154 300.689 157.186 300.859 157.25 cv
301.029 157.314 301.193 157.426 301.353 157.585 cv
cp
305.38 155.396 mo
305.419 155.435 305.449 155.471 305.47 155.504 cv
305.491 155.537 305.504 155.567 305.51 155.594 cv
305.516 155.62 305.516 155.644 305.51 155.665 cv
305.504 155.685 305.493 155.703 305.479 155.717 cv
303.379 157.817 li
303.365 157.831 303.348 157.841 303.328 157.846 cv
303.309 157.852 303.285 157.852 303.257 157.846 cv
303.229 157.841 303.199 157.829 303.166 157.808 cv
303.133 157.787 303.097 157.758 303.057 157.719 cv
303.021 157.681 302.992 157.646 302.971 157.613 cv
302.951 157.58 302.936 157.551 302.928 157.524 cv
302.92 157.497 302.918 157.472 302.922 157.449 cv
302.926 157.427 302.936 157.407 302.953 157.391 cv
303.789 156.554 li
300.728 153.493 li
300.415 154.735 li
300.397 154.795 300.378 154.839 300.358 154.867 cv
300.338 154.895 300.314 154.91 300.286 154.911 cv
300.258 154.912 300.226 154.899 300.19 154.874 cv
300.154 154.848 300.112 154.811 300.064 154.763 cv
300.029 154.728 300.001 154.697 299.979 154.669 cv
299.957 154.641 299.941 154.615 299.931 154.593 cv
299.921 154.57 299.915 154.547 299.914 154.523 cv
299.913 154.499 299.915 154.471 299.922 154.44 cv
300.255 152.921 li
300.257 152.906 300.263 152.89 300.271 152.874 cv
300.279 152.857 300.291 152.838 300.305 152.815 cv
300.32 152.792 300.339 152.768 300.363 152.742 cv
300.387 152.716 300.417 152.684 300.454 152.647 cv
300.504 152.597 300.548 152.558 300.585 152.529 cv
300.622 152.5 300.654 152.48 300.68 152.468 cv
300.706 152.457 300.727 152.454 300.745 152.459 cv
300.763 152.464 300.778 152.473 300.79 152.485 cv
304.324 156.019 li
305.052 155.291 li
305.069 155.275 305.089 155.264 305.113 155.259 cv
305.137 155.253 305.162 155.255 305.189 155.263 cv
305.216 155.271 305.245 155.286 305.277 155.308 cv
305.309 155.329 305.343 155.359 305.38 155.396 cv
cp
306.1 151.956 mo
306.181 152.036 306.228 152.102 306.24 152.152 cv
306.253 152.201 306.241 152.244 306.206 152.279 cv
304.906 153.579 li
304.869 153.617 304.824 153.629 304.774 153.615 cv
304.723 153.602 304.658 153.555 304.579 153.477 cv
304.5 153.398 304.455 153.333 304.442 153.284 cv
304.43 153.234 304.442 153.19 304.479 153.153 cv
305.78 151.853 li
305.796 151.836 305.814 151.824 305.834 151.817 cv
305.854 151.81 305.877 151.81 305.904 151.819 cv
305.931 151.827 305.961 151.842 305.993 151.864 cv
306.025 151.885 306.061 151.916 306.1 151.956 cv
cp
310.529 150.209 mo
310.566 150.246 310.596 150.282 310.62 150.316 cv
310.644 150.35 310.661 150.382 310.671 150.411 cv
310.681 150.44 310.683 150.466 310.677 150.491 cv
310.671 150.516 310.658 150.538 310.64 150.556 cv
308.415 152.781 li
308.386 152.81 308.357 152.832 308.328 152.846 cv
308.299 152.861 308.268 152.868 308.237 152.867 cv
308.204 152.866 308.169 152.854 308.131 152.83 cv
308.093 152.806 308.051 152.772 308.005 152.726 cv
307.964 152.685 307.93 152.647 307.902 152.613 cv
307.874 152.579 307.854 152.544 307.841 152.51 cv
307.828 152.476 307.817 152.439 307.81 152.399 cv
307.802 152.359 307.797 152.313 307.796 152.26 cv
307.774 150.629 li
307.769 150.252 307.747 149.932 307.708 149.669 cv
307.668 149.405 307.617 149.181 307.554 148.996 cv
307.49 148.81 307.417 148.657 307.335 148.537 cv
307.253 148.416 307.167 148.311 307.078 148.222 cv
306.988 148.132 306.889 148.063 306.779 148.013 cv
306.669 147.963 306.556 147.936 306.439 147.933 cv
306.322 147.929 306.203 147.952 306.083 148.003 cv
305.962 148.053 305.846 148.134 305.735 148.245 cv
305.604 148.375 305.505 148.51 305.437 148.649 cv
305.369 148.788 305.316 148.917 305.28 149.037 cv
305.244 149.156 305.217 149.26 305.2 149.348 cv
305.183 149.436 305.162 149.492 305.136 149.518 cv
305.121 149.533 305.104 149.542 305.084 149.546 cv
305.064 149.549 305.04 149.545 305.014 149.534 cv
304.988 149.523 304.957 149.504 304.922 149.477 cv
304.887 149.45 304.847 149.415 304.804 149.372 cv
304.773 149.341 304.747 149.313 304.726 149.288 cv
304.705 149.263 304.689 149.24 304.678 149.218 cv
304.667 149.196 304.658 149.174 304.651 149.151 cv
304.645 149.128 304.644 149.093 304.647 149.047 cv
304.65 149 304.663 148.928 304.687 148.829 cv
304.711 148.731 304.751 148.617 304.807 148.489 cv
304.863 148.36 304.934 148.228 305.02 148.093 cv
305.105 147.957 305.21 147.828 305.332 147.706 cv
305.527 147.511 305.724 147.368 305.925 147.277 cv
306.126 147.186 306.323 147.14 306.514 147.139 cv
306.706 147.138 306.888 147.176 307.063 147.255 cv
307.237 147.334 307.395 147.444 307.538 147.587 cv
307.667 147.716 307.783 147.855 307.888 148.006 cv
307.992 148.156 308.082 148.342 308.157 148.564 cv
308.232 148.785 308.29 149.056 308.333 149.376 cv
308.376 149.696 308.4 150.089 308.407 150.556 cv
308.435 151.858 li
310.185 150.108 li
310.201 150.091 310.222 150.08 310.247 150.073 cv
310.272 150.067 310.299 150.068 310.329 150.075 cv
310.359 150.082 310.391 150.097 310.424 150.12 cv
310.457 150.142 310.492 150.172 310.529 150.209 cv
cp
311.904 148.608 mo
312.051 148.756 312.125 148.878 312.125 148.976 cv
312.125 149.073 312.061 149.186 311.933 149.314 cv
311.808 149.439 311.699 149.501 311.603 149.501 cv
311.508 149.501 311.388 149.429 311.245 149.286 cv
311.098 149.138 311.024 149.016 311.024 148.918 cv
311.024 148.821 311.088 148.708 311.216 148.58 cv
311.341 148.455 311.451 148.393 311.546 148.393 cv
311.641 148.393 311.761 148.465 311.904 148.608 cv
cp
315.361 145.377 mo
315.398 145.414 315.428 145.45 315.452 145.484 cv
315.476 145.518 315.493 145.55 315.503 145.579 cv
315.513 145.608 315.515 145.634 315.509 145.659 cv
315.503 145.684 315.49 145.706 315.472 145.724 cv
313.247 147.949 li
313.218 147.978 313.189 148 313.16 148.014 cv
313.131 148.029 313.101 148.036 313.069 148.035 cv
313.036 148.034 313.001 148.022 312.963 147.998 cv
312.925 147.974 312.883 147.94 312.838 147.894 cv
312.796 147.853 312.762 147.815 312.734 147.781 cv
312.706 147.747 312.686 147.712 312.673 147.678 cv
312.66 147.644 312.649 147.607 312.642 147.567 cv
312.634 147.527 312.629 147.481 312.628 147.428 cv
312.606 145.797 li
312.601 145.42 312.579 145.1 312.54 144.837 cv
312.5 144.573 312.449 144.349 312.386 144.164 cv
312.322 143.978 312.249 143.825 312.167 143.705 cv
312.085 143.584 311.999 143.479 311.91 143.39 cv
311.82 143.3 311.721 143.231 311.611 143.181 cv
311.501 143.131 311.388 143.104 311.271 143.101 cv
311.154 143.097 311.035 143.12 310.915 143.171 cv
310.794 143.221 310.678 143.302 310.567 143.413 cv
310.436 143.543 310.337 143.678 310.269 143.817 cv
310.201 143.956 310.148 144.085 310.112 144.205 cv
310.076 144.324 310.049 144.428 310.032 144.516 cv
310.015 144.604 309.994 144.66 309.968 144.686 cv
309.953 144.701 309.936 144.71 309.916 144.714 cv
309.896 144.717 309.872 144.713 309.846 144.702 cv
309.82 144.691 309.789 144.672 309.754 144.645 cv
309.719 144.618 309.679 144.583 309.636 144.54 cv
309.605 144.509 309.579 144.481 309.558 144.456 cv
309.537 144.431 309.521 144.407 309.51 144.386 cv
309.499 144.364 309.49 144.342 309.483 144.319 cv
309.477 144.296 309.476 144.261 309.479 144.215 cv
309.482 144.168 309.495 144.096 309.519 143.997 cv
309.543 143.899 309.583 143.785 309.639 143.657 cv
309.695 143.528 309.766 143.396 309.852 143.261 cv
309.938 143.125 310.042 142.996 310.164 142.874 cv
310.359 142.679 310.556 142.536 310.757 142.445 cv
310.958 142.354 311.155 142.308 311.346 142.307 cv
311.538 142.306 311.721 142.344 311.895 142.423 cv
312.069 142.502 312.227 142.612 312.37 142.755 cv
312.499 142.884 312.615 143.023 312.72 143.174 cv
312.824 143.324 312.914 143.51 312.989 143.732 cv
313.064 143.953 313.122 144.224 313.165 144.544 cv
313.208 144.864 313.232 145.257 313.239 145.724 cv
313.267 147.026 li
315.017 145.276 li
315.034 145.259 315.054 145.248 315.079 145.241 cv
315.104 145.235 315.131 145.236 315.161 145.243 cv
315.191 145.25 315.223 145.265 315.256 145.288 cv
315.289 145.31 315.324 145.34 315.361 145.377 cv
cp
317.066 136.571 mo
320.765 140.27 li
320.782 140.287 320.792 140.306 320.796 140.327 cv
320.8 140.348 320.795 140.372 320.781 140.401 cv
320.767 140.43 320.746 140.463 320.718 140.501 cv
320.69 140.539 320.649 140.585 320.596 140.639 cv
320.547 140.688 320.502 140.727 320.461 140.757 cv
320.421 140.787 320.387 140.809 320.36 140.822 cv
320.332 140.835 320.308 140.84 320.287 140.836 cv
320.266 140.832 320.247 140.822 320.231 140.805 cv
316.727 137.302 li
316.721 137.308 li
318.824 142.242 li
318.832 142.263 318.836 142.284 318.835 142.306 cv
318.834 142.328 318.826 142.353 318.812 142.382 cv
318.797 142.411 318.777 142.442 318.75 142.475 cv
318.723 142.509 318.689 142.546 318.647 142.587 cv
318.604 142.631 318.564 142.666 318.529 142.693 cv
318.494 142.72 318.462 142.74 318.434 142.754 cv
318.406 142.767 318.382 142.774 318.36 142.775 cv
318.338 142.776 318.319 142.773 318.302 142.764 cv
313.427 140.601 li
313.424 140.604 li
316.928 144.108 li
316.944 144.124 316.954 144.143 316.958 144.164 cv
316.962 144.185 316.957 144.21 316.943 144.238 cv
316.929 144.267 316.908 144.301 316.879 144.34 cv
316.85 144.38 316.809 144.426 316.755 144.479 cv
316.704 144.53 316.659 144.571 316.619 144.6 cv
316.58 144.629 316.547 144.65 316.519 144.663 cv
316.491 144.676 316.468 144.68 316.448 144.675 cv
316.428 144.67 316.41 144.659 316.393 144.642 cv
312.694 140.943 li
312.607 140.856 312.568 140.771 312.577 140.687 cv
312.586 140.604 312.619 140.534 312.676 140.477 cv
313.004 140.148 li
313.071 140.081 313.136 140.029 313.199 139.99 cv
313.262 139.952 313.326 139.928 313.391 139.917 cv
313.456 139.906 313.521 139.909 313.588 139.925 cv
313.655 139.941 313.725 139.968 313.8 140.005 cv
317.864 141.767 li
317.879 141.751 li
316.171 137.653 li
316.132 137.567 316.104 137.489 316.088 137.418 cv
316.072 137.347 316.067 137.283 316.074 137.224 cv
316.081 137.166 316.099 137.111 316.127 137.059 cv
316.156 137.008 316.196 136.956 316.249 136.903 cv
316.593 136.559 li
316.625 136.528 316.659 136.502 316.697 136.483 cv
316.735 136.464 316.773 136.454 316.813 136.454 cv
316.853 136.454 316.894 136.462 316.937 136.48 cv
316.979 136.497 317.022 136.528 317.066 136.571 cv
cp
322.949 135.989 mo
323.138 136.177 323.271 136.38 323.348 136.596 cv
323.426 136.813 323.454 137.034 323.433 137.26 cv
323.412 137.485 323.344 137.708 323.229 137.926 cv
323.114 138.145 322.96 138.351 322.767 138.544 cv
322.632 138.678 322.496 138.792 322.358 138.884 cv
322.22 138.976 322.089 139.051 321.966 139.108 cv
321.842 139.164 321.732 139.206 321.636 139.231 cv
321.539 139.257 321.466 139.269 321.417 139.268 cv
321.369 139.267 321.319 139.253 321.27 139.226 cv
321.22 139.2 321.164 139.154 321.1 139.09 cv
321.054 139.045 321.019 139.005 320.993 138.971 cv
320.967 138.937 320.949 138.907 320.939 138.88 cv
320.929 138.853 320.926 138.83 320.931 138.81 cv
320.937 138.79 320.948 138.772 320.964 138.756 cv
320.993 138.727 321.052 138.703 321.139 138.685 cv
321.227 138.668 321.333 138.638 321.458 138.596 cv
321.582 138.555 321.72 138.493 321.874 138.412 cv
322.027 138.331 322.18 138.214 322.334 138.061 cv
322.45 137.944 322.541 137.823 322.606 137.695 cv
322.671 137.568 322.71 137.441 322.723 137.315 cv
322.736 137.189 322.72 137.066 322.674 136.946 cv
322.629 136.826 322.554 136.713 322.448 136.608 cv
322.334 136.494 322.211 136.423 322.079 136.394 cv
321.946 136.365 321.807 136.362 321.661 136.386 cv
321.515 136.41 321.362 136.451 321.203 136.509 cv
321.043 136.566 320.88 136.626 320.714 136.687 cv
320.547 136.748 320.378 136.801 320.206 136.844 cv
320.034 136.888 319.862 136.908 319.69 136.906 cv
319.519 136.904 319.348 136.871 319.178 136.807 cv
319.008 136.743 318.842 136.629 318.678 136.465 cv
318.51 136.297 318.391 136.117 318.321 135.925 cv
318.25 135.732 318.225 135.537 318.245 135.34 cv
318.264 135.142 318.326 134.945 318.429 134.748 cv
318.533 134.552 318.671 134.366 318.845 134.193 cv
318.934 134.104 319.031 134.022 319.137 133.948 cv
319.242 133.873 319.348 133.809 319.454 133.755 cv
319.559 133.702 319.659 133.66 319.753 133.63 cv
319.848 133.6 319.914 133.585 319.954 133.585 cv
319.993 133.585 320.022 133.588 320.039 133.593 cv
320.057 133.598 320.077 133.607 320.098 133.621 cv
320.12 133.634 320.144 133.653 320.172 133.676 cv
320.198 133.698 320.232 133.73 320.271 133.769 cv
320.309 133.806 320.34 133.841 320.366 133.873 cv
320.392 133.906 320.412 133.935 320.426 133.961 cv
320.439 133.987 320.445 134.01 320.443 134.031 cv
320.441 134.051 320.432 134.069 320.418 134.083 cv
320.395 134.106 320.345 134.128 320.267 134.147 cv
320.189 134.167 320.097 134.194 319.99 134.228 cv
319.884 134.262 319.767 134.312 319.641 134.378 cv
319.514 134.445 319.391 134.538 319.271 134.658 cv
319.159 134.77 319.076 134.882 319.023 134.995 cv
318.97 135.108 318.942 135.216 318.938 135.319 cv
318.933 135.423 318.952 135.522 318.993 135.617 cv
319.034 135.712 319.093 135.798 319.169 135.875 cv
319.281 135.986 319.403 136.057 319.536 136.086 cv
319.668 136.114 319.809 136.117 319.957 136.093 cv
320.105 136.069 320.26 136.028 320.422 135.97 cv
320.584 135.911 320.748 135.852 320.915 135.79 cv
321.082 135.729 321.252 135.675 321.425 135.628 cv
321.598 135.581 321.771 135.558 321.942 135.558 cv
322.114 135.557 322.285 135.59 322.455 135.654 cv
322.625 135.718 322.79 135.829 322.949 135.989 cv
cp
326.952 133.787 mo
326.989 133.824 327.019 133.859 327.043 133.893 cv
327.067 133.927 327.084 133.959 327.094 133.988 cv
327.104 134.017 327.106 134.044 327.1 134.069 cv
327.094 134.094 327.081 134.115 327.062 134.134 cv
324.838 136.358 li
324.809 136.388 324.78 136.409 324.751 136.424 cv
324.722 136.438 324.691 136.445 324.659 136.444 cv
324.627 136.443 324.592 136.431 324.554 136.407 cv
324.515 136.384 324.474 136.349 324.428 136.303 cv
324.387 136.262 324.352 136.224 324.325 136.19 cv
324.297 136.156 324.276 136.122 324.263 136.087 cv
324.25 136.053 324.24 136.016 324.232 135.976 cv
324.224 135.936 324.22 135.89 324.219 135.838 cv
324.196 134.206 li
324.191 133.83 324.169 133.51 324.13 133.246 cv
324.091 132.983 324.04 132.758 323.976 132.573 cv
323.913 132.388 323.84 132.235 323.757 132.114 cv
323.675 131.993 323.589 131.888 323.5 131.799 cv
323.411 131.71 323.311 131.64 323.202 131.59 cv
323.092 131.54 322.978 131.513 322.862 131.51 cv
322.745 131.506 322.626 131.53 322.505 131.58 cv
322.385 131.63 322.269 131.711 322.158 131.822 cv
322.027 131.952 321.928 132.087 321.86 132.226 cv
321.791 132.365 321.739 132.495 321.703 132.614 cv
321.666 132.734 321.64 132.837 321.623 132.925 cv
321.606 133.013 321.584 133.07 321.559 133.095 cv
321.544 133.11 321.526 133.12 321.506 133.123 cv
321.486 133.126 321.463 133.123 321.437 133.112 cv
321.411 133.1 321.38 133.081 321.345 133.055 cv
321.309 133.028 321.27 132.992 321.226 132.949 cv
321.195 132.918 321.169 132.89 321.149 132.865 cv
321.128 132.84 321.112 132.817 321.1 132.795 cv
321.089 132.773 321.08 132.751 321.074 132.728 cv
321.068 132.706 321.066 132.671 321.069 132.624 cv
321.073 132.578 321.086 132.505 321.11 132.407 cv
321.134 132.308 321.173 132.195 321.229 132.066 cv
321.285 131.938 321.356 131.806 321.442 131.67 cv
321.528 131.534 321.632 131.405 321.754 131.283 cv
321.949 131.088 322.147 130.945 322.348 130.854 cv
322.549 130.763 322.745 130.717 322.937 130.716 cv
323.128 130.715 323.311 130.754 323.485 130.832 cv
323.659 130.911 323.818 131.022 323.961 131.165 cv
324.089 131.293 324.206 131.433 324.31 131.583 cv
324.415 131.733 324.505 131.919 324.579 132.141 cv
324.654 132.363 324.713 132.634 324.756 132.954 cv
324.798 133.274 324.823 133.667 324.829 134.133 cv
324.858 135.435 li
326.608 133.685 li
326.624 133.668 326.645 133.657 326.67 133.651 cv
326.694 133.645 326.722 133.645 326.752 133.652 cv
326.782 133.659 326.813 133.674 326.846 133.697 cv
326.879 133.72 326.914 133.75 326.952 133.787 cv
cp
0 0 0 .690608 cmyk
f
grestore
gsave
185.528 325.431 mo
533.035 -22.0764 li
540.813 -14.2982 li
193.306 333.209 li
cp
clp
343.541 179.828 mo
343.578 179.865 343.609 179.901 343.633 179.935 cv
343.656 179.969 343.673 180.001 343.684 180.03 cv
343.694 180.059 343.696 180.085 343.69 180.11 cv
343.683 180.135 343.671 180.157 343.652 180.176 cv
341.428 182.4 li
341.399 182.429 341.37 182.451 341.341 182.466 cv
341.311 182.48 341.281 182.487 341.249 182.486 cv
341.217 182.485 341.182 182.473 341.143 182.449 cv
341.105 182.425 341.063 182.391 341.018 182.345 cv
340.977 182.304 340.942 182.266 340.914 182.232 cv
340.887 182.198 340.866 182.164 340.853 182.129 cv
340.84 182.095 340.83 182.057 340.822 182.018 cv
340.814 181.978 340.81 181.932 340.809 181.879 cv
340.786 180.248 li
340.781 179.871 340.759 179.551 340.72 179.288 cv
340.681 179.024 340.63 178.8 340.566 178.615 cv
340.503 178.429 340.43 178.276 340.347 178.156 cv
340.265 178.035 340.179 177.93 340.09 177.841 cv
340.001 177.751 339.901 177.682 339.792 177.632 cv
339.682 177.582 339.568 177.555 339.452 177.552 cv
339.335 177.548 339.216 177.571 339.095 177.622 cv
338.974 177.672 338.858 177.753 338.747 177.864 cv
338.617 177.994 338.518 178.129 338.449 178.268 cv
338.381 178.407 338.329 178.536 338.293 178.656 cv
338.256 178.775 338.229 178.879 338.212 178.967 cv
338.195 179.055 338.174 179.111 338.149 179.137 cv
338.134 179.152 338.116 179.161 338.096 179.165 cv
338.076 179.168 338.053 179.164 338.027 179.153 cv
338.001 179.142 337.97 179.123 337.935 179.096 cv
337.899 179.069 337.86 179.034 337.816 178.991 cv
337.785 178.96 337.759 178.931 337.739 178.907 cv
337.718 178.882 337.702 178.858 337.69 178.837 cv
337.679 178.815 337.67 178.793 337.664 178.77 cv
337.658 178.747 337.656 178.712 337.659 178.666 cv
337.662 178.619 337.676 178.547 337.7 178.448 cv
337.723 178.35 337.763 178.236 337.819 178.108 cv
337.875 177.979 337.946 177.847 338.032 177.712 cv
338.118 177.576 338.222 177.447 338.344 177.325 cv
338.539 177.13 338.737 176.987 338.938 176.896 cv
339.139 176.805 339.335 176.759 339.527 176.758 cv
339.718 176.757 339.901 176.795 340.075 176.874 cv
340.249 176.953 340.408 177.064 340.551 177.207 cv
340.679 177.335 340.796 177.474 340.9 177.625 cv
341.005 177.775 341.095 177.961 341.169 178.182 cv
341.244 178.404 341.303 178.675 341.345 178.995 cv
341.388 179.315 341.413 179.708 341.419 180.174 cv
341.448 181.477 li
343.197 179.727 li
343.214 179.71 343.235 179.699 343.259 179.692 cv
343.284 179.686 343.312 179.687 343.342 179.694 cv
343.372 179.701 343.403 179.716 343.436 179.739 cv
343.469 179.761 343.504 179.791 343.541 179.828 cv
cp
344.917 178.227 mo
345.064 178.375 345.138 178.497 345.138 178.595 cv
345.138 178.692 345.074 178.805 344.945 178.933 cv
344.821 179.058 344.711 179.12 344.616 179.12 cv
344.52 179.12 344.401 179.048 344.258 178.905 cv
344.11 178.757 344.037 178.635 344.036 178.538 cv
344.036 178.44 344.101 178.327 344.229 178.199 cv
344.353 178.074 344.463 178.012 344.559 178.012 cv
344.654 178.012 344.773 178.084 344.917 178.227 cv
cp
348.373 174.996 mo
348.411 175.033 348.441 175.069 348.465 175.103 cv
348.488 175.137 348.505 175.169 348.516 175.198 cv
348.526 175.227 348.528 175.253 348.522 175.278 cv
348.515 175.303 348.503 175.325 348.484 175.344 cv
346.26 177.568 li
346.231 177.597 346.202 177.619 346.172 177.634 cv
346.144 177.648 346.113 177.655 346.081 177.654 cv
346.049 177.653 346.014 177.641 345.975 177.617 cv
345.937 177.593 345.895 177.559 345.85 177.513 cv
345.809 177.472 345.774 177.434 345.746 177.4 cv
345.719 177.366 345.698 177.332 345.685 177.297 cv
345.672 177.263 345.662 177.225 345.654 177.186 cv
345.646 177.146 345.642 177.1 345.641 177.047 cv
345.618 175.416 li
345.613 175.039 345.591 174.719 345.552 174.456 cv
345.513 174.192 345.462 173.968 345.398 173.783 cv
345.335 173.597 345.262 173.444 345.179 173.324 cv
345.097 173.203 345.011 173.098 344.922 173.009 cv
344.833 172.919 344.733 172.85 344.624 172.8 cv
344.514 172.75 344.4 172.723 344.284 172.72 cv
344.167 172.716 344.048 172.739 343.927 172.79 cv
343.806 172.84 343.69 172.921 343.579 173.032 cv
343.449 173.162 343.35 173.297 343.281 173.436 cv
343.213 173.575 343.161 173.704 343.125 173.824 cv
343.088 173.943 343.061 174.047 343.044 174.135 cv
343.028 174.223 343.006 174.279 342.981 174.305 cv
342.966 174.32 342.948 174.329 342.928 174.333 cv
342.908 174.336 342.885 174.332 342.859 174.321 cv
342.833 174.31 342.802 174.291 342.767 174.264 cv
342.731 174.237 342.692 174.202 342.648 174.159 cv
342.617 174.128 342.591 174.1 342.571 174.075 cv
342.55 174.05 342.534 174.026 342.522 174.005 cv
342.511 173.983 342.502 173.961 342.496 173.938 cv
342.49 173.915 342.488 173.88 342.491 173.834 cv
342.494 173.787 342.508 173.715 342.532 173.616 cv
342.555 173.518 342.595 173.404 342.651 173.276 cv
342.707 173.147 342.778 173.015 342.864 172.88 cv
342.95 172.744 343.054 172.615 343.176 172.493 cv
343.371 172.298 343.569 172.155 343.77 172.064 cv
343.971 171.973 344.167 171.927 344.359 171.926 cv
344.55 171.924 344.733 171.963 344.907 172.042 cv
345.081 172.121 345.24 172.232 345.383 172.375 cv
345.511 172.503 345.628 172.642 345.732 172.793 cv
345.837 172.943 345.927 173.129 346.001 173.35 cv
346.076 173.572 346.135 173.843 346.177 174.163 cv
346.22 174.483 346.245 174.876 346.251 175.342 cv
346.28 176.645 li
348.029 174.895 li
348.046 174.878 348.067 174.867 348.091 174.86 cv
348.116 174.854 348.144 174.855 348.174 174.862 cv
348.204 174.869 348.235 174.884 348.268 174.907 cv
348.301 174.929 348.336 174.959 348.373 174.996 cv
cp
350.078 166.19 mo
353.778 169.889 li
353.794 169.906 353.805 169.925 353.808 169.946 cv
353.812 169.967 353.807 169.991 353.793 170.02 cv
353.779 170.049 353.758 170.082 353.73 170.12 cv
353.702 170.159 353.662 170.204 353.608 170.258 cv
353.559 170.307 353.514 170.346 353.474 170.376 cv
353.434 170.406 353.4 170.428 353.372 170.441 cv
353.345 170.454 353.32 170.458 353.299 170.455 cv
353.279 170.451 353.26 170.44 353.243 170.424 cv
349.74 166.921 li
349.733 166.927 li
351.837 171.861 li
351.845 171.882 351.849 171.903 351.848 171.925 cv
351.847 171.947 351.839 171.972 351.824 172.001 cv
351.81 172.03 351.789 172.061 351.762 172.094 cv
351.735 172.128 351.701 172.165 351.66 172.206 cv
351.616 172.25 351.577 172.285 351.542 172.312 cv
351.506 172.339 351.475 172.359 351.447 172.372 cv
351.419 172.386 351.394 172.393 351.372 172.394 cv
351.35 172.395 351.331 172.392 351.315 172.383 cv
346.44 170.22 li
346.437 170.223 li
349.94 173.727 li
349.957 173.743 349.967 173.762 349.971 173.783 cv
349.975 173.804 349.97 173.829 349.956 173.858 cv
349.942 173.886 349.92 173.92 349.891 173.959 cv
349.862 173.999 349.821 174.045 349.768 174.098 cv
349.716 174.15 349.671 174.19 349.632 174.219 cv
349.592 174.248 349.559 174.269 349.531 174.282 cv
349.504 174.295 349.48 174.299 349.46 174.294 cv
349.44 174.289 349.422 174.278 349.406 174.261 cv
345.706 170.562 li
345.619 170.475 345.58 170.39 345.589 170.306 cv
345.598 170.223 345.631 170.152 345.688 170.096 cv
346.016 169.767 li
346.083 169.7 346.149 169.647 346.211 169.609 cv
346.274 169.571 346.338 169.547 346.403 169.536 cv
346.468 169.525 346.534 169.528 346.6 169.544 cv
346.667 169.56 346.738 169.587 346.813 169.624 cv
350.876 171.385 li
350.892 171.37 li
349.184 167.272 li
349.144 167.186 349.117 167.108 349.101 167.037 cv
349.085 166.966 349.08 166.902 349.087 166.843 cv
349.093 166.785 349.111 166.73 349.14 166.678 cv
349.168 166.627 349.209 166.575 349.261 166.522 cv
349.605 166.178 li
349.637 166.147 349.672 166.121 349.71 166.102 cv
349.747 166.083 349.786 166.073 349.826 166.073 cv
349.865 166.073 349.906 166.081 349.949 166.099 cv
349.992 166.116 350.035 166.147 350.078 166.19 cv
cp
355.962 165.608 mo
356.15 165.796 356.283 165.999 356.361 166.215 cv
356.438 166.432 356.466 166.653 356.446 166.879 cv
356.425 167.104 356.357 167.327 356.242 167.545 cv
356.126 167.764 355.972 167.97 355.78 168.163 cv
355.645 168.297 355.509 168.411 355.371 168.503 cv
355.233 168.595 355.102 168.67 354.978 168.727 cv
354.855 168.783 354.745 168.825 354.648 168.85 cv
354.551 168.876 354.479 168.888 354.43 168.887 cv
354.381 168.886 354.332 168.872 354.282 168.845 cv
354.233 168.819 354.176 168.773 354.112 168.709 cv
354.067 168.664 354.031 168.624 354.005 168.59 cv
353.98 168.556 353.962 168.526 353.951 168.499 cv
353.941 168.472 353.939 168.449 353.944 168.429 cv
353.949 168.409 353.96 168.391 353.977 168.375 cv
354.006 168.346 354.064 168.322 354.152 168.305 cv
354.24 168.287 354.346 168.257 354.47 168.215 cv
354.594 168.174 354.733 168.112 354.886 168.031 cv
355.039 167.95 355.193 167.833 355.346 167.68 cv
355.462 167.564 355.553 167.442 355.618 167.314 cv
355.684 167.187 355.723 167.06 355.736 166.934 cv
355.748 166.808 355.732 166.685 355.687 166.565 cv
355.641 166.445 355.566 166.332 355.461 166.227 cv
355.347 166.113 355.224 166.042 355.091 166.013 cv
354.959 165.984 354.819 165.981 354.673 166.005 cv
354.527 166.029 354.375 166.07 354.215 166.128 cv
354.056 166.185 353.893 166.245 353.726 166.306 cv
353.56 166.367 353.39 166.419 353.218 166.463 cv
353.047 166.507 352.875 166.527 352.703 166.525 cv
352.531 166.523 352.36 166.49 352.191 166.426 cv
352.021 166.362 351.854 166.248 351.69 166.084 cv
351.523 165.917 351.404 165.736 351.333 165.544 cv
351.263 165.351 351.237 165.156 351.257 164.959 cv
351.277 164.761 351.338 164.564 351.442 164.367 cv
351.545 164.171 351.684 163.985 351.858 163.812 cv
351.947 163.723 352.044 163.641 352.149 163.566 cv
352.255 163.492 352.36 163.428 352.466 163.374 cv
352.572 163.32 352.672 163.279 352.766 163.249 cv
352.86 163.219 352.927 163.204 352.966 163.204 cv
353.005 163.204 353.034 163.207 353.052 163.212 cv
353.069 163.217 353.089 163.226 353.111 163.24 cv
353.133 163.253 353.157 163.272 353.184 163.294 cv
353.211 163.317 353.244 163.349 353.284 163.388 cv
353.321 163.425 353.353 163.46 353.379 163.492 cv
353.405 163.525 353.424 163.554 353.438 163.58 cv
353.452 163.606 353.457 163.629 353.455 163.65 cv
353.453 163.67 353.445 163.688 353.43 163.703 cv
353.408 163.725 353.357 163.747 353.28 163.766 cv
353.202 163.786 353.109 163.813 353.003 163.847 cv
352.896 163.881 352.779 163.931 352.653 163.997 cv
352.526 164.064 352.403 164.157 352.283 164.277 cv
352.171 164.389 352.089 164.501 352.036 164.614 cv
351.983 164.727 351.954 164.835 351.95 164.939 cv
351.946 165.042 351.964 165.141 352.005 165.236 cv
352.047 165.331 352.105 165.417 352.182 165.493 cv
352.293 165.605 352.416 165.676 352.548 165.704 cv
352.681 165.733 352.821 165.736 352.97 165.712 cv
353.118 165.688 353.273 165.647 353.434 165.589 cv
353.596 165.53 353.76 165.471 353.927 165.409 cv
354.094 165.348 354.264 165.294 354.437 165.247 cv
354.61 165.2 354.783 165.177 354.955 165.177 cv
355.127 165.177 355.298 165.208 355.468 165.273 cv
355.638 165.337 355.802 165.448 355.962 165.608 cv
cp
359.964 163.406 mo
360.001 163.443 360.032 163.478 360.055 163.513 cv
360.079 163.547 360.096 163.578 360.106 163.607 cv
360.116 163.636 360.118 163.663 360.112 163.688 cv
360.106 163.712 360.094 163.734 360.075 163.753 cv
357.85 165.978 li
357.821 166.007 357.792 166.028 357.763 166.043 cv
357.734 166.057 357.704 166.064 357.672 166.063 cv
357.639 166.062 357.604 166.05 357.566 166.026 cv
357.528 166.003 357.486 165.968 357.441 165.922 cv
357.399 165.881 357.365 165.844 357.337 165.809 cv
357.309 165.775 357.289 165.741 357.276 165.706 cv
357.263 165.672 357.252 165.635 357.245 165.595 cv
357.237 165.555 357.232 165.509 357.231 165.457 cv
357.209 163.825 li
357.204 163.449 357.182 163.129 357.143 162.865 cv
357.103 162.602 357.052 162.377 356.989 162.192 cv
356.925 162.007 356.852 161.854 356.77 161.733 cv
356.688 161.612 356.602 161.507 356.513 161.418 cv
356.423 161.329 356.324 161.259 356.214 161.209 cv
356.104 161.159 355.991 161.133 355.874 161.129 cv
355.757 161.125 355.639 161.149 355.518 161.199 cv
355.397 161.249 355.281 161.33 355.17 161.441 cv
355.04 161.571 354.94 161.706 354.872 161.845 cv
354.804 161.984 354.751 162.114 354.715 162.233 cv
354.679 162.353 354.652 162.457 354.635 162.544 cv
354.618 162.632 354.597 162.689 354.571 162.714 cv
354.556 162.729 354.539 162.739 354.519 162.742 cv
354.499 162.746 354.476 162.742 354.449 162.73 cv
354.423 162.719 354.392 162.7 354.357 162.673 cv
354.322 162.647 354.282 162.612 354.239 162.568 cv
354.208 162.537 354.182 162.509 354.161 162.484 cv
354.141 162.459 354.124 162.436 354.113 162.414 cv
354.102 162.392 354.093 162.37 354.086 162.347 cv
354.08 162.324 354.079 162.29 354.082 162.243 cv
354.085 162.197 354.098 162.124 354.122 162.026 cv
354.146 161.927 354.186 161.814 354.242 161.685 cv
354.298 161.557 354.369 161.425 354.455 161.289 cv
354.541 161.153 354.645 161.024 354.767 160.902 cv
354.962 160.707 355.16 160.565 355.361 160.473 cv
355.561 160.382 355.758 160.336 355.949 160.335 cv
356.141 160.334 356.324 160.373 356.498 160.451 cv
356.672 160.53 356.83 160.641 356.973 160.784 cv
357.102 160.912 357.218 161.052 357.323 161.202 cv
357.428 161.352 357.517 161.538 357.592 161.76 cv
357.667 161.982 357.725 162.253 357.768 162.573 cv
357.811 162.893 357.835 163.286 357.842 163.752 cv
357.87 165.054 li
359.62 163.304 li
359.637 163.288 359.657 163.276 359.682 163.27 cv
359.707 163.263 359.734 163.264 359.764 163.271 cv
359.794 163.278 359.826 163.293 359.859 163.316 cv
359.892 163.339 359.927 163.369 359.964 163.406 cv
cp
360.709 159.978 mo
360.79 160.059 360.837 160.124 360.849 160.174 cv
360.862 160.224 360.85 160.266 360.815 160.302 cv
359.515 161.602 li
359.478 161.639 359.434 161.651 359.383 161.638 cv
359.332 161.624 359.267 161.578 359.188 161.499 cv
359.109 161.42 359.064 161.356 359.051 161.306 cv
359.039 161.256 359.051 161.213 359.089 161.176 cv
360.389 159.875 li
360.405 159.859 360.423 159.847 360.443 159.84 cv
360.463 159.832 360.486 159.833 360.513 159.841 cv
360.54 159.849 360.57 159.865 360.602 159.886 cv
360.634 159.908 360.67 159.939 360.709 159.978 cv
cp
365.138 158.232 mo
365.175 158.269 365.205 158.305 365.229 158.339 cv
365.253 158.373 365.27 158.404 365.28 158.433 cv
365.29 158.462 365.292 158.489 365.286 158.514 cv
365.28 158.539 365.267 158.56 365.249 158.579 cv
363.024 160.804 li
362.995 160.833 362.966 160.854 362.937 160.869 cv
362.908 160.884 362.877 160.89 362.845 160.889 cv
362.813 160.888 362.778 160.876 362.74 160.852 cv
362.702 160.829 362.66 160.794 362.615 160.749 cv
362.573 160.707 362.539 160.67 362.511 160.635 cv
362.483 160.601 362.463 160.567 362.45 160.533 cv
362.437 160.498 362.426 160.461 362.418 160.421 cv
362.411 160.382 362.406 160.335 362.405 160.283 cv
362.383 158.652 li
362.378 158.275 362.356 157.955 362.317 157.691 cv
362.277 157.428 362.226 157.203 362.163 157.018 cv
362.099 156.833 362.026 156.68 361.944 156.559 cv
361.862 156.438 361.776 156.333 361.686 156.244 cv
361.597 156.155 361.498 156.085 361.388 156.035 cv
361.278 155.986 361.165 155.959 361.048 155.955 cv
360.931 155.952 360.812 155.975 360.692 156.025 cv
360.571 156.075 360.455 156.156 360.344 156.267 cv
360.213 156.398 360.114 156.532 360.046 156.671 cv
359.978 156.81 359.925 156.94 359.889 157.059 cv
359.853 157.179 359.826 157.283 359.809 157.37 cv
359.792 157.458 359.771 157.515 359.745 157.541 cv
359.73 157.556 359.712 157.565 359.693 157.568 cv
359.672 157.572 359.649 157.568 359.623 157.557 cv
359.597 157.546 359.566 157.526 359.531 157.5 cv
359.496 157.473 359.456 157.438 359.413 157.394 cv
359.382 157.363 359.356 157.335 359.335 157.31 cv
359.314 157.285 359.298 157.262 359.287 157.24 cv
359.275 157.219 359.267 157.196 359.26 157.173 cv
359.254 157.151 359.253 157.116 359.256 157.069 cv
359.259 157.023 359.272 156.95 359.296 156.852 cv
359.32 156.753 359.36 156.64 359.416 156.511 cv
359.472 156.383 359.543 156.251 359.629 156.115 cv
359.714 155.979 359.819 155.851 359.941 155.728 cv
360.136 155.534 360.333 155.391 360.534 155.299 cv
360.735 155.208 360.931 155.162 361.123 155.161 cv
361.315 155.16 361.497 155.199 361.672 155.278 cv
361.846 155.356 362.004 155.467 362.147 155.61 cv
362.276 155.739 362.392 155.878 362.497 156.028 cv
362.601 156.178 362.691 156.364 362.766 156.586 cv
362.841 156.808 362.899 157.079 362.942 157.399 cv
362.984 157.719 363.009 158.112 363.016 158.578 cv
363.044 159.88 li
364.794 158.13 li
364.81 158.114 364.831 158.102 364.856 158.096 cv
364.881 158.09 364.908 158.09 364.938 158.097 cv
364.968 158.104 365 158.119 365.033 158.142 cv
365.066 158.165 365.101 158.195 365.138 158.232 cv
cp
366.513 156.631 mo
366.66 156.778 366.734 156.901 366.734 156.998 cv
366.734 157.096 366.67 157.209 366.542 157.337 cv
366.417 157.461 366.307 157.523 366.212 157.523 cv
366.117 157.523 365.997 157.452 365.854 157.308 cv
365.707 157.161 365.633 157.039 365.633 156.941 cv
365.633 156.844 365.697 156.731 365.825 156.602 cv
365.95 156.478 366.06 156.416 366.155 156.416 cv
366.25 156.416 366.37 156.488 366.513 156.631 cv
cp
369.97 153.4 mo
370.007 153.437 370.037 153.473 370.061 153.507 cv
370.085 153.541 370.102 153.572 370.112 153.601 cv
370.122 153.63 370.124 153.657 370.118 153.682 cv
370.112 153.707 370.099 153.728 370.081 153.747 cv
367.856 155.972 li
367.827 156.001 367.798 156.022 367.769 156.037 cv
367.74 156.052 367.71 156.058 367.677 156.057 cv
367.645 156.056 367.61 156.044 367.572 156.02 cv
367.534 155.997 367.492 155.962 367.447 155.917 cv
367.405 155.875 367.371 155.838 367.343 155.803 cv
367.315 155.769 367.295 155.735 367.282 155.701 cv
367.269 155.666 367.258 155.629 367.25 155.589 cv
367.243 155.55 367.238 155.503 367.237 155.451 cv
367.215 153.82 li
367.21 153.443 367.188 153.123 367.149 152.859 cv
367.109 152.596 367.058 152.371 366.995 152.186 cv
366.931 152.001 366.858 151.848 366.776 151.727 cv
366.694 151.606 366.608 151.501 366.518 151.412 cv
366.429 151.323 366.33 151.253 366.22 151.203 cv
366.11 151.154 365.997 151.127 365.88 151.123 cv
365.763 151.12 365.644 151.143 365.524 151.193 cv
365.403 151.243 365.287 151.324 365.176 151.435 cv
365.045 151.566 364.946 151.7 364.878 151.839 cv
364.81 151.978 364.757 152.108 364.721 152.227 cv
364.685 152.347 364.658 152.451 364.641 152.538 cv
364.624 152.626 364.603 152.683 364.577 152.709 cv
364.562 152.724 364.545 152.733 364.525 152.736 cv
364.504 152.74 364.481 152.736 364.455 152.725 cv
364.429 152.714 364.398 152.694 364.363 152.668 cv
364.328 152.641 364.288 152.606 364.245 152.562 cv
364.214 152.531 364.188 152.503 364.167 152.478 cv
364.146 152.453 364.13 152.43 364.119 152.408 cv
364.107 152.387 364.099 152.364 364.092 152.341 cv
364.086 152.319 364.085 152.284 364.088 152.237 cv
364.091 152.191 364.104 152.118 364.128 152.02 cv
364.152 151.921 364.192 151.808 364.248 151.679 cv
364.304 151.551 364.375 151.419 364.461 151.283 cv
364.547 151.148 364.651 151.019 364.773 150.896 cv
364.968 150.702 365.165 150.559 365.366 150.467 cv
365.567 150.376 365.763 150.33 365.955 150.329 cv
366.147 150.328 366.329 150.367 366.504 150.446 cv
366.677 150.524 366.836 150.635 366.979 150.778 cv
367.108 150.906 367.224 151.046 367.329 151.196 cv
367.433 151.346 367.523 151.532 367.598 151.754 cv
367.672 151.976 367.731 152.247 367.774 152.567 cv
367.816 152.887 367.841 153.28 367.848 153.746 cv
367.876 155.048 li
369.626 153.298 li
369.642 153.282 369.663 153.27 369.688 153.264 cv
369.713 153.258 369.74 153.258 369.77 153.265 cv
369.8 153.272 369.832 153.287 369.865 153.31 cv
369.898 153.333 369.933 153.363 369.97 153.4 cv
cp
371.675 144.594 mo
375.374 148.293 li
375.391 148.31 375.401 148.328 375.405 148.349 cv
375.409 148.37 375.404 148.395 375.39 148.424 cv
375.375 148.452 375.354 148.486 375.327 148.524 cv
375.299 148.562 375.258 148.608 375.205 148.661 cv
375.155 148.71 375.111 148.75 375.07 148.78 cv
375.03 148.81 374.996 148.832 374.969 148.845 cv
374.941 148.858 374.917 148.862 374.896 148.858 cv
374.875 148.854 374.856 148.844 374.84 148.828 cv
371.336 145.324 li
371.33 145.33 li
373.433 150.265 li
373.441 150.285 373.445 150.307 373.444 150.328 cv
373.443 150.35 373.435 150.376 373.421 150.405 cv
373.406 150.434 373.386 150.465 373.359 150.498 cv
373.332 150.531 373.298 150.568 373.256 150.61 cv
373.213 150.653 373.173 150.689 373.138 150.716 cv
373.103 150.742 373.071 150.763 373.043 150.776 cv
373.015 150.789 372.99 150.797 372.969 150.798 cv
372.947 150.799 372.928 150.795 372.911 150.787 cv
368.036 148.624 li
368.033 148.627 li
371.537 152.13 li
371.553 152.147 371.564 152.166 371.567 152.187 cv
371.571 152.208 371.566 152.233 371.552 152.261 cv
371.538 152.29 371.517 152.324 371.487 152.363 cv
371.459 152.402 371.417 152.448 371.364 152.502 cv
371.313 152.553 371.267 152.593 371.228 152.622 cv
371.189 152.651 371.155 152.672 371.128 152.685 cv
371.1 152.698 371.077 152.702 371.057 152.697 cv
371.037 152.692 371.019 152.681 371.002 152.665 cv
367.303 148.966 li
367.216 148.879 367.177 148.793 367.186 148.71 cv
367.195 148.626 367.228 148.556 367.284 148.499 cv
367.613 148.171 li
367.68 148.104 367.745 148.051 367.808 148.013 cv
367.871 147.975 367.935 147.95 368 147.94 cv
368.065 147.929 368.13 147.931 368.197 147.947 cv
368.263 147.964 368.334 147.99 368.409 148.027 cv
372.473 149.789 li
372.488 149.773 li
370.78 145.675 li
370.741 145.59 370.713 145.512 370.697 145.441 cv
370.681 145.37 370.676 145.305 370.683 145.247 cv
370.69 145.188 370.707 145.133 370.736 145.082 cv
370.765 145.03 370.805 144.978 370.858 144.926 cv
371.202 144.582 li
371.233 144.55 371.268 144.525 371.306 144.506 cv
371.344 144.487 371.382 144.477 371.422 144.477 cv
371.462 144.476 371.503 144.485 371.546 144.502 cv
371.588 144.52 371.631 144.55 371.675 144.594 cv
cp
377.558 144.011 mo
377.747 144.2 377.88 144.402 377.957 144.619 cv
378.035 144.835 378.063 145.056 378.042 145.282 cv
378.021 145.508 377.953 145.73 377.838 145.949 cv
377.723 146.168 377.569 146.373 377.376 146.566 cv
377.241 146.701 377.105 146.815 376.967 146.907 cv
376.829 146.999 376.698 147.073 376.575 147.13 cv
376.451 147.187 376.341 147.228 376.245 147.254 cv
376.148 147.28 376.075 147.292 376.026 147.291 cv
375.978 147.29 375.928 147.276 375.879 147.249 cv
375.829 147.222 375.772 147.177 375.708 147.113 cv
375.663 147.068 375.628 147.028 375.602 146.994 cv
375.576 146.96 375.558 146.929 375.548 146.902 cv
375.538 146.876 375.535 146.852 375.54 146.833 cv
375.546 146.813 375.556 146.795 375.573 146.778 cv
375.602 146.749 375.66 146.726 375.748 146.708 cv
375.836 146.69 375.942 146.661 376.066 146.619 cv
376.191 146.577 376.329 146.516 376.483 146.435 cv
376.636 146.354 376.789 146.237 376.943 146.083 cv
377.059 145.967 377.15 145.845 377.215 145.718 cv
377.28 145.591 377.319 145.464 377.332 145.338 cv
377.345 145.211 377.328 145.088 377.283 144.968 cv
377.238 144.849 377.163 144.736 377.057 144.63 cv
376.943 144.517 376.82 144.445 376.688 144.416 cv
376.555 144.387 376.416 144.385 376.27 144.409 cv
376.124 144.432 375.971 144.473 375.812 144.531 cv
375.652 144.589 375.489 144.649 375.323 144.71 cv
375.156 144.771 374.987 144.823 374.815 144.866 cv
374.643 144.91 374.471 144.931 374.299 144.929 cv
374.128 144.927 373.957 144.893 373.787 144.829 cv
373.617 144.765 373.451 144.651 373.287 144.488 cv
373.119 144.32 373 144.14 372.93 143.947 cv
372.859 143.755 372.834 143.56 372.853 143.362 cv
372.873 143.164 372.935 142.967 373.038 142.771 cv
373.142 142.574 373.28 142.389 373.454 142.215 cv
373.543 142.126 373.64 142.044 373.746 141.97 cv
373.851 141.896 373.957 141.832 374.063 141.778 cv
374.168 141.724 374.268 141.682 374.362 141.652 cv
374.457 141.622 374.523 141.608 374.563 141.608 cv
374.602 141.608 374.63 141.61 374.648 141.615 cv
374.666 141.621 374.685 141.63 374.707 141.643 cv
374.729 141.657 374.753 141.675 374.78 141.698 cv
374.807 141.721 374.841 141.752 374.88 141.792 cv
374.918 141.829 374.949 141.864 374.975 141.896 cv
375.001 141.928 375.021 141.957 375.034 141.983 cv
375.048 142.009 375.054 142.032 375.052 142.053 cv
375.05 142.074 375.041 142.092 375.027 142.106 cv
375.004 142.129 374.954 142.15 374.876 142.17 cv
374.798 142.189 374.706 142.216 374.599 142.25 cv
374.492 142.284 374.376 142.335 374.249 142.401 cv
374.123 142.467 374 142.56 373.879 142.681 cv
373.768 142.793 373.685 142.905 373.632 143.018 cv
373.579 143.13 373.551 143.239 373.546 143.342 cv
373.542 143.445 373.561 143.545 373.602 143.64 cv
373.643 143.735 373.702 143.821 373.778 143.897 cv
373.89 144.009 374.012 144.079 374.145 144.108 cv
374.277 144.137 374.418 144.139 374.566 144.115 cv
374.714 144.091 374.869 144.05 375.031 143.992 cv
375.193 143.934 375.357 143.874 375.524 143.813 cv
375.691 143.752 375.861 143.698 376.034 143.651 cv
376.207 143.604 376.379 143.58 376.551 143.58 cv
376.723 143.58 376.894 143.612 377.064 143.676 cv
377.234 143.74 377.399 143.852 377.558 144.011 cv
cp
381.56 141.809 mo
381.598 141.846 381.628 141.882 381.652 141.916 cv
381.676 141.95 381.693 141.982 381.703 142.011 cv
381.713 142.039 381.715 142.066 381.709 142.091 cv
381.702 142.116 381.69 142.138 381.671 142.156 cv
379.447 144.381 li
379.418 144.41 379.389 144.432 379.36 144.446 cv
379.331 144.461 379.3 144.468 379.268 144.467 cv
379.236 144.466 379.201 144.453 379.163 144.43 cv
379.124 144.406 379.082 144.371 379.037 144.326 cv
378.996 144.285 378.961 144.247 378.934 144.213 cv
378.906 144.179 378.885 144.144 378.872 144.11 cv
378.859 144.076 378.849 144.038 378.841 143.999 cv
378.833 143.959 378.829 143.913 378.828 143.86 cv
378.805 142.229 li
378.8 141.852 378.778 141.532 378.739 141.269 cv
378.7 141.005 378.649 140.781 378.585 140.596 cv
378.522 140.41 378.449 140.257 378.366 140.137 cv
378.284 140.016 378.198 139.911 378.109 139.822 cv
378.02 139.732 377.92 139.663 377.811 139.613 cv
377.701 139.563 377.587 139.536 377.471 139.533 cv
377.354 139.529 377.235 139.552 377.114 139.603 cv
376.993 139.653 376.878 139.733 376.766 139.845 cv
376.636 139.975 376.537 140.11 376.469 140.249 cv
376.4 140.388 376.348 140.517 376.312 140.637 cv
376.275 140.756 376.249 140.86 376.232 140.948 cv
376.215 141.036 376.193 141.092 376.168 141.118 cv
376.153 141.133 376.135 141.142 376.115 141.146 cv
376.095 141.149 376.072 141.145 376.046 141.134 cv
376.02 141.123 375.989 141.104 375.954 141.077 cv
375.918 141.05 375.879 141.015 375.835 140.972 cv
375.804 140.94 375.778 140.913 375.758 140.888 cv
375.737 140.863 375.721 140.839 375.709 140.818 cv
375.698 140.796 375.689 140.774 375.683 140.751 cv
375.677 140.728 375.675 140.693 375.678 140.647 cv
375.681 140.6 375.695 140.528 375.719 140.429 cv
375.742 140.331 375.782 140.217 375.838 140.089 cv
375.894 139.96 375.965 139.828 376.051 139.693 cv
376.137 139.557 376.241 139.428 376.363 139.306 cv
376.558 139.111 376.756 138.968 376.957 138.877 cv
377.158 138.786 377.354 138.74 377.546 138.738 cv
377.737 138.737 377.92 138.776 378.094 138.855 cv
378.268 138.934 378.427 139.044 378.569 139.187 cv
378.698 139.316 378.815 139.455 378.919 139.605 cv
379.024 139.756 379.114 139.942 379.188 140.164 cv
379.263 140.385 379.322 140.656 379.365 140.976 cv
379.407 141.296 379.432 141.689 379.438 142.155 cv
379.467 143.457 li
381.216 141.708 li
381.233 141.691 381.254 141.68 381.279 141.673 cv
381.303 141.667 381.331 141.668 381.361 141.675 cv
381.391 141.682 381.422 141.697 381.455 141.72 cv
381.488 141.742 381.523 141.772 381.56 141.809 cv
cp
382.306 138.382 mo
382.387 138.463 382.433 138.528 382.446 138.578 cv
382.458 138.628 382.447 138.67 382.411 138.705 cv
381.111 140.005 li
381.074 140.043 381.03 140.055 380.979 140.041 cv
380.928 140.028 380.863 139.981 380.784 139.903 cv
380.706 139.824 380.66 139.759 380.648 139.71 cv
380.635 139.66 380.648 139.616 380.685 139.579 cv
381.985 138.279 li
382.002 138.262 382.02 138.25 382.039 138.243 cv
382.059 138.236 382.083 138.236 382.109 138.245 cv
382.137 138.253 382.166 138.268 382.198 138.29 cv
382.23 138.312 382.266 138.342 382.306 138.382 cv
cp
385.07 134.717 mo
385.379 135.025 385.636 135.331 385.842 135.635 cv
386.048 135.938 386.186 136.238 386.256 136.534 cv
386.327 136.83 386.321 137.119 386.239 137.402 cv
386.157 137.685 385.983 137.96 385.715 138.227 cv
385.463 138.48 385.205 138.647 384.942 138.73 cv
384.679 138.813 384.407 138.82 384.126 138.751 cv
383.846 138.681 383.555 138.541 383.255 138.33 cv
382.955 138.119 382.639 137.848 382.308 137.517 cv
382.001 137.21 381.745 136.904 381.539 136.599 cv
381.333 136.293 381.195 135.993 381.123 135.698 cv
381.052 135.403 381.057 135.114 381.139 134.831 cv
381.221 134.549 381.395 134.275 381.66 134.009 cv
381.914 133.755 382.173 133.586 382.436 133.503 cv
382.699 133.42 382.971 133.413 383.252 133.483 cv
383.532 133.552 383.823 133.692 384.123 133.903 cv
384.423 134.114 384.739 134.385 385.07 134.717 cv
cp
384.56 135.301 mo
384.36 135.101 384.172 134.928 383.999 134.783 cv
383.825 134.638 383.663 134.519 383.513 134.425 cv
383.363 134.331 383.221 134.262 383.089 134.219 cv
382.957 134.175 382.831 134.156 382.712 134.161 cv
382.593 134.167 382.481 134.196 382.375 134.25 cv
382.27 134.304 382.167 134.38 382.068 134.48 cv
381.892 134.656 381.79 134.84 381.763 135.033 cv
381.736 135.225 381.763 135.425 381.845 135.633 cv
381.927 135.841 382.054 136.054 382.225 136.271 cv
382.397 136.488 382.595 136.708 382.818 136.932 cv
383.118 137.232 383.388 137.471 383.629 137.65 cv
383.871 137.829 384.091 137.951 384.29 138.016 cv
384.49 138.082 384.672 138.092 384.837 138.047 cv
385.001 138.003 385.158 137.906 385.307 137.757 cv
385.423 137.641 385.507 137.52 385.557 137.395 cv
385.608 137.27 385.631 137.141 385.624 137.008 cv
385.618 136.876 385.587 136.74 385.531 136.602 cv
385.476 136.463 385.401 136.322 385.308 136.18 cv
385.215 136.037 385.104 135.892 384.976 135.745 cv
384.848 135.598 384.709 135.45 384.56 135.301 cv
cp
388.98 132.24 mo
389.156 132.416 389.3 132.613 389.411 132.832 cv
389.522 133.05 389.584 133.278 389.597 133.515 cv
389.611 133.753 389.569 133.995 389.473 134.242 cv
389.377 134.49 389.212 134.731 388.978 134.965 cv
388.81 135.133 388.641 135.26 388.471 135.347 cv
388.301 135.434 388.13 135.487 387.958 135.505 cv
387.786 135.524 387.613 135.509 387.438 135.46 cv
387.263 135.411 387.085 135.335 386.903 135.23 cv
386.722 135.125 386.538 134.997 386.352 134.843 cv
386.165 134.69 385.975 134.516 385.78 134.321 cv
385.608 134.149 385.443 133.966 385.286 133.771 cv
385.128 133.576 384.991 133.373 384.875 133.162 cv
384.759 132.951 384.67 132.732 384.608 132.506 cv
384.546 132.28 384.523 132.052 384.54 131.822 cv
384.557 131.592 384.62 131.36 384.73 131.126 cv
384.84 130.892 385.009 130.66 385.237 130.432 cv
385.313 130.356 385.396 130.283 385.484 130.213 cv
385.572 130.144 385.657 130.084 385.739 130.033 cv
385.821 129.982 385.894 129.944 385.958 129.917 cv
386.022 129.89 386.068 129.875 386.093 129.871 cv
386.119 129.868 386.143 129.87 386.163 129.876 cv
386.184 129.882 386.204 129.891 386.224 129.903 cv
386.244 129.914 386.264 129.929 386.286 129.946 cv
386.308 129.964 386.333 129.987 386.362 130.016 cv
386.4 130.054 386.431 130.086 386.457 130.114 cv
386.483 130.142 386.501 130.168 386.51 130.192 cv
386.52 130.216 386.523 130.237 386.52 130.257 cv
386.516 130.277 386.505 130.296 386.487 130.315 cv
386.464 130.337 386.426 130.361 386.372 130.386 cv
386.318 130.411 386.254 130.443 386.181 130.481 cv
386.107 130.52 386.023 130.571 385.929 130.637 cv
385.835 130.702 385.735 130.787 385.629 130.893 cv
385.436 131.086 385.31 131.291 385.25 131.509 cv
385.189 131.726 385.181 131.945 385.226 132.166 cv
385.27 132.387 385.359 132.606 385.491 132.823 cv
385.624 133.041 385.782 133.248 385.967 133.445 cv
385.99 133.36 386.019 133.268 386.055 133.17 cv
386.091 133.071 386.137 132.97 386.192 132.865 cv
386.247 132.761 386.311 132.656 386.384 132.552 cv
386.458 132.447 386.546 132.344 386.647 132.242 cv
386.865 132.025 387.077 131.871 387.285 131.781 cv
387.493 131.691 387.696 131.652 387.893 131.665 cv
388.09 131.677 388.279 131.735 388.46 131.837 cv
388.641 131.94 388.815 132.074 388.98 132.24 cv
cp
388.487 132.828 mo
388.367 132.708 388.246 132.611 388.124 132.536 cv
388.001 132.461 387.878 132.418 387.754 132.405 cv
387.629 132.393 387.502 132.414 387.371 132.47 cv
387.241 132.526 387.107 132.622 386.97 132.759 cv
386.894 132.836 386.824 132.919 386.761 133.009 cv
386.698 133.099 386.642 133.192 386.595 133.287 cv
386.547 133.382 386.507 133.479 386.474 133.576 cv
386.441 133.673 386.416 133.768 386.399 133.859 cv
386.667 134.126 386.908 134.333 387.123 134.479 cv
387.337 134.626 387.532 134.721 387.706 134.764 cv
387.88 134.808 388.039 134.805 388.183 134.754 cv
388.327 134.703 388.464 134.613 388.595 134.482 cv
388.727 134.35 388.817 134.21 388.865 134.063 cv
388.912 133.916 388.926 133.768 388.906 133.62 cv
388.886 133.472 388.839 133.33 388.764 133.195 cv
388.69 133.061 388.597 132.938 388.487 132.828 cv
cp
0 0 0 .690608 cmyk
f
grestore
%ADOBeginSubsetFont: IKBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IKBBAA+Calibri gcheck setglobal} if
1 606 3 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>IKBBAA+Calibri AddT42Char 
1 3728 14 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>IKBBAA+Calibri AddT42Char 
IKBBAA+Calibri /CharStrings get begin
/g3 3 def
/g14 14 def
end
IKBBAA+Calibri /Encoding get
dup 66 /g3 put
dup 67 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/USTWFV+Calibri*1 [33{/.notdef}rp /g37 /g1 /g39 /g41 /g43 /g45 /g38 /g33 /g40 /g34 /g7 /g31 /g22 /g13 /g16 /g26 /g24 /g17 /g8 /g12 /g28 /g19 /g27 /g11 /g20 /g23 /g4 /g2 /g9 /g18 /g25 /g29 /g42 /g3 /g14 188{/.notdef}rp]USTWFV+Calibri nfUSTWFV+Calibri*1 [0 -10 -10 0 0 0 ]msf257.2 137.607 mo(+,-./0"12"34567")[-6.45496 -5.25394 -7.98795 -5.25394 -4.97601 -3.48599 -2.26098 -5.27293 -3.05193 -2.26099 -5.16598 -4.79004 -3.35007 -5.25394 -3.91106 0 ]yshUSTWFV+Calibri*1 [10 0 0 -10 0 0 ]msf332.006 197.707 mo(8/0791:"3490")[5.67401 4.97601 3.48599 3.91107 2.29504 5.27292 5.25394 2.26099 5.16599 4.79004 2.29504 3.48599 0 ]xshUSTWFV+Calibri*1 [14 0 0 -14 0 0 ]msf294.849 48.5768 mo(17B1--/0C/")[7.38208 5.4783 7.46625 7.38211 11.1761 11.1761 6.96222 4.87619 5.92624 6.96222 0 ]xsh282.456 221.171 mo
287.397 221.171 li
287.397 226.112 li
282.456 226.112 li
cp
.630945 .325231 .0310369 0 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf289.368 227.152 mo(?45)sh301.422 227.152 mo(6*/:@0/")[4.72855 2.7558 4.47842 4.72852 5.01398 3.13739 4.47842 0 ]xsh340.402 221.171 mo
345.343 221.171 li
345.343 226.112 li
340.402 226.112 li
cp
.158206 .719326 .596887 .0181277 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf347.314 227.152 mo(?45)sh359.369 227.152 mo(6*?405/")[4.72855 2.7558 4.72855 4.31104 3.13739 3.01508 4.47839 0 ]xsh.75 lw
232.7 25.077 mo
432.308 25.077 li
432.308 241.077 li
232.7 241.077 li
cp
0 0 0 .130129 cmyk
@
458.461 25.0769 mo
706.154 25.0769 li
706.154 241.077 li
458.461 241.077 li
cp
0 0 0 0 cmyk
ef
.75 lw
519.661 150.75 mo
693.116 150.75 li
519.661 133.731 mo
693.116 133.731 li
519.661 116.713 mo
693.116 116.713 li
519.661 99.6951 mo
693.116 99.6951 li
519.661 83.0042 mo
693.116 83.0042 li
519.661 65.986 mo
693.116 65.986 li
0 0 0 .130129 cmyk
@
534.062 91.8405 mo
546.825 91.8405 li
546.825 167.697 li
534.062 167.697 li
cp
591.662 74.1678 mo
604.753 74.1678 li
604.753 167.697 li
591.662 167.697 li
cp
649.589 72.2041 mo
662.352 72.2041 li
662.352 167.697 li
649.589 167.697 li
cp
.630945 .325231 .0310369 0 cmyk
f
550.425 93.1496 mo
563.516 93.1496 li
563.516 167.697 li
550.425 167.697 li
cp
608.352 77.4405 mo
621.116 77.4405 li
621.116 167.697 li
608.352 167.697 li
cp
665.953 96.4223 mo
679.043 96.4223 li
679.043 167.697 li
665.953 167.697 li
cp
.158206 .719326 .596887 .0181277 cmyk
f
519.806 167.697 mo
693.154 167.697 li
0 0 0 .130129 cmyk
@
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf506.462 171.297 mo(!")[4.56122 0 ]xsh492.462 154.327 mo(#!!!")[4.56122 4.56125 4.56122 4.56125 0 ]xsh492.462 137.357 mo($!!!")[4.56122 4.56125 4.56122 4.56125 0 ]xsh492.462 120.387 mo(%!!!")[4.56122 4.56125 4.56122 4.56125 0 ]xsh%ADOBeginSubsetFont: IKBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IKBBAA+Calibri gcheck setglobal} if
1 2424 10 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>IKBBAA+Calibri AddT42Char 
1 4008 15 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>IKBBAA+Calibri AddT42Char 
1 5874 21 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>IKBBAA+Calibri AddT42Char 
1 1066 5 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>IKBBAA+Calibri AddT42Char 
IKBBAA+Calibri /CharStrings get begin
/g10 10 def
/g15 15 def
/g21 21 def
/g5 5 def
end
IKBBAA+Calibri /Encoding get
dup 68 /g10 put
dup 69 /g15 put
dup 70 /g21 put
dup 71 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/USTWFV+Calibri*1 [33{/.notdef}rp /g37 /g1 /g39 /g41 /g43 /g45 /g38 /g33 /g40 /g34 /g7 /g31 /g22 /g13 /g16 /g26 /g24 /g17 /g8 /g12 /g28 /g19 /g27 /g11 /g20 /g23 /g4 /g2 /g9 /g18 /g25 /g29 /g42 /g3 /g14 /g10 /g15 /g21 /g5 184{/.notdef}rp]USTWFV+Calibri nfUSTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf492.462 103.417 mo(&!!!")[4.56122 4.56125 4.56122 4.56125 0 ]xsh488.462 86.4468 mo('!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh488.462 69.4768 mo('#!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh528.965 182.407 mo('\(!\(!*'\('\(!")[4.56122 2.27521 4.56122 2.27521 4.56122 2.7522 4.56122 2.27521 4.56122 2.27521 4.56122 0 ]xsh586.748 182.407 mo('\('\(!*'\(#\(!")[4.56122 2.27521 4.56122 2.27521 4.56122 2.7522 4.56122 2.27521 4.56122 2.27521 4.56122 0 ]xsh642.376 182.407 mo('\(#\(!*'\(#\('#")[4.56122 2.27521 4.56122 2.27521 4.56122 2.7522 4.56122 2.27521 4.56122 2.27521 4.56122 4.56128 0 ]xshUSTWFV+Calibri*1 [0 -10 -10 0 0 0 ]msf482.962 151.152 mo(+,-./0"12"34567")[-6.45496 -5.25395 -7.98795 -5.25394 -4.97601 -3.48599 -2.26098 -5.27293 -3.05193 -2.26099 -5.16598 -4.79004 -3.35007 -5.25394 -3.91106 0 ]yshUSTWFV+Calibri*1 [10 0 0 -10 0 0 ]msf581.927 197.707 mo(8/0791:"3490")[5.67401 4.97601 3.48596 3.91107 2.29504 5.27295 5.25391 2.26099 5.16595 4.79004 2.29504 3.48602 0 ]xshUSTWFV+Calibri*1 [14 0 0 -14 0 0 ]msf541.384 48.5768 mo(?6?D)sh569.884 48.5768 mo(C6/E,F/G5")[5.92065 7.35553 6.96643 7.35547 7.35553 3.21307 6.96643 3.52795 4.69012 0 ]xsh532.26 221.171 mo
537.201 221.171 li
537.201 226.112 li
532.26 226.112 li
cp
.630945 .325231 .0310369 0 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf539.172 227.152 mo(?45)sh551.226 227.152 mo(6*/:@0/")[4.72852 2.7558 4.47845 4.72852 5.01398 3.13739 4.47839 0 ]xsh590.206 221.171 mo
595.147 221.171 li
595.147 226.112 li
590.206 226.112 li
cp
.158206 .719326 .596887 .0181277 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf597.118 227.152 mo(?45)sh609.173 227.152 mo(6*?405/")[4.72852 2.7558 4.72858 4.31104 3.13739 3.01508 4.47839 0 ]xsh.75 lw
458.461 25.077 mo
706.154 25.077 li
706.154 241.077 li
458.461 241.077 li
cp
0 0 0 .130129 cmyk
@
23.7673 286.615 mo
318.461 286.615 li
318.461 502.615 li
23.7673 502.615 li
cp
0 0 0 0 cmyk
ef
.75 lw
84.9673 389.052 mo
305.462 389.052 li
84.9673 373.67 mo
305.462 373.67 li
84.9673 358.288 mo
305.462 358.288 li
84.9673 342.906 mo
305.462 342.906 li
84.9673 327.524 mo
305.462 327.524 li
0 0 0 .130129 cmyk
@
94.1309 337.343 mo
102.313 337.343 li
102.313 404.607 li
94.1309 404.607 li
cp
130.786 338.979 mo
138.967 338.979 li
138.967 404.607 li
130.786 404.607 li
cp
167.44 343.234 mo
175.949 343.234 li
175.949 404.607 li
167.44 404.607 li
cp
204.422 334.397 mo
212.604 334.397 li
212.604 404.607 li
204.422 404.607 li
cp
241.076 331.124 mo
249.258 331.124 li
249.258 404.607 li
241.076 404.607 li
cp
277.731 331.124 mo
285.913 331.124 li
285.913 404.607 li
277.731 404.607 li
cp
.630945 .325231 .0310369 0 cmyk
f
104.604 394.615 mo
112.785 394.615 li
112.785 404.607 li
104.604 404.607 li
cp
141.258 349.779 mo
149.44 349.779 li
149.44 404.607 li
141.258 404.607 li
cp
177.913 382.834 mo
186.422 382.834 li
186.422 404.607 li
177.913 404.607 li
cp
214.895 378.579 mo
223.076 378.579 li
223.076 404.607 li
214.895 404.607 li
cp
251.549 386.761 mo
259.731 386.761 li
259.731 404.607 li
251.549 404.607 li
cp
288.204 404.106 mo
296.385 404.106 li
296.385 404.607 li
288.204 404.607 li
cp
.158206 .719326 .596887 .0181277 cmyk
f
85.1123 404.607 mo
305.462 404.607 li
0 0 0 .130129 cmyk
@
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf71.7674 408.207 mo(!")[4.56123 0 ]xsh57.7673 392.769 mo(A!!!")[4.56123 4.56123 4.56123 4.56123 0 ]xsh53.7674 377.33 mo('!!!!")[4.56123 4.56123 4.56123 4.56124 4.56123 0 ]xsh53.7674 361.892 mo('A!!!")[4.56123 4.56123 4.56123 4.56124 4.56123 0 ]xsh53.7674 346.454 mo(#!!!!")[4.56123 4.56123 4.56123 4.56124 4.56123 0 ]xsh53.7674 331.015 mo(#A!!!")[4.56123 4.56123 4.56123 4.56124 4.56123 0 ]xshgsave
-11.3238 521.156 mo
182.768 327.064 li
190.546 334.842 li
-3.54559 528.934 li
cp
clp
80.1916 440.225 mo
80.2596 440.293 80.3029 440.357 80.3213 440.417 cv
80.3398 440.477 80.3304 440.525 80.2931 440.563 cv
79.8394 441.016 li
80.6849 441.862 li
80.7015 441.878 80.7112 441.896 80.7141 441.916 cv
80.7169 441.936 80.7118 441.961 80.6988 441.991 cv
80.6858 442.02 80.6643 442.054 80.6343 442.093 cv
80.6043 442.131 80.5626 442.177 80.5092 442.23 cv
80.458 442.281 80.4132 442.322 80.3749 442.352 cv
80.3366 442.382 80.3032 442.403 80.2747 442.415 cv
80.2461 442.427 80.2224 442.431 80.2035 442.427 cv
80.1846 442.423 80.1669 442.413 80.1504 442.396 cv
79.3048 441.551 li
77.6584 443.197 li
77.6337 443.222 77.61 443.239 77.5874 443.25 cv
77.5648 443.26 77.5385 443.263 77.5087 443.26 cv
77.4788 443.257 77.4458 443.243 77.4097 443.217 cv
77.3736 443.191 77.3308 443.153 77.2813 443.104 cv
77.2421 443.064 77.208 443.028 77.1791 442.995 cv
77.1502 442.962 77.1259 442.93 77.1063 442.898 cv
77.0867 442.866 77.0701 442.833 77.0566 442.799 cv
77.0431 442.765 77.0302 442.727 77.0177 442.686 cv
76.0064 438.805 li
76.0004 438.778 76.0012 438.748 76.0088 438.716 cv
76.0164 438.683 76.0319 438.647 76.0553 438.607 cv
76.0787 438.567 76.1121 438.522 76.1555 438.473 cv
76.1988 438.423 76.2522 438.367 76.3156 438.303 cv
76.3852 438.234 76.4485 438.175 76.5054 438.129 cv
76.5623 438.082 76.6108 438.047 76.6508 438.024 cv
76.6908 438.001 76.726 437.987 76.7564 437.984 cv
76.7868 437.98 76.8113 437.988 76.83 438.007 cv
79.4003 440.577 li
79.8539 440.123 li
79.8892 440.088 79.9357 440.078 79.9935 440.092 cv
80.0513 440.106 80.1174 440.151 80.1916 440.225 cv
cp
78.8657 441.112 mo
76.656 438.902 li
76.6499 438.908 li
77.5653 442.412 li
78.8657 441.112 li
cp
82.3155 439.702 mo
82.4629 439.849 82.5366 439.971 82.5367 440.069 cv
82.5368 440.166 82.4727 440.279 82.3443 440.408 cv
82.22 440.532 82.1101 440.594 82.0147 440.594 cv
81.9193 440.594 81.8 440.522 81.6568 440.379 cv
81.5094 440.232 81.4357 440.109 81.4356 440.012 cv
81.4355 439.914 81.4996 439.801 81.628 439.673 cv
81.7523 439.549 81.8622 439.487 81.9576 439.487 cv
82.053 439.487 82.1723 439.558 82.3155 439.702 cv
cp
84.6818 435.431 mo
84.8971 435.646 85.0525 435.874 85.1477 436.114 cv
85.243 436.355 85.2818 436.599 85.2642 436.846 cv
85.2465 437.094 85.1761 437.339 85.0528 437.583 cv
84.9295 437.826 84.7559 438.06 84.5321 438.284 cv
84.4078 438.408 84.281 438.517 84.1515 438.612 cv
84.0221 438.706 83.9009 438.784 83.7881 438.845 cv
83.6753 438.906 83.5785 438.952 83.4978 438.983 cv
83.4171 439.015 83.3618 439.031 83.3318 439.032 cv
83.3018 439.033 83.2775 439.03 83.2589 439.024 cv
83.2404 439.018 83.2197 439.009 83.197 438.996 cv
83.1742 438.984 83.1484 438.965 83.1195 438.941 cv
83.0906 438.916 83.0576 438.885 83.0204 438.848 cv
82.9853 438.813 82.9554 438.78 82.9306 438.749 cv
82.9059 438.718 82.8889 438.689 82.8796 438.664 cv
82.8704 438.638 82.8673 438.615 82.8704 438.595 cv
82.8735 438.576 82.8823 438.559 82.8969 438.544 cv
82.9176 438.523 82.9627 438.504 83.032 438.487 cv
83.1013 438.469 83.1878 438.438 83.2913 438.395 cv
83.3948 438.351 83.5144 438.289 83.65 438.207 cv
83.7856 438.125 83.928 438.009 84.0771 437.86 cv
84.2159 437.722 84.3267 437.578 84.4095 437.428 cv
84.4923 437.279 84.5404 437.128 84.5538 436.973 cv
84.5673 436.819 84.5444 436.664 84.4853 436.51 cv
84.4261 436.356 84.3198 436.202 84.1664 436.048 cv
84.0379 435.92 83.9042 435.826 83.7654 435.768 cv
83.6265 435.71 83.4824 435.691 83.3331 435.709 cv
83.1838 435.728 83.0288 435.785 82.8682 435.882 cv
82.7075 435.978 82.5381 436.116 82.3598 436.294 cv
82.2334 436.42 82.1308 436.535 82.052 436.639 cv
81.9732 436.743 81.8944 436.834 81.8157 436.912 cv
81.7576 436.971 81.7027 436.999 81.6509 436.996 cv
81.5991 436.994 81.5349 436.955 81.4582 436.878 cv
79.8204 435.241 li
79.752 435.172 79.7174 435.105 79.7164 435.04 cv
79.7154 434.975 79.745 434.912 79.8051 434.852 cv
81.5876 433.069 li
81.6042 433.053 81.6249 433.041 81.6497 433.035 cv
81.6746 433.029 81.7015 433.03 81.7305 433.038 cv
81.7595 433.046 81.791 433.062 81.825 433.086 cv
81.8591 433.11 81.8958 433.141 81.935 433.18 cv
82.0093 433.255 82.0572 433.322 82.0787 433.384 cv
82.1001 433.445 82.0929 433.493 82.0571 433.529 cv
80.6176 434.969 li
81.7467 436.098 li
81.8062 436.017 81.8714 435.94 81.9423 435.865 cv
82.0132 435.79 82.0965 435.704 82.1924 435.608 cv
82.4141 435.387 82.6353 435.22 82.8561 435.109 cv
83.0768 434.999 83.2928 434.938 83.5041 434.927 cv
83.7155 434.917 83.9211 434.955 84.1209 435.041 cv
84.3208 435.127 84.5077 435.257 84.6818 435.431 cv
cp
87.1476 434.87 mo
87.2949 435.017 87.3687 435.139 87.3687 435.237 cv
87.3688 435.334 87.3047 435.447 87.1763 435.576 cv
87.052 435.7 86.9421 435.762 86.8467 435.762 cv
86.7514 435.762 86.632 435.69 86.4888 435.547 cv
86.3414 435.4 86.2677 435.277 86.2676 435.18 cv
86.2675 435.082 86.3316 434.969 86.46 434.841 cv
86.5843 434.717 86.6942 434.655 86.7896 434.655 cv
86.885 434.655 87.0043 434.726 87.1476 434.87 cv
cp
89.5138 430.599 mo
89.7292 430.814 89.8845 431.042 89.9797 431.282 cv
90.075 431.523 90.1138 431.767 90.0962 432.014 cv
90.0785 432.262 90.0081 432.507 89.8848 432.751 cv
89.7615 432.994 89.5879 433.228 89.3641 433.452 cv
89.2398 433.576 89.113 433.685 88.9835 433.779 cv
88.8541 433.874 88.733 433.952 88.6201 434.013 cv
88.5073 434.074 88.4106 434.12 88.3298 434.151 cv
88.2491 434.183 88.1938 434.199 88.1638 434.2 cv
88.1338 434.201 88.1095 434.198 88.0909 434.192 cv
88.0724 434.186 88.0517 434.177 88.029 434.164 cv
88.0062 434.152 87.9804 434.133 87.9515 434.109 cv
87.9226 434.084 87.8896 434.053 87.8524 434.016 cv
87.8173 433.981 87.7874 433.948 87.7626 433.917 cv
87.7379 433.886 87.7209 433.857 87.7116 433.832 cv
87.7024 433.806 87.6993 433.783 87.7024 433.763 cv
87.7055 433.744 87.7144 433.727 87.7289 433.712 cv
87.7496 433.691 87.7947 433.672 87.864 433.655 cv
87.9334 433.637 88.0198 433.606 88.1233 433.563 cv
88.2268 433.519 88.3464 433.457 88.482 433.375 cv
88.6177 433.293 88.76 433.177 88.9091 433.028 cv
89.0479 432.889 89.1587 432.746 89.2415 432.596 cv
89.3243 432.447 89.3724 432.296 89.3858 432.141 cv
89.3993 431.987 89.3764 431.832 89.3173 431.678 cv
89.2582 431.524 89.1519 431.37 88.9984 431.216 cv
88.8699 431.088 88.7362 430.994 88.5974 430.936 cv
88.4585 430.878 88.3144 430.859 88.1651 430.877 cv
88.0158 430.896 87.8609 430.953 87.7002 431.05 cv
87.5395 431.146 87.3701 431.284 87.1918 431.462 cv
87.0654 431.588 86.9628 431.703 86.884 431.807 cv
86.8052 431.911 86.7265 432.002 86.6477 432.08 cv
86.5896 432.139 86.5347 432.167 86.4829 432.164 cv
86.4311 432.162 86.3669 432.123 86.2902 432.046 cv
84.6524 430.409 li
84.5841 430.34 84.5494 430.273 84.5484 430.208 cv
84.5474 430.143 84.577 430.08 84.6371 430.02 cv
86.4196 428.237 li
86.4362 428.221 86.4569 428.21 86.4817 428.203 cv
86.5066 428.197 86.5335 428.198 86.5625 428.206 cv
86.5915 428.214 86.623 428.23 86.6571 428.254 cv
86.6911 428.278 86.7278 428.309 86.767 428.348 cv
86.8413 428.423 86.8892 428.49 86.9107 428.552 cv
86.9321 428.613 86.9249 428.661 86.8891 428.697 cv
85.4496 430.137 li
86.5787 431.266 li
86.6382 431.185 86.7034 431.108 86.7743 431.033 cv
86.8452 430.958 86.9285 430.872 87.0244 430.776 cv
87.2461 430.555 87.4673 430.388 87.6881 430.277 cv
87.9088 430.166 88.1248 430.106 88.3361 430.095 cv
88.5475 430.085 88.7531 430.123 88.9529 430.209 cv
89.1528 430.295 89.3398 430.425 89.5138 430.599 cv
cp
91.3495 428.211 mo
91.4305 428.292 91.4772 428.357 91.4896 428.407 cv
91.5021 428.457 91.4907 428.499 91.4554 428.535 cv
90.1553 429.835 li
90.118 429.872 90.0739 429.884 90.0231 429.87 cv
89.9723 429.857 89.9074 429.811 89.8285 429.732 cv
89.7497 429.653 89.7041 429.589 89.6916 429.539 cv
89.6792 429.489 89.6916 429.446 89.7289 429.408 cv
91.0291 428.108 li
91.0456 428.092 91.0638 428.08 91.0835 428.072 cv
91.1032 428.065 91.1266 428.066 91.1535 428.074 cv
91.1805 428.082 91.2101 428.097 91.2422 428.119 cv
91.2744 428.141 91.3102 428.172 91.3495 428.211 cv
cp
95.0295 425.387 mo
95.0975 425.455 95.1407 425.519 95.1592 425.579 cv
95.1776 425.639 95.1682 425.687 95.1309 425.725 cv
94.6773 426.178 li
95.5228 427.024 li
95.5393 427.04 95.549 427.059 95.5519 427.079 cv
95.5548 427.099 95.5497 427.123 95.5366 427.153 cv
95.5236 427.183 95.5021 427.216 95.4721 427.255 cv
95.4421 427.293 95.4004 427.339 95.3471 427.392 cv
95.2958 427.443 95.2511 427.484 95.2128 427.514 cv
95.1745 427.544 95.1411 427.565 95.1125 427.577 cv
95.0839 427.589 95.0602 427.593 95.0413 427.589 cv
95.0225 427.585 95.0048 427.575 94.9882 427.558 cv
94.1427 426.713 li
92.4962 428.359 li
92.4715 428.384 92.4479 428.401 92.4253 428.412 cv
92.4026 428.422 92.3764 428.425 92.3465 428.422 cv
92.3166 428.419 92.2837 428.405 92.2476 428.379 cv
92.2115 428.353 92.1687 428.315 92.1191 428.266 cv
92.0799 428.227 92.0458 428.19 92.0169 428.158 cv
91.988 428.124 91.9638 428.092 91.9441 428.06 cv
91.9245 428.028 91.908 427.995 91.8945 427.961 cv
91.881 427.927 91.868 427.89 91.8555 427.848 cv
90.8443 423.967 li
90.8382 423.94 90.839 423.911 90.8466 423.878 cv
90.8543 423.845 90.8698 423.809 90.8932 423.769 cv
90.9166 423.729 90.95 423.684 90.9933 423.635 cv
91.0367 423.585 91.09 423.529 91.1534 423.465 cv
91.2231 423.396 91.2864 423.338 91.3433 423.291 cv
91.4002 423.244 91.4487 423.21 91.4887 423.186 cv
91.5287 423.163 91.5639 423.149 91.5943 423.146 cv
91.6247 423.143 91.6492 423.15 91.6678 423.169 cv
94.2381 425.739 li
94.6918 425.286 li
94.727 425.25 94.7736 425.24 94.8314 425.254 cv
94.8892 425.268 94.9552 425.313 95.0295 425.387 cv
cp
93.7036 426.274 mo
91.4939 424.064 li
91.4877 424.07 li
92.4031 427.574 li
93.7036 426.274 li
cp
97.1534 424.864 mo
97.3008 425.011 97.3745 425.134 97.3746 425.231 cv
97.3747 425.329 97.3105 425.441 97.1821 425.57 cv
97.0578 425.694 96.948 425.756 96.8526 425.756 cv
96.7572 425.756 96.6379 425.684 96.4946 425.541 cv
96.3473 425.394 96.2735 425.271 96.2734 425.174 cv
96.2733 425.076 96.3375 424.964 96.4659 424.835 cv
96.5902 424.711 96.7 424.649 96.7954 424.649 cv
96.8908 424.649 97.0101 424.721 97.1534 424.864 cv
cp
99.5196 420.593 mo
99.735 420.808 99.8903 421.036 99.9856 421.276 cv
100.081 421.517 100.12 421.761 100.102 422.008 cv
100.084 422.256 100.014 422.501 99.8906 422.745 cv
99.7673 422.988 99.5938 423.222 99.37 423.446 cv
99.2457 423.57 99.1188 423.679 98.9894 423.774 cv
98.8599 423.868 98.7388 423.946 98.626 424.007 cv
98.5132 424.068 98.4164 424.114 98.3357 424.146 cv
98.255 424.177 98.1996 424.193 98.1696 424.194 cv
98.1396 424.195 98.1153 424.193 98.0968 424.186 cv
98.0782 424.18 98.0576 424.171 98.0348 424.159 cv
98.0121 424.146 97.9863 424.128 97.9574 424.103 cv
97.9285 424.078 97.8954 424.047 97.8582 424.01 cv
97.8232 423.975 97.7932 423.942 97.7685 423.911 cv
97.7437 423.88 97.7267 423.852 97.7175 423.826 cv
97.7082 423.8 97.7052 423.777 97.7083 423.758 cv
97.7114 423.738 97.7202 423.721 97.7347 423.706 cv
97.7555 423.686 97.8005 423.666 97.8699 423.649 cv
97.9392 423.631 98.0256 423.601 98.1291 423.557 cv
98.2326 423.513 98.3522 423.451 98.4878 423.369 cv
98.6235 423.287 98.7658 423.172 98.9149 423.022 cv
99.0537 422.884 99.1646 422.74 99.2474 422.591 cv
99.3301 422.441 99.3783 422.29 99.3917 422.135 cv
99.4051 421.981 99.3823 421.827 99.3231 421.672 cv
99.264 421.518 99.1577 421.364 99.0042 421.21 cv
98.8758 421.082 98.7421 420.989 98.6032 420.931 cv
98.4643 420.872 98.3202 420.853 98.171 420.871 cv
98.0217 420.89 97.8667 420.947 97.706 421.044 cv
97.5454 421.14 97.3759 421.278 97.1977 421.456 cv
97.0713 421.582 96.9686 421.697 96.8898 421.801 cv
96.8111 421.905 96.7323 421.996 96.6535 422.075 cv
96.5955 422.133 96.5405 422.161 96.4887 422.159 cv
96.4369 422.157 96.3727 422.117 96.2961 422.041 cv
94.6582 420.403 li
94.5899 420.334 94.5552 420.268 94.5542 420.202 cv
94.5532 420.137 94.5828 420.074 94.6429 420.014 cv
96.4254 418.232 li
96.442 418.215 96.4627 418.204 96.4876 418.197 cv
96.5124 418.191 96.5394 418.192 96.5683 418.2 cv
96.5973 418.208 96.6288 418.224 96.6629 418.248 cv
96.697 418.272 96.7336 418.303 96.7729 418.343 cv
96.8472 418.417 96.8951 418.485 96.9165 418.546 cv
96.938 418.607 96.9308 418.655 96.895 418.691 cv
95.4554 420.131 li
96.5845 421.26 li
96.6441 421.18 96.7093 421.102 96.7801 421.027 cv
96.851 420.952 96.9343 420.866 97.0302 420.771 cv
97.252 420.549 97.4732 420.383 97.6939 420.272 cv
97.9146 420.161 98.1306 420.1 98.342 420.09 cv
98.5533 420.079 98.7589 420.117 98.9588 420.203 cv
99.1587 420.289 99.3456 420.419 99.5196 420.593 cv
cp
101.985 420.032 mo
102.133 420.179 102.206 420.302 102.207 420.399 cv
102.207 420.497 102.143 420.609 102.014 420.738 cv
101.89 420.862 101.78 420.924 101.685 420.924 cv
101.589 420.924 101.47 420.852 101.327 420.709 cv
101.179 420.562 101.105 420.439 101.105 420.342 cv
101.105 420.244 101.17 420.132 101.298 420.003 cv
101.422 419.879 101.532 419.817 101.627 419.817 cv
101.723 419.817 101.842 419.888 101.985 420.032 cv
cp
104.463 415.63 mo
104.639 415.807 104.783 416.004 104.893 416.223 cv
105.004 416.441 105.066 416.669 105.08 416.906 cv
105.093 417.143 105.052 417.386 104.956 417.633 cv
104.859 417.881 104.694 418.122 104.46 418.356 cv
104.292 418.523 104.123 418.651 103.954 418.738 cv
103.784 418.825 103.613 418.878 103.441 418.896 cv
103.269 418.915 103.095 418.9 102.92 418.851 cv
102.745 418.802 102.567 418.726 102.386 418.621 cv
102.204 418.516 102.021 418.387 101.834 418.234 cv
101.648 418.081 101.457 417.907 101.262 417.712 cv
101.09 417.54 100.926 417.357 100.768 417.162 cv
100.611 416.967 100.474 416.764 100.358 416.553 cv
100.242 416.341 100.153 416.123 100.091 415.897 cv
100.029 415.671 100.006 415.443 100.023 415.213 cv
100.039 414.983 100.102 414.751 100.212 414.517 cv
100.322 414.283 100.491 414.051 100.719 413.823 cv
100.796 413.747 100.878 413.674 100.966 413.604 cv
101.054 413.535 101.14 413.475 101.221 413.424 cv
101.303 413.373 101.376 413.334 101.441 413.307 cv
101.505 413.28 101.55 413.265 101.576 413.262 cv
101.602 413.259 101.625 413.261 101.646 413.267 cv
101.667 413.273 101.687 413.282 101.706 413.293 cv
101.726 413.305 101.747 413.319 101.769 413.337 cv
101.791 413.355 101.816 413.378 101.845 413.407 cv
101.882 413.444 101.914 413.477 101.94 413.505 cv
101.966 413.533 101.983 413.559 101.993 413.583 cv
102.002 413.607 102.005 413.628 102.002 413.648 cv
101.999 413.668 101.988 413.687 101.969 413.705 cv
101.947 413.728 101.908 413.752 101.854 413.777 cv
101.8 413.802 101.737 413.834 101.663 413.872 cv
101.59 413.91 101.506 413.962 101.411 414.027 cv
101.317 414.093 101.217 414.178 101.111 414.284 cv
100.919 414.477 100.792 414.682 100.732 414.899 cv
100.672 415.117 100.664 415.336 100.709 415.557 cv
100.753 415.777 100.841 415.996 100.974 416.214 cv
101.106 416.431 101.265 416.639 101.449 416.835 cv
101.472 416.751 101.502 416.659 101.538 416.561 cv
101.574 416.462 101.62 416.361 101.674 416.256 cv
101.729 416.151 101.794 416.047 101.867 415.942 cv
101.94 415.838 102.028 415.735 102.13 415.633 cv
102.347 415.416 102.56 415.262 102.768 415.172 cv
102.976 415.082 103.178 415.043 103.375 415.055 cv
103.572 415.068 103.761 415.125 103.942 415.228 cv
104.124 415.33 104.297 415.465 104.463 415.63 cv
cp
103.97 416.219 mo
103.85 416.099 103.728 416.001 103.606 415.927 cv
103.484 415.852 103.36 415.809 103.236 415.796 cv
103.112 415.783 102.984 415.805 102.854 415.861 cv
102.723 415.917 102.59 416.013 102.453 416.15 cv
102.376 416.226 102.307 416.31 102.243 416.4 cv
102.18 416.49 102.125 416.583 102.077 416.678 cv
102.03 416.773 101.989 416.869 101.956 416.967 cv
101.923 417.064 101.898 417.158 101.882 417.25 cv
102.149 417.517 102.391 417.724 102.605 417.87 cv
102.82 418.017 103.014 418.112 103.188 418.155 cv
103.362 418.199 103.521 418.195 103.665 418.145 cv
103.809 418.094 103.947 418.004 104.077 417.873 cv
104.21 417.741 104.3 417.601 104.347 417.454 cv
104.395 417.307 104.409 417.159 104.389 417.011 cv
104.369 416.863 104.322 416.721 104.247 416.586 cv
104.172 416.452 104.08 416.329 103.97 416.219 cv
cp
0 0 0 .690608 cmyk
f
grestore
gsave
25.4011 521.156 mo
219.493 327.064 li
227.271 334.842 li
33.1793 528.934 li
cp
clp
116.916 440.225 mo
116.984 440.293 117.028 440.357 117.046 440.417 cv
117.065 440.477 117.055 440.525 117.018 440.563 cv
116.564 441.016 li
117.41 441.862 li
117.426 441.878 117.436 441.896 117.439 441.916 cv
117.442 441.936 117.437 441.961 117.424 441.991 cv
117.411 442.02 117.389 442.054 117.359 442.093 cv
117.329 442.131 117.287 442.177 117.234 442.23 cv
117.183 442.281 117.138 442.322 117.1 442.352 cv
117.062 442.382 117.028 442.403 116.999 442.415 cv
116.971 442.427 116.947 442.431 116.928 442.427 cv
116.91 442.423 116.892 442.413 116.875 442.396 cv
116.03 441.551 li
114.383 443.197 li
114.359 443.222 114.335 443.239 114.312 443.25 cv
114.29 443.26 114.263 443.263 114.233 443.26 cv
114.204 443.257 114.171 443.243 114.135 443.217 cv
114.099 443.191 114.056 443.153 114.006 443.104 cv
113.967 443.064 113.933 443.028 113.904 442.995 cv
113.875 442.962 113.851 442.93 113.831 442.898 cv
113.812 442.866 113.795 442.833 113.782 442.799 cv
113.768 442.765 113.755 442.727 113.743 442.686 cv
112.731 438.805 li
112.725 438.778 112.726 438.748 112.734 438.716 cv
112.741 438.683 112.757 438.647 112.78 438.607 cv
112.804 438.567 112.837 438.522 112.88 438.473 cv
112.924 438.423 112.977 438.367 113.04 438.303 cv
113.11 438.234 113.173 438.175 113.23 438.129 cv
113.287 438.082 113.336 438.047 113.376 438.024 cv
113.416 438.001 113.451 437.987 113.481 437.984 cv
113.512 437.98 113.536 437.988 113.555 438.007 cv
116.125 440.577 li
116.579 440.123 li
116.614 440.088 116.661 440.078 116.718 440.092 cv
116.776 440.106 116.842 440.151 116.916 440.225 cv
cp
115.591 441.112 mo
113.381 438.902 li
113.375 438.908 li
114.29 442.412 li
115.591 441.112 li
cp
119.04 439.702 mo
119.188 439.849 119.261 439.971 119.262 440.069 cv
119.262 440.166 119.198 440.279 119.069 440.408 cv
118.945 440.532 118.835 440.594 118.74 440.594 cv
118.644 440.594 118.525 440.522 118.382 440.379 cv
118.234 440.232 118.16 440.109 118.16 440.012 cv
118.16 439.914 118.225 439.801 118.353 439.673 cv
118.477 439.549 118.587 439.487 118.682 439.487 cv
118.778 439.487 118.897 439.558 119.04 439.702 cv
cp
121.407 435.431 mo
121.622 435.646 121.777 435.874 121.873 436.114 cv
121.968 436.355 122.007 436.599 121.989 436.846 cv
121.971 437.094 121.901 437.339 121.778 437.583 cv
121.654 437.826 121.481 438.06 121.257 438.284 cv
121.133 438.408 121.006 438.517 120.876 438.612 cv
120.747 438.706 120.626 438.784 120.513 438.845 cv
120.4 438.906 120.303 438.952 120.223 438.983 cv
120.142 439.015 120.087 439.031 120.057 439.032 cv
120.027 439.033 120.002 439.03 119.984 439.024 cv
119.965 439.018 119.945 439.009 119.922 438.996 cv
119.899 438.984 119.873 438.965 119.844 438.941 cv
119.815 438.916 119.782 438.885 119.745 438.848 cv
119.71 438.813 119.68 438.78 119.656 438.749 cv
119.631 438.718 119.614 438.689 119.604 438.664 cv
119.595 438.638 119.592 438.615 119.595 438.595 cv
119.598 438.576 119.607 438.559 119.622 438.544 cv
119.643 438.523 119.688 438.504 119.757 438.487 cv
119.826 438.469 119.913 438.438 120.016 438.395 cv
120.12 438.351 120.239 438.289 120.375 438.207 cv
120.51 438.125 120.653 438.009 120.802 437.86 cv
120.941 437.722 121.052 437.578 121.134 437.428 cv
121.217 437.279 121.265 437.128 121.279 436.973 cv
121.292 436.819 121.269 436.664 121.21 436.51 cv
121.151 436.356 121.045 436.202 120.891 436.048 cv
120.763 435.92 120.629 435.826 120.49 435.768 cv
120.351 435.71 120.207 435.691 120.058 435.709 cv
119.909 435.728 119.754 435.785 119.593 435.882 cv
119.432 435.978 119.263 436.116 119.085 436.294 cv
118.958 436.42 118.856 436.535 118.777 436.639 cv
118.698 436.743 118.619 436.834 118.541 436.912 cv
118.482 436.971 118.428 436.999 118.376 436.996 cv
118.324 436.994 118.26 436.955 118.183 436.878 cv
116.545 435.241 li
116.477 435.172 116.442 435.105 116.441 435.04 cv
116.44 434.975 116.47 434.912 116.53 434.852 cv
118.313 433.069 li
118.329 433.053 118.35 433.041 118.375 433.035 cv
118.399 433.029 118.426 433.03 118.455 433.038 cv
118.484 433.046 118.516 433.062 118.55 433.086 cv
118.584 433.11 118.621 433.141 118.66 433.18 cv
118.734 433.255 118.782 433.322 118.803 433.384 cv
118.825 433.445 118.818 433.493 118.782 433.529 cv
117.342 434.969 li
118.472 436.098 li
118.531 436.017 118.596 435.94 118.667 435.865 cv
118.738 435.79 118.821 435.704 118.917 435.608 cv
119.139 435.387 119.36 435.22 119.581 435.109 cv
119.802 434.999 120.018 434.938 120.229 434.927 cv
120.44 434.917 120.646 434.955 120.846 435.041 cv
121.046 435.127 121.233 435.257 121.407 435.431 cv
cp
123.872 434.87 mo
124.02 435.017 124.093 435.139 124.094 435.237 cv
124.094 435.334 124.03 435.447 123.901 435.576 cv
123.777 435.7 123.667 435.762 123.572 435.762 cv
123.476 435.762 123.357 435.69 123.214 435.547 cv
123.066 435.4 122.993 435.277 122.993 435.18 cv
122.992 435.082 123.057 434.969 123.185 434.841 cv
123.309 434.717 123.419 434.655 123.515 434.655 cv
123.61 434.655 123.729 434.726 123.872 434.87 cv
cp
126.35 430.468 mo
126.526 430.644 126.67 430.842 126.78 431.06 cv
126.891 431.279 126.953 431.507 126.967 431.744 cv
126.98 431.981 126.939 432.224 126.843 432.471 cv
126.746 432.719 126.581 432.959 126.347 433.193 cv
126.179 433.361 126.01 433.489 125.841 433.576 cv
125.671 433.663 125.5 433.715 125.328 433.734 cv
125.156 433.753 124.982 433.738 124.807 433.689 cv
124.632 433.64 124.454 433.563 124.273 433.459 cv
124.092 433.354 123.908 433.225 123.721 433.072 cv
123.535 432.919 123.344 432.745 123.149 432.55 cv
122.977 432.378 122.813 432.194 122.655 432 cv
122.498 431.805 122.361 431.602 122.245 431.391 cv
122.129 431.179 122.04 430.961 121.978 430.735 cv
121.916 430.509 121.893 430.281 121.91 430.051 cv
121.926 429.821 121.99 429.589 122.099 429.354 cv
122.209 429.12 122.378 428.889 122.606 428.661 cv
122.683 428.585 122.765 428.511 122.853 428.442 cv
122.941 428.373 123.026 428.313 123.108 428.262 cv
123.19 428.211 123.263 428.172 123.328 428.145 cv
123.392 428.118 123.437 428.103 123.463 428.1 cv
123.489 428.097 123.512 428.099 123.533 428.105 cv
123.554 428.111 123.574 428.12 123.593 428.131 cv
123.613 428.143 123.634 428.157 123.656 428.175 cv
123.678 428.193 123.703 428.216 123.732 428.245 cv
123.769 428.282 123.801 428.315 123.827 428.343 cv
123.853 428.371 123.87 428.397 123.88 428.421 cv
123.889 428.444 123.892 428.466 123.889 428.486 cv
123.886 428.506 123.875 428.525 123.856 428.543 cv
123.834 428.566 123.795 428.59 123.741 428.615 cv
123.688 428.64 123.624 428.671 123.55 428.71 cv
123.477 428.748 123.393 428.8 123.299 428.865 cv
123.204 428.93 123.104 429.016 122.998 429.122 cv
122.806 429.315 122.679 429.52 122.619 429.737 cv
122.559 429.955 122.551 430.174 122.595 430.395 cv
122.64 430.615 122.729 430.834 122.861 431.052 cv
122.993 431.269 123.152 431.477 123.336 431.673 cv
123.359 431.589 123.389 431.497 123.425 431.398 cv
123.461 431.3 123.507 431.198 123.562 431.094 cv
123.616 430.989 123.681 430.885 123.754 430.78 cv
123.828 430.676 123.915 430.572 124.017 430.471 cv
124.234 430.253 124.447 430.1 124.655 430.01 cv
124.863 429.92 125.066 429.881 125.262 429.893 cv
125.459 429.906 125.648 429.963 125.829 430.066 cv
126.011 430.168 126.184 430.303 126.35 430.468 cv
cp
125.857 431.057 mo
125.737 430.937 125.615 430.839 125.493 430.765 cv
125.371 430.69 125.247 430.646 125.123 430.634 cv
124.999 430.621 124.871 430.643 124.741 430.699 cv
124.61 430.755 124.477 430.851 124.34 430.988 cv
124.263 431.064 124.194 431.147 124.13 431.238 cv
124.067 431.328 124.012 431.42 123.964 431.516 cv
123.917 431.611 123.876 431.707 123.843 431.805 cv
123.81 431.902 123.785 431.996 123.769 432.087 cv
124.036 432.355 124.278 432.562 124.492 432.708 cv
124.707 432.854 124.901 432.949 125.075 432.993 cv
125.249 433.037 125.409 433.033 125.552 432.983 cv
125.696 432.932 125.834 432.841 125.964 432.711 cv
126.097 432.578 126.187 432.439 126.234 432.291 cv
126.282 432.144 126.296 431.997 126.276 431.849 cv
126.256 431.701 126.209 431.559 126.134 431.424 cv
126.059 431.289 125.967 431.167 125.857 431.057 cv
cp
128.074 428.211 mo
128.155 428.292 128.202 428.357 128.214 428.407 cv
128.227 428.457 128.216 428.499 128.18 428.535 cv
126.88 429.835 li
126.843 429.872 126.799 429.884 126.748 429.87 cv
126.697 429.857 126.632 429.811 126.553 429.732 cv
126.475 429.653 126.429 429.589 126.416 429.539 cv
126.404 429.489 126.416 429.446 126.454 429.408 cv
127.754 428.108 li
127.771 428.092 127.789 428.08 127.808 428.072 cv
127.828 428.065 127.851 428.066 127.878 428.074 cv
127.905 428.082 127.935 428.097 127.967 428.119 cv
127.999 428.141 128.035 428.172 128.074 428.211 cv
cp
131.754 425.387 mo
131.822 425.455 131.866 425.519 131.884 425.579 cv
131.902 425.639 131.893 425.687 131.856 425.725 cv
131.402 426.178 li
132.248 427.024 li
132.264 427.04 132.274 427.059 132.277 427.079 cv
132.28 427.099 132.275 427.123 132.262 427.153 cv
132.249 427.183 132.227 427.216 132.197 427.255 cv
132.167 427.293 132.125 427.339 132.072 427.392 cv
132.021 427.443 131.976 427.484 131.938 427.514 cv
131.899 427.544 131.866 427.565 131.837 427.577 cv
131.809 427.589 131.785 427.593 131.766 427.589 cv
131.747 427.585 131.73 427.575 131.713 427.558 cv
130.868 426.713 li
129.221 428.359 li
129.196 428.384 129.173 428.401 129.15 428.412 cv
129.128 428.422 129.101 428.425 129.071 428.422 cv
129.042 428.419 129.008 428.405 128.972 428.379 cv
128.936 428.353 128.893 428.315 128.844 428.266 cv
128.805 428.227 128.771 428.19 128.742 428.158 cv
128.713 428.124 128.689 428.092 128.669 428.06 cv
128.649 428.028 128.633 427.995 128.619 427.961 cv
128.606 427.927 128.593 427.89 128.58 427.848 cv
127.569 423.967 li
127.563 423.94 127.564 423.911 127.572 423.878 cv
127.579 423.845 127.595 423.809 127.618 423.769 cv
127.642 423.729 127.675 423.684 127.718 423.635 cv
127.762 423.585 127.815 423.529 127.878 423.465 cv
127.948 423.396 128.011 423.338 128.068 423.291 cv
128.125 423.244 128.173 423.21 128.214 423.186 cv
128.253 423.163 128.289 423.149 128.319 423.146 cv
128.35 423.143 128.374 423.15 128.393 423.169 cv
130.963 425.739 li
131.417 425.286 li
131.452 425.25 131.499 425.24 131.556 425.254 cv
131.614 425.268 131.68 425.313 131.754 425.387 cv
cp
130.428 426.274 mo
128.219 424.064 li
128.213 424.07 li
129.128 427.574 li
130.428 426.274 li
cp
133.878 424.864 mo
134.026 425.011 134.099 425.134 134.1 425.231 cv
134.1 425.329 134.035 425.441 133.907 425.57 cv
133.783 425.694 133.673 425.756 133.577 425.756 cv
133.482 425.756 133.363 425.684 133.219 425.541 cv
133.072 425.394 132.998 425.271 132.998 425.174 cv
132.998 425.076 133.062 424.964 133.191 424.835 cv
133.315 424.711 133.425 424.649 133.52 424.649 cv
133.616 424.649 133.735 424.721 133.878 424.864 cv
cp
136.356 420.462 mo
136.532 420.639 136.675 420.836 136.786 421.054 cv
136.897 421.273 136.959 421.501 136.973 421.738 cv
136.986 421.975 136.945 422.218 136.848 422.465 cv
136.752 422.713 136.587 422.954 136.353 423.188 cv
136.185 423.355 136.016 423.483 135.846 423.57 cv
135.677 423.657 135.506 423.71 135.334 423.728 cv
135.162 423.747 134.988 423.732 134.813 423.683 cv
134.638 423.634 134.46 423.558 134.279 423.453 cv
134.097 423.348 133.913 423.219 133.727 423.066 cv
133.541 422.913 133.35 422.739 133.155 422.544 cv
132.983 422.372 132.818 422.189 132.661 421.994 cv
132.504 421.799 132.367 421.596 132.251 421.385 cv
132.135 421.173 132.046 420.955 131.984 420.729 cv
131.922 420.503 131.899 420.275 131.915 420.045 cv
131.932 419.815 131.995 419.583 132.105 419.349 cv
132.215 419.115 132.384 418.883 132.612 418.655 cv
132.689 418.579 132.771 418.506 132.859 418.436 cv
132.947 418.367 133.032 418.307 133.114 418.256 cv
133.196 418.205 133.269 418.166 133.333 418.139 cv
133.398 418.112 133.443 418.097 133.469 418.094 cv
133.495 418.091 133.518 418.093 133.539 418.099 cv
133.559 418.105 133.58 418.114 133.599 418.125 cv
133.619 418.137 133.64 418.151 133.662 418.169 cv
133.683 418.187 133.709 418.21 133.738 418.239 cv
133.775 418.276 133.807 418.309 133.833 418.337 cv
133.859 418.365 133.876 418.391 133.886 418.415 cv
133.895 418.439 133.898 418.46 133.895 418.48 cv
133.892 418.5 133.881 418.519 133.862 418.537 cv
133.839 418.56 133.801 418.584 133.747 418.609 cv
133.693 418.634 133.63 418.666 133.556 418.704 cv
133.482 418.742 133.399 418.794 133.304 418.859 cv
133.21 418.925 133.11 419.01 133.004 419.116 cv
132.811 419.309 132.685 419.514 132.625 419.731 cv
132.565 419.949 132.557 420.168 132.601 420.389 cv
132.646 420.609 132.734 420.828 132.867 421.046 cv
132.999 421.263 133.158 421.471 133.342 421.667 cv
133.365 421.583 133.394 421.491 133.431 421.393 cv
133.467 421.294 133.512 421.193 133.567 421.088 cv
133.622 420.983 133.686 420.879 133.76 420.774 cv
133.833 420.67 133.921 420.567 134.022 420.465 cv
134.24 420.248 134.453 420.094 134.661 420.004 cv
134.869 419.914 135.071 419.875 135.268 419.887 cv
135.465 419.9 135.654 419.957 135.835 420.06 cv
136.016 420.162 136.19 420.297 136.356 420.462 cv
cp
135.863 421.051 mo
135.742 420.931 135.621 420.833 135.499 420.759 cv
135.377 420.684 135.253 420.641 135.129 420.628 cv
135.005 420.615 134.877 420.637 134.747 420.693 cv
134.616 420.749 134.482 420.845 134.346 420.982 cv
134.269 421.058 134.199 421.142 134.136 421.232 cv
134.073 421.322 134.018 421.415 133.97 421.51 cv
133.923 421.605 133.882 421.701 133.849 421.799 cv
133.816 421.896 133.791 421.99 133.775 422.082 cv
134.042 422.349 134.283 422.556 134.498 422.702 cv
134.713 422.849 134.907 422.944 135.081 422.987 cv
135.255 423.031 135.414 423.027 135.558 422.977 cv
135.702 422.926 135.839 422.836 135.97 422.705 cv
136.102 422.573 136.193 422.433 136.24 422.286 cv
136.288 422.139 136.301 421.991 136.282 421.843 cv
136.262 421.695 136.214 421.553 136.14 421.418 cv
136.065 421.284 135.973 421.161 135.863 421.051 cv
cp
138.71 420.032 mo
138.858 420.179 138.931 420.302 138.932 420.399 cv
138.932 420.497 138.867 420.609 138.739 420.738 cv
138.615 420.862 138.505 420.924 138.41 420.924 cv
138.314 420.924 138.195 420.852 138.051 420.709 cv
137.904 420.562 137.83 420.439 137.83 420.342 cv
137.83 420.244 137.894 420.132 138.023 420.003 cv
138.147 419.879 138.257 419.817 138.352 419.817 cv
138.448 419.817 138.567 419.888 138.71 420.032 cv
cp
142.193 416.813 mo
142.232 416.852 142.261 416.888 142.282 416.921 cv
142.303 416.954 142.316 416.984 142.322 417.011 cv
142.328 417.038 142.328 417.062 142.322 417.082 cv
142.316 417.103 142.305 417.121 142.291 417.135 cv
140.191 419.234 li
140.177 419.249 140.16 419.259 140.14 419.264 cv
140.121 419.269 140.097 419.269 140.069 419.264 cv
140.041 419.259 140.011 419.246 139.978 419.226 cv
139.945 419.205 139.909 419.175 139.87 419.136 cv
139.833 419.099 139.804 419.064 139.783 419.031 cv
139.763 418.998 139.748 418.968 139.74 418.941 cv
139.732 418.915 139.73 418.89 139.734 418.867 cv
139.738 418.844 139.748 418.825 139.765 418.808 cv
140.602 417.972 li
137.54 414.911 li
137.227 416.153 li
137.209 416.213 137.19 416.257 137.17 416.285 cv
137.15 416.313 137.126 416.327 137.098 416.328 cv
137.07 416.329 137.038 416.317 137.002 416.291 cv
136.966 416.265 136.924 416.229 136.876 416.181 cv
136.841 416.146 136.813 416.114 136.791 416.086 cv
136.769 416.058 136.753 416.033 136.743 416.01 cv
136.733 415.987 136.727 415.964 136.726 415.94 cv
136.725 415.916 136.727 415.889 136.734 415.858 cv
137.068 414.338 li
137.07 414.324 137.075 414.308 137.083 414.291 cv
137.091 414.275 137.103 414.255 137.117 414.232 cv
137.132 414.21 137.151 414.185 137.175 414.159 cv
137.199 414.133 137.229 414.102 137.266 414.065 cv
137.316 414.015 137.36 413.975 137.397 413.947 cv
137.434 413.917 137.466 413.897 137.492 413.886 cv
137.518 413.875 137.539 413.871 137.557 413.877 cv
137.575 413.882 137.59 413.891 137.602 413.903 cv
141.136 417.437 li
141.864 416.709 li
141.881 416.692 141.901 416.681 141.925 416.676 cv
141.949 416.671 141.974 416.672 142.001 416.681 cv
142.028 416.689 142.057 416.704 142.089 416.725 cv
142.121 416.747 142.155 416.776 142.193 416.813 cv
cp
0 0 0 .690608 cmyk
f
grestore
gsave
61.869 521.412 mo
256.41 326.871 li
264.188 334.65 li
69.6472 529.191 li
cp
clp
153.577 440.289 mo
153.645 440.357 153.688 440.421 153.707 440.481 cv
153.725 440.541 153.716 440.589 153.678 440.627 cv
153.225 441.08 li
154.07 441.926 li
154.087 441.942 154.097 441.961 154.1 441.981 cv
154.102 442.001 154.097 442.025 154.084 442.055 cv
154.071 442.085 154.05 442.119 154.02 442.157 cv
153.99 442.195 153.948 442.241 153.895 442.294 cv
153.844 442.346 153.799 442.386 153.76 442.416 cv
153.722 442.446 153.689 442.467 153.66 442.479 cv
153.632 442.491 153.608 442.495 153.589 442.491 cv
153.57 442.487 153.552 442.477 153.536 442.46 cv
152.69 441.615 li
151.044 443.261 li
151.019 443.286 150.996 443.304 150.973 443.314 cv
150.95 443.324 150.924 443.328 150.894 443.324 cv
150.864 443.321 150.831 443.307 150.795 443.281 cv
150.759 443.255 150.716 443.217 150.667 443.168 cv
150.628 443.129 150.594 443.093 150.565 443.06 cv
150.536 443.027 150.511 442.994 150.492 442.962 cv
150.472 442.93 150.456 442.897 150.442 442.863 cv
150.429 442.829 150.416 442.792 150.403 442.75 cv
149.392 438.87 li
149.386 438.842 149.387 438.813 149.394 438.78 cv
149.402 438.748 149.417 438.711 149.441 438.671 cv
149.464 438.631 149.498 438.587 149.541 438.537 cv
149.584 438.487 149.638 438.431 149.701 438.368 cv
149.771 438.298 149.834 438.24 149.891 438.193 cv
149.948 438.147 149.996 438.112 150.036 438.088 cv
150.076 438.065 150.111 438.051 150.142 438.048 cv
150.172 438.045 150.197 438.052 150.215 438.071 cv
152.786 440.641 li
153.239 440.188 li
153.275 440.152 153.321 440.142 153.379 440.156 cv
153.437 440.171 153.503 440.215 153.577 440.289 cv
cp
152.251 441.176 mo
150.042 438.966 li
150.035 438.972 li
150.951 442.476 li
152.251 441.176 li
cp
155.701 439.766 mo
155.848 439.913 155.922 440.036 155.922 440.133 cv
155.922 440.231 155.858 440.344 155.73 440.472 cv
155.605 440.596 155.496 440.658 155.4 440.658 cv
155.305 440.658 155.186 440.587 155.042 440.443 cv
154.895 440.296 154.821 440.174 154.821 440.076 cv
154.821 439.979 154.885 439.866 155.014 439.737 cv
155.138 439.613 155.248 439.551 155.343 439.551 cv
155.439 439.551 155.558 439.623 155.701 439.766 cv
cp
158.179 435.365 mo
158.355 435.541 158.498 435.738 158.609 435.957 cv
158.72 436.175 158.782 436.403 158.796 436.64 cv
158.809 436.877 158.768 437.12 158.671 437.367 cv
158.575 437.615 158.41 437.856 158.176 438.09 cv
158.008 438.257 157.839 438.385 157.669 438.472 cv
157.499 438.559 157.329 438.612 157.156 438.63 cv
156.985 438.649 156.811 438.634 156.636 438.585 cv
156.461 438.536 156.283 438.46 156.102 438.355 cv
155.92 438.25 155.736 438.121 155.55 437.968 cv
155.363 437.815 155.173 437.641 154.978 437.446 cv
154.806 437.274 154.641 437.091 154.484 436.896 cv
154.326 436.701 154.19 436.498 154.074 436.287 cv
153.958 436.075 153.869 435.857 153.807 435.631 cv
153.744 435.405 153.722 435.177 153.738 434.947 cv
153.755 434.717 153.818 434.485 153.928 434.251 cv
154.038 434.017 154.207 433.785 154.435 433.557 cv
154.512 433.481 154.594 433.408 154.682 433.338 cv
154.77 433.269 154.855 433.209 154.937 433.158 cv
155.019 433.107 155.092 433.068 155.156 433.041 cv
155.221 433.014 155.266 432.999 155.292 432.996 cv
155.318 432.993 155.341 432.995 155.361 433.001 cv
155.382 433.007 155.402 433.016 155.422 433.028 cv
155.442 433.039 155.463 433.054 155.484 433.071 cv
155.506 433.089 155.532 433.112 155.561 433.141 cv
155.598 433.179 155.63 433.211 155.656 433.239 cv
155.682 433.267 155.699 433.293 155.708 433.317 cv
155.718 433.341 155.721 433.362 155.718 433.382 cv
155.715 433.402 155.704 433.421 155.685 433.44 cv
155.662 433.462 155.624 433.486 155.57 433.511 cv
155.516 433.536 155.452 433.568 155.379 433.606 cv
155.305 433.645 155.221 433.696 155.127 433.761 cv
155.033 433.827 154.933 433.912 154.827 434.018 cv
154.634 434.211 154.508 434.416 154.448 434.634 cv
154.387 434.851 154.38 435.07 154.424 435.291 cv
154.469 435.511 154.557 435.731 154.69 435.948 cv
154.822 436.166 154.98 436.373 155.165 436.57 cv
155.188 436.485 155.217 436.393 155.253 436.295 cv
155.29 436.196 155.335 436.095 155.39 435.99 cv
155.445 435.886 155.509 435.781 155.583 435.676 cv
155.656 435.572 155.744 435.469 155.845 435.367 cv
156.063 435.15 156.275 434.996 156.484 434.906 cv
156.692 434.816 156.894 434.777 157.091 434.79 cv
157.288 434.802 157.477 434.859 157.658 434.962 cv
157.839 435.065 158.013 435.199 158.179 435.365 cv
cp
157.686 435.953 mo
157.565 435.833 157.444 435.736 157.322 435.661 cv
157.199 435.586 157.076 435.543 156.952 435.53 cv
156.827 435.517 156.7 435.539 156.569 435.595 cv
156.439 435.651 156.305 435.747 156.169 435.884 cv
156.092 435.96 156.022 436.044 155.959 436.134 cv
155.896 436.224 155.841 436.317 155.793 436.412 cv
155.745 436.507 155.705 436.604 155.672 436.701 cv
155.639 436.798 155.614 436.893 155.598 436.984 cv
155.865 437.251 156.106 437.458 156.321 437.604 cv
156.535 437.751 156.73 437.846 156.904 437.889 cv
157.078 437.933 157.237 437.929 157.381 437.879 cv
157.525 437.828 157.662 437.738 157.793 437.607 cv
157.925 437.475 158.015 437.335 158.063 437.188 cv
158.11 437.041 158.124 436.893 158.104 436.745 cv
158.085 436.597 158.037 436.455 157.963 436.32 cv
157.888 436.186 157.796 436.063 157.686 435.953 cv
cp
160.533 434.934 mo
160.68 435.081 160.754 435.204 160.754 435.301 cv
160.754 435.399 160.69 435.512 160.562 435.64 cv
160.438 435.764 160.328 435.826 160.232 435.826 cv
160.137 435.826 160.018 435.755 159.874 435.611 cv
159.727 435.464 159.653 435.342 159.653 435.244 cv
159.653 435.147 159.717 435.034 159.846 434.905 cv
159.97 434.781 160.08 434.719 160.175 434.719 cv
160.27 434.719 160.39 434.791 160.533 434.934 cv
cp
164.015 431.715 mo
164.054 431.754 164.084 431.791 164.105 431.823 cv
164.125 431.856 164.139 431.886 164.145 431.913 cv
164.151 431.94 164.151 431.964 164.145 431.985 cv
164.138 432.005 164.128 432.023 164.114 432.037 cv
162.014 434.137 li
162 434.151 161.983 434.161 161.963 434.166 cv
161.943 434.171 161.92 434.171 161.892 434.166 cv
161.864 434.161 161.833 434.148 161.801 434.128 cv
161.768 434.107 161.732 434.077 161.692 434.038 cv
161.655 434.001 161.626 433.966 161.606 433.933 cv
161.585 433.9 161.571 433.87 161.563 433.843 cv
161.555 433.817 161.553 433.792 161.557 433.769 cv
161.561 433.746 161.571 433.727 161.588 433.71 cv
162.424 432.874 li
159.363 429.813 li
159.05 431.055 li
159.032 431.115 159.012 431.159 158.993 431.187 cv
158.973 431.215 158.949 431.229 158.921 431.23 cv
158.893 431.232 158.861 431.219 158.825 431.193 cv
158.789 431.167 158.747 431.131 158.699 431.083 cv
158.664 431.048 158.635 431.016 158.614 430.988 cv
158.592 430.96 158.576 430.935 158.566 430.912 cv
158.555 430.889 158.55 430.866 158.549 430.842 cv
158.548 430.819 158.55 430.791 158.557 430.76 cv
158.89 429.24 li
158.892 429.226 158.898 429.21 158.906 429.194 cv
158.914 429.177 158.926 429.157 158.94 429.134 cv
158.954 429.112 158.974 429.087 158.997 429.061 cv
159.021 429.036 159.052 429.004 159.089 428.967 cv
159.139 428.917 159.182 428.878 159.22 428.849 cv
159.257 428.82 159.289 428.799 159.314 428.788 cv
159.34 428.777 159.362 428.774 159.38 428.779 cv
159.397 428.784 159.413 428.793 159.425 428.805 cv
162.959 432.339 li
163.687 431.611 li
163.704 431.594 163.724 431.584 163.748 431.578 cv
163.771 431.573 163.797 431.575 163.824 431.583 cv
163.85 431.591 163.88 431.606 163.912 431.627 cv
163.944 431.649 163.978 431.678 164.015 431.715 cv
cp
164.735 428.275 mo
164.816 428.356 164.863 428.421 164.875 428.471 cv
164.888 428.521 164.876 428.564 164.841 428.599 cv
163.541 429.899 li
163.503 429.936 163.459 429.948 163.409 429.935 cv
163.358 429.921 163.293 429.875 163.214 429.796 cv
163.135 429.717 163.09 429.653 163.077 429.603 cv
163.065 429.553 163.077 429.51 163.114 429.473 cv
164.415 428.172 li
164.431 428.156 164.449 428.144 164.469 428.137 cv
164.489 428.129 164.512 428.13 164.539 428.138 cv
164.566 428.147 164.596 428.162 164.628 428.183 cv
164.66 428.205 164.696 428.236 164.735 428.275 cv
cp
168.415 425.451 mo
168.483 425.519 168.526 425.583 168.545 425.643 cv
168.563 425.703 168.554 425.752 168.516 425.789 cv
168.063 426.243 li
168.908 427.088 li
168.925 427.105 168.935 427.123 168.937 427.143 cv
168.94 427.163 168.935 427.188 168.922 427.217 cv
168.909 427.247 168.888 427.281 168.858 427.319 cv
168.828 427.357 168.786 427.403 168.733 427.456 cv
168.681 427.508 168.637 427.548 168.598 427.578 cv
168.56 427.608 168.527 427.629 168.498 427.641 cv
168.469 427.653 168.446 427.657 168.427 427.653 cv
168.408 427.649 168.39 427.639 168.374 427.623 cv
167.528 426.777 li
165.882 428.424 li
165.857 428.448 165.833 428.466 165.811 428.476 cv
165.788 428.486 165.762 428.49 165.732 428.487 cv
165.702 428.483 165.669 428.469 165.633 428.443 cv
165.597 428.417 165.554 428.38 165.505 428.33 cv
165.465 428.291 165.431 428.255 165.402 428.222 cv
165.374 428.189 165.349 428.156 165.33 428.124 cv
165.31 428.092 165.294 428.059 165.28 428.025 cv
165.266 427.991 165.253 427.954 165.241 427.913 cv
164.23 424.032 li
164.224 424.005 164.225 423.975 164.232 423.942 cv
164.24 423.91 164.255 423.873 164.279 423.833 cv
164.302 423.793 164.335 423.749 164.379 423.699 cv
164.422 423.65 164.475 423.593 164.539 423.53 cv
164.609 423.46 164.672 423.402 164.729 423.355 cv
164.786 423.309 164.834 423.274 164.874 423.25 cv
164.914 423.227 164.949 423.214 164.98 423.21 cv
165.01 423.207 165.035 423.214 165.053 423.233 cv
167.624 425.803 li
168.077 425.35 li
168.113 425.314 168.159 425.304 168.217 425.318 cv
168.275 425.333 168.341 425.377 168.415 425.451 cv
cp
167.089 426.338 mo
164.879 424.128 li
164.873 424.134 li
165.789 427.638 li
167.089 426.338 li
cp
170.539 424.928 mo
170.686 425.075 170.76 425.198 170.76 425.295 cv
170.76 425.393 170.696 425.506 170.568 425.634 cv
170.443 425.758 170.333 425.821 170.238 425.82 cv
170.143 425.82 170.023 425.749 169.88 425.605 cv
169.733 425.458 169.659 425.336 169.659 425.238 cv
169.659 425.141 169.723 425.028 169.851 424.899 cv
169.976 424.775 170.085 424.713 170.181 424.713 cv
170.276 424.713 170.396 424.785 170.539 424.928 cv
cp
173.016 420.527 mo
173.193 420.703 173.336 420.9 173.447 421.119 cv
173.558 421.337 173.62 421.565 173.633 421.802 cv
173.647 422.04 173.605 422.282 173.509 422.529 cv
173.413 422.777 173.248 423.018 173.014 423.252 cv
172.846 423.42 172.677 423.547 172.507 423.634 cv
172.337 423.721 172.166 423.774 171.994 423.792 cv
171.822 423.811 171.649 423.796 171.474 423.747 cv
171.299 423.699 171.121 423.622 170.939 423.517 cv
170.758 423.413 170.574 423.284 170.388 423.13 cv
170.201 422.977 170.011 422.803 169.816 422.608 cv
169.644 422.436 169.479 422.253 169.322 422.058 cv
169.164 421.863 169.027 421.66 168.911 421.449 cv
168.796 421.238 168.706 421.019 168.644 420.793 cv
168.582 420.567 168.559 420.339 168.576 420.109 cv
168.593 419.879 168.656 419.647 168.766 419.413 cv
168.876 419.179 169.045 418.948 169.273 418.72 cv
169.349 418.643 169.432 418.57 169.52 418.5 cv
169.608 418.431 169.693 418.371 169.775 418.32 cv
169.857 418.269 169.93 418.23 169.994 418.204 cv
170.058 418.177 170.104 418.162 170.129 418.159 cv
170.155 418.155 170.179 418.157 170.199 418.163 cv
170.22 418.17 170.24 418.178 170.26 418.19 cv
170.28 418.201 170.3 418.216 170.322 418.233 cv
170.344 418.251 170.37 418.274 170.398 418.303 cv
170.436 418.341 170.467 418.373 170.493 418.401 cv
170.519 418.429 170.537 418.455 170.546 418.479 cv
170.555 418.503 170.559 418.525 170.555 418.544 cv
170.552 418.564 170.542 418.583 170.523 418.602 cv
170.5 418.625 170.462 418.648 170.408 418.673 cv
170.354 418.698 170.29 418.73 170.217 418.768 cv
170.143 418.807 170.059 418.858 169.965 418.924 cv
169.871 418.989 169.771 419.074 169.665 419.18 cv
169.472 419.373 169.346 419.578 169.286 419.796 cv
169.225 420.013 169.217 420.232 169.262 420.453 cv
169.306 420.674 169.395 420.893 169.527 421.11 cv
169.66 421.328 169.818 421.535 170.003 421.732 cv
170.026 421.647 170.055 421.555 170.091 421.457 cv
170.128 421.358 170.173 421.257 170.228 421.152 cv
170.283 421.048 170.347 420.943 170.421 420.839 cv
170.494 420.734 170.581 420.631 170.683 420.529 cv
170.9 420.312 171.113 420.158 171.321 420.068 cv
171.53 419.978 171.732 419.939 171.929 419.952 cv
172.126 419.964 172.315 420.022 172.496 420.124 cv
172.677 420.227 172.851 420.361 173.016 420.527 cv
cp
172.523 421.116 mo
172.403 420.995 172.282 420.898 172.16 420.823 cv
172.037 420.748 171.914 420.705 171.79 420.692 cv
171.665 420.68 171.538 420.701 171.407 420.757 cv
171.277 420.813 171.143 420.909 171.007 421.046 cv
170.93 421.123 170.86 421.206 170.797 421.296 cv
170.734 421.386 170.678 421.479 170.631 421.574 cv
170.583 421.669 170.543 421.766 170.51 421.863 cv
170.477 421.96 170.452 422.055 170.435 422.146 cv
170.703 422.413 170.944 422.62 171.159 422.767 cv
171.373 422.913 171.568 423.008 171.742 423.051 cv
171.916 423.095 172.075 423.092 172.219 423.041 cv
172.363 422.99 172.5 422.9 172.63 422.77 cv
172.763 422.637 172.853 422.497 172.901 422.35 cv
172.948 422.203 172.962 422.055 172.942 421.907 cv
172.922 421.759 172.875 421.617 172.8 421.483 cv
172.726 421.348 172.633 421.225 172.523 421.116 cv
cp
175.371 420.096 mo
175.518 420.243 175.592 420.366 175.592 420.463 cv
175.592 420.561 175.528 420.674 175.4 420.802 cv
175.275 420.926 175.165 420.989 175.07 420.988 cv
174.975 420.988 174.855 420.917 174.712 420.773 cv
174.565 420.626 174.491 420.504 174.491 420.406 cv
174.491 420.309 174.555 420.196 174.683 420.067 cv
174.808 419.943 174.917 419.881 175.013 419.881 cv
175.108 419.881 175.228 419.953 175.371 420.096 cv
cp
178.828 416.865 mo
178.865 416.902 178.895 416.938 178.919 416.972 cv
178.943 417.006 178.96 417.037 178.97 417.066 cv
178.98 417.095 178.982 417.122 178.976 417.147 cv
178.97 417.172 178.957 417.194 178.939 417.212 cv
176.714 419.437 li
176.685 419.466 176.656 419.488 176.627 419.502 cv
176.598 419.517 176.567 419.524 176.535 419.523 cv
176.503 419.522 176.468 419.509 176.43 419.486 cv
176.392 419.462 176.35 419.427 176.304 419.382 cv
176.263 419.341 176.229 419.303 176.201 419.269 cv
176.173 419.234 176.153 419.2 176.14 419.166 cv
176.126 419.131 176.116 419.094 176.108 419.054 cv
176.101 419.015 176.096 418.969 176.095 418.916 cv
176.073 417.285 li
176.068 416.908 176.046 416.588 176.007 416.325 cv
175.967 416.061 175.916 415.837 175.852 415.651 cv
175.789 415.466 175.716 415.313 175.634 415.192 cv
175.551 415.072 175.466 414.966 175.376 414.877 cv
175.287 414.788 175.188 414.719 175.078 414.669 cv
174.968 414.619 174.855 414.592 174.738 414.588 cv
174.621 414.585 174.502 414.608 174.382 414.658 cv
174.261 414.709 174.145 414.789 174.034 414.9 cv
173.903 415.031 173.804 415.165 173.736 415.304 cv
173.668 415.443 173.615 415.573 173.579 415.692 cv
173.543 415.812 173.516 415.916 173.499 416.004 cv
173.482 416.091 173.461 416.148 173.435 416.174 cv
173.42 416.189 173.402 416.198 173.383 416.201 cv
173.363 416.205 173.339 416.201 173.313 416.19 cv
173.287 416.179 173.256 416.16 173.221 416.133 cv
173.186 416.106 173.146 416.071 173.103 416.027 cv
173.072 415.996 173.046 415.968 173.025 415.943 cv
173.004 415.918 172.988 415.895 172.977 415.873 cv
172.965 415.852 172.957 415.829 172.95 415.807 cv
172.944 415.784 172.943 415.749 172.946 415.702 cv
172.949 415.656 172.962 415.583 172.986 415.485 cv
173.01 415.386 173.05 415.273 173.106 415.145 cv
173.161 415.016 173.232 414.884 173.318 414.748 cv
173.404 414.613 173.508 414.484 173.631 414.361 cv
173.826 414.167 174.023 414.024 174.224 413.933 cv
174.425 413.841 174.622 413.795 174.813 413.794 cv
175.005 413.793 175.188 413.832 175.361 413.911 cv
175.536 413.989 175.694 414.1 175.837 414.243 cv
175.965 414.372 176.082 414.511 176.187 414.661 cv
176.291 414.811 176.381 414.997 176.456 415.219 cv
176.531 415.441 176.589 415.712 176.632 416.032 cv
176.674 416.352 176.699 416.745 176.706 417.211 cv
176.734 418.513 li
178.484 416.763 li
178.5 416.747 178.521 416.735 178.546 416.729 cv
178.571 416.723 178.598 416.723 178.628 416.73 cv
178.658 416.738 178.689 416.753 178.723 416.775 cv
178.756 416.798 178.791 416.828 178.828 416.865 cv
cp
0 0 0 .690608 cmyk
f
grestore
gsave
98.8509 521.156 mo
292.942 327.064 li
300.72 334.842 li
106.629 528.934 li
cp
clp
190.366 440.225 mo
190.434 440.293 190.477 440.357 190.496 440.417 cv
190.514 440.477 190.505 440.525 190.468 440.563 cv
190.014 441.016 li
190.86 441.862 li
190.876 441.878 190.886 441.896 190.889 441.916 cv
190.892 441.936 190.887 441.961 190.873 441.991 cv
190.86 442.02 190.839 442.054 190.809 442.093 cv
190.779 442.131 190.737 442.177 190.684 442.23 cv
190.633 442.281 190.588 442.322 190.55 442.352 cv
190.511 442.382 190.478 442.403 190.449 442.415 cv
190.421 442.427 190.397 442.431 190.378 442.427 cv
190.359 442.423 190.342 442.413 190.325 442.396 cv
189.48 441.551 li
187.833 443.197 li
187.808 443.222 187.785 443.239 187.762 443.25 cv
187.739 443.26 187.713 443.263 187.683 443.26 cv
187.653 443.257 187.62 443.243 187.584 443.217 cv
187.548 443.191 187.505 443.153 187.456 443.104 cv
187.417 443.064 187.383 443.028 187.354 442.995 cv
187.325 442.962 187.301 442.93 187.281 442.898 cv
187.261 442.866 187.245 442.833 187.231 442.799 cv
187.218 442.765 187.205 442.727 187.192 442.686 cv
186.181 438.805 li
186.175 438.778 186.176 438.748 186.184 438.716 cv
186.191 438.683 186.207 438.647 186.23 438.607 cv
186.253 438.567 186.287 438.522 186.33 438.473 cv
186.374 438.423 186.427 438.367 186.49 438.303 cv
186.56 438.234 186.623 438.175 186.68 438.129 cv
186.737 438.082 186.786 438.047 186.826 438.024 cv
186.865 438.001 186.901 437.987 186.931 437.984 cv
186.962 437.98 186.986 437.988 187.005 438.007 cv
189.575 440.577 li
190.029 440.123 li
190.064 440.088 190.11 440.078 190.168 440.092 cv
190.226 440.106 190.292 440.151 190.366 440.225 cv
cp
189.04 441.112 mo
186.831 438.902 li
186.824 438.908 li
187.74 442.412 li
189.04 441.112 li
cp
192.49 439.702 mo
192.638 439.849 192.711 439.971 192.711 440.069 cv
192.712 440.166 192.647 440.279 192.519 440.408 cv
192.395 440.532 192.285 440.594 192.189 440.594 cv
192.094 440.594 191.975 440.522 191.831 440.379 cv
191.684 440.232 191.61 440.109 191.61 440.012 cv
191.61 439.914 191.674 439.801 191.803 439.673 cv
191.927 439.549 192.037 439.487 192.132 439.487 cv
192.228 439.487 192.347 439.558 192.49 439.702 cv
cp
194.968 435.3 mo
195.144 435.476 195.287 435.674 195.398 435.892 cv
195.509 436.111 195.571 436.339 195.585 436.576 cv
195.598 436.813 195.557 437.056 195.46 437.303 cv
195.364 437.551 195.199 437.791 194.965 438.025 cv
194.797 438.193 194.628 438.321 194.458 438.408 cv
194.288 438.495 194.118 438.547 193.946 438.566 cv
193.774 438.585 193.6 438.57 193.425 438.521 cv
193.25 438.472 193.072 438.395 192.891 438.291 cv
192.709 438.186 192.525 438.057 192.339 437.904 cv
192.153 437.751 191.962 437.577 191.767 437.382 cv
191.595 437.21 191.43 437.026 191.273 436.832 cv
191.116 436.637 190.979 436.434 190.863 436.223 cv
190.747 436.011 190.658 435.793 190.596 435.567 cv
190.533 435.341 190.511 435.113 190.527 434.883 cv
190.544 434.653 190.607 434.421 190.717 434.186 cv
190.827 433.952 190.996 433.721 191.224 433.493 cv
191.301 433.416 191.383 433.343 191.471 433.274 cv
191.559 433.205 191.644 433.145 191.726 433.094 cv
191.808 433.043 191.881 433.004 191.945 432.977 cv
192.01 432.95 192.055 432.935 192.081 432.932 cv
192.107 432.929 192.13 432.931 192.151 432.937 cv
192.171 432.943 192.192 432.952 192.211 432.963 cv
192.231 432.975 192.252 432.989 192.273 433.007 cv
192.295 433.025 192.321 433.048 192.35 433.077 cv
192.387 433.114 192.419 433.147 192.445 433.175 cv
192.471 433.203 192.488 433.229 192.497 433.253 cv
192.507 433.276 192.51 433.298 192.507 433.318 cv
192.504 433.338 192.493 433.357 192.474 433.375 cv
192.451 433.398 192.413 433.422 192.359 433.447 cv
192.305 433.472 192.242 433.503 192.168 433.542 cv
192.094 433.58 192.01 433.632 191.916 433.697 cv
191.822 433.763 191.722 433.848 191.616 433.954 cv
191.423 434.147 191.297 434.352 191.237 434.569 cv
191.177 434.787 191.169 435.006 191.213 435.227 cv
191.258 435.447 191.346 435.666 191.479 435.884 cv
191.611 436.101 191.77 436.309 191.954 436.505 cv
191.977 436.421 192.006 436.329 192.043 436.23 cv
192.079 436.132 192.124 436.03 192.179 435.926 cv
192.234 435.821 192.298 435.717 192.372 435.612 cv
192.445 435.508 192.533 435.404 192.634 435.303 cv
192.852 435.085 193.065 434.932 193.273 434.842 cv
193.481 434.752 193.683 434.713 193.88 434.725 cv
194.077 434.738 194.266 434.795 194.447 434.898 cv
194.628 435 194.802 435.135 194.968 435.3 cv
cp
194.475 435.889 mo
194.354 435.769 194.233 435.671 194.111 435.597 cv
193.988 435.522 193.865 435.478 193.741 435.466 cv
193.617 435.453 193.489 435.475 193.359 435.531 cv
193.228 435.587 193.094 435.683 192.958 435.82 cv
192.881 435.896 192.811 435.979 192.748 436.07 cv
192.685 436.16 192.63 436.253 192.582 436.348 cv
192.535 436.443 192.494 436.539 192.461 436.637 cv
192.428 436.734 192.403 436.828 192.387 436.919 cv
192.654 437.187 192.895 437.394 193.11 437.54 cv
193.325 437.686 193.519 437.781 193.693 437.825 cv
193.867 437.869 194.026 437.865 194.17 437.815 cv
194.314 437.764 194.451 437.673 194.582 437.543 cv
194.714 437.41 194.804 437.271 194.852 437.123 cv
194.9 436.976 194.913 436.829 194.893 436.681 cv
194.874 436.533 194.826 436.391 194.752 436.256 cv
194.677 436.121 194.585 435.999 194.475 435.889 cv
cp
197.322 434.87 mo
197.47 435.017 197.543 435.139 197.543 435.237 cv
197.544 435.334 197.479 435.447 197.351 435.576 cv
197.227 435.7 197.117 435.762 197.021 435.762 cv
196.926 435.762 196.807 435.69 196.663 435.547 cv
196.516 435.4 196.442 435.277 196.442 435.18 cv
196.442 435.082 196.506 434.969 196.635 434.841 cv
196.759 434.717 196.869 434.655 196.964 434.655 cv
197.06 434.655 197.179 434.726 197.322 434.87 cv
cp
200.779 431.639 mo
200.816 431.676 200.847 431.711 200.87 431.745 cv
200.894 431.779 200.911 431.811 200.921 431.84 cv
200.932 431.869 200.934 431.896 200.927 431.921 cv
200.921 431.945 200.909 431.967 200.89 431.986 cv
198.665 434.21 li
198.636 434.24 198.607 434.261 198.578 434.276 cv
198.549 434.29 198.519 434.297 198.487 434.296 cv
198.455 434.295 198.419 434.283 198.381 434.259 cv
198.343 434.235 198.301 434.201 198.256 434.155 cv
198.214 434.114 198.18 434.076 198.152 434.042 cv
198.124 434.008 198.104 433.974 198.091 433.939 cv
198.078 433.905 198.067 433.868 198.06 433.828 cv
198.052 433.788 198.048 433.742 198.046 433.69 cv
198.024 432.058 li
198.019 431.682 197.997 431.362 197.958 431.098 cv
197.919 430.835 197.867 430.61 197.804 430.425 cv
197.74 430.24 197.667 430.087 197.585 429.966 cv
197.503 429.845 197.417 429.74 197.328 429.651 cv
197.239 429.562 197.139 429.492 197.029 429.442 cv
196.919 429.392 196.806 429.365 196.689 429.362 cv
196.572 429.358 196.454 429.382 196.333 429.432 cv
196.212 429.482 196.096 429.563 195.985 429.674 cv
195.855 429.804 195.755 429.939 195.687 430.078 cv
195.619 430.217 195.567 430.346 195.53 430.466 cv
195.494 430.586 195.467 430.689 195.45 430.777 cv
195.433 430.865 195.412 430.922 195.386 430.947 cv
195.371 430.962 195.354 430.971 195.334 430.975 cv
195.314 430.978 195.291 430.975 195.264 430.963 cv
195.238 430.952 195.208 430.933 195.172 430.906 cv
195.137 430.88 195.098 430.844 195.054 430.801 cv
195.023 430.77 194.997 430.742 194.976 430.717 cv
194.956 430.692 194.939 430.669 194.928 430.647 cv
194.917 430.625 194.908 430.603 194.902 430.58 cv
194.895 430.557 194.894 430.523 194.897 430.476 cv
194.9 430.429 194.913 430.357 194.937 430.258 cv
194.961 430.16 195.001 430.047 195.057 429.918 cv
195.113 429.79 195.184 429.658 195.27 429.522 cv
195.356 429.386 195.46 429.257 195.582 429.135 cv
195.777 428.94 195.975 428.797 196.176 428.706 cv
196.376 428.615 196.573 428.569 196.764 428.568 cv
196.956 428.567 197.139 428.606 197.313 428.684 cv
197.487 428.763 197.645 428.874 197.788 429.017 cv
197.917 429.145 198.033 429.285 198.138 429.435 cv
198.243 429.585 198.332 429.771 198.407 429.993 cv
198.482 430.215 198.54 430.485 198.583 430.806 cv
198.626 431.126 198.65 431.519 198.657 431.985 cv
198.685 433.287 li
200.435 431.537 li
200.452 431.52 200.472 431.509 200.497 431.503 cv
200.522 431.496 200.549 431.497 200.579 431.504 cv
200.609 431.511 200.641 431.526 200.674 431.549 cv
200.707 431.572 200.742 431.602 200.779 431.639 cv
cp
201.524 428.211 mo
201.605 428.292 201.652 428.357 201.664 428.407 cv
201.677 428.457 201.665 428.499 201.63 428.535 cv
200.33 429.835 li
200.293 429.872 200.249 429.884 200.198 429.87 cv
200.147 429.857 200.082 429.811 200.003 429.732 cv
199.924 429.653 199.879 429.589 199.866 429.539 cv
199.854 429.489 199.866 429.446 199.904 429.408 cv
201.204 428.108 li
201.22 428.092 201.238 428.08 201.258 428.072 cv
201.278 428.065 201.301 428.066 201.328 428.074 cv
201.355 428.082 201.385 428.097 201.417 428.119 cv
201.449 428.141 201.485 428.172 201.524 428.211 cv
cp
205.204 425.387 mo
205.272 425.455 205.315 425.519 205.334 425.579 cv
205.352 425.639 205.343 425.687 205.305 425.725 cv
204.852 426.178 li
205.697 427.024 li
205.714 427.04 205.724 427.059 205.727 427.079 cv
205.729 427.099 205.724 427.123 205.711 427.153 cv
205.698 427.183 205.677 427.216 205.647 427.255 cv
205.617 427.293 205.575 427.339 205.522 427.392 cv
205.471 427.443 205.426 427.484 205.387 427.514 cv
205.349 427.544 205.316 427.565 205.287 427.577 cv
205.259 427.589 205.235 427.593 205.216 427.589 cv
205.197 427.585 205.179 427.575 205.163 427.558 cv
204.317 426.713 li
202.671 428.359 li
202.646 428.384 202.622 428.401 202.6 428.412 cv
202.577 428.422 202.551 428.425 202.521 428.422 cv
202.491 428.419 202.458 428.405 202.422 428.379 cv
202.386 428.353 202.343 428.315 202.294 428.266 cv
202.255 428.227 202.221 428.19 202.192 428.158 cv
202.163 428.124 202.138 428.092 202.119 428.06 cv
202.099 428.028 202.083 427.995 202.069 427.961 cv
202.056 427.927 202.043 427.89 202.03 427.848 cv
201.019 423.967 li
201.013 423.94 201.014 423.911 201.021 423.878 cv
201.029 423.845 201.044 423.809 201.068 423.769 cv
201.091 423.729 201.125 423.684 201.168 423.635 cv
201.211 423.585 201.265 423.529 201.328 423.465 cv
201.398 423.396 201.461 423.338 201.518 423.291 cv
201.575 423.244 201.623 423.21 201.663 423.186 cv
201.703 423.163 201.738 423.149 201.769 423.146 cv
201.799 423.143 201.824 423.15 201.842 423.169 cv
204.413 425.739 li
204.866 425.286 li
204.902 425.25 204.948 425.24 205.006 425.254 cv
205.064 425.268 205.13 425.313 205.204 425.387 cv
cp
203.878 426.274 mo
201.669 424.064 li
201.662 424.07 li
202.578 427.574 li
203.878 426.274 li
cp
207.328 424.864 mo
207.475 425.011 207.549 425.134 207.549 425.231 cv
207.549 425.329 207.485 425.441 207.357 425.57 cv
207.232 425.694 207.123 425.756 207.027 425.756 cv
206.932 425.756 206.813 425.684 206.669 425.541 cv
206.522 425.394 206.448 425.271 206.448 425.174 cv
206.448 425.076 206.512 424.964 206.641 424.835 cv
206.765 424.711 206.875 424.649 206.97 424.649 cv
207.065 424.649 207.185 424.721 207.328 424.864 cv
cp
209.806 420.462 mo
209.982 420.639 210.125 420.836 210.236 421.054 cv
210.347 421.273 210.409 421.501 210.423 421.738 cv
210.436 421.975 210.395 422.218 210.298 422.465 cv
210.202 422.713 210.037 422.954 209.803 423.188 cv
209.635 423.355 209.466 423.483 209.296 423.57 cv
209.126 423.657 208.956 423.71 208.783 423.728 cv
208.612 423.747 208.438 423.732 208.263 423.683 cv
208.088 423.634 207.91 423.558 207.728 423.453 cv
207.547 423.348 207.363 423.219 207.177 423.066 cv
206.99 422.913 206.8 422.739 206.605 422.544 cv
206.433 422.372 206.268 422.189 206.111 421.994 cv
205.953 421.799 205.817 421.596 205.701 421.385 cv
205.585 421.173 205.496 420.955 205.434 420.729 cv
205.371 420.503 205.349 420.275 205.365 420.045 cv
205.382 419.815 205.445 419.583 205.555 419.349 cv
205.665 419.115 205.834 418.883 206.062 418.655 cv
206.139 418.579 206.221 418.506 206.309 418.436 cv
206.397 418.367 206.482 418.307 206.564 418.256 cv
206.646 418.205 206.719 418.166 206.783 418.139 cv
206.848 418.112 206.893 418.097 206.919 418.094 cv
206.945 418.091 206.968 418.093 206.988 418.099 cv
207.009 418.105 207.029 418.114 207.049 418.125 cv
207.069 418.137 207.09 418.151 207.111 418.169 cv
207.133 418.187 207.159 418.21 207.188 418.239 cv
207.225 418.276 207.257 418.309 207.283 418.337 cv
207.309 418.365 207.326 418.391 207.335 418.415 cv
207.345 418.439 207.348 418.46 207.345 418.48 cv
207.342 418.5 207.331 418.519 207.312 418.537 cv
207.289 418.56 207.251 418.584 207.197 418.609 cv
207.143 418.634 207.079 418.666 207.006 418.704 cv
206.932 418.742 206.848 418.794 206.754 418.859 cv
206.66 418.925 206.56 419.01 206.454 419.116 cv
206.261 419.309 206.135 419.514 206.075 419.731 cv
206.014 419.949 206.007 420.168 206.051 420.389 cv
206.096 420.609 206.184 420.828 206.317 421.046 cv
206.449 421.263 206.607 421.471 206.792 421.667 cv
206.815 421.583 206.844 421.491 206.88 421.393 cv
206.917 421.294 206.962 421.193 207.017 421.088 cv
207.072 420.983 207.136 420.879 207.21 420.774 cv
207.283 420.67 207.371 420.567 207.472 420.465 cv
207.69 420.248 207.902 420.094 208.111 420.004 cv
208.319 419.914 208.521 419.875 208.718 419.887 cv
208.915 419.9 209.104 419.957 209.285 420.06 cv
209.466 420.162 209.64 420.297 209.806 420.462 cv
cp
209.313 421.051 mo
209.192 420.931 209.071 420.833 208.949 420.759 cv
208.826 420.684 208.703 420.641 208.579 420.628 cv
208.454 420.615 208.327 420.637 208.196 420.693 cv
208.066 420.749 207.932 420.845 207.796 420.982 cv
207.719 421.058 207.649 421.142 207.586 421.232 cv
207.523 421.322 207.467 421.415 207.42 421.51 cv
207.372 421.605 207.332 421.701 207.299 421.799 cv
207.266 421.896 207.241 421.99 207.225 422.082 cv
207.492 422.349 207.733 422.556 207.948 422.702 cv
208.162 422.849 208.357 422.944 208.531 422.987 cv
208.705 423.031 208.864 423.027 209.008 422.977 cv
209.152 422.926 209.289 422.836 209.42 422.705 cv
209.552 422.573 209.642 422.433 209.69 422.286 cv
209.737 422.139 209.751 421.991 209.731 421.843 cv
209.712 421.695 209.664 421.553 209.59 421.418 cv
209.515 421.284 209.423 421.161 209.313 421.051 cv
cp
212.16 420.032 mo
212.307 420.179 212.381 420.302 212.381 420.399 cv
212.381 420.497 212.317 420.609 212.189 420.738 cv
212.064 420.862 211.955 420.924 211.859 420.924 cv
211.764 420.924 211.645 420.852 211.501 420.709 cv
211.354 420.562 211.28 420.439 211.28 420.342 cv
211.28 420.244 211.344 420.132 211.473 420.003 cv
211.597 419.879 211.707 419.817 211.802 419.817 cv
211.898 419.817 212.017 419.888 212.16 420.032 cv
cp
214.656 415.917 mo
214.841 416.101 214.975 416.299 215.059 416.512 cv
215.143 416.724 215.177 416.943 215.163 417.169 cv
215.148 417.395 215.081 417.624 214.962 417.857 cv
214.843 418.09 214.673 418.317 214.451 418.539 cv
214.316 418.674 214.18 418.789 214.041 418.884 cv
213.902 418.98 213.773 419.058 213.652 419.119 cv
213.531 419.18 213.424 419.225 213.332 419.253 cv
213.24 419.282 213.179 419.296 213.149 419.297 cv
213.119 419.298 213.093 419.296 213.07 419.29 cv
213.047 419.284 213.023 419.273 212.996 419.259 cv
212.969 419.245 212.939 419.224 212.906 419.197 cv
212.873 419.171 212.835 419.135 212.792 419.092 cv
212.718 419.018 212.673 418.959 212.66 418.915 cv
212.646 418.872 212.652 418.836 212.68 418.808 cv
212.699 418.789 212.753 418.768 212.843 418.745 cv
212.932 418.721 213.04 418.684 213.166 418.634 cv
213.292 418.584 213.431 418.517 213.581 418.432 cv
213.732 418.347 213.88 418.232 214.025 418.088 cv
214.165 417.947 214.27 417.806 214.341 417.665 cv
214.412 417.523 214.452 417.384 214.46 417.248 cv
214.467 417.111 214.445 416.981 214.393 416.856 cv
214.341 416.732 214.263 416.618 214.159 416.514 cv
214.045 416.4 213.919 416.32 213.782 416.275 cv
213.645 416.229 213.498 416.218 213.343 416.24 cv
213.188 416.262 213.028 416.32 212.863 416.415 cv
212.699 416.509 212.534 416.638 212.369 416.803 cv
211.975 417.197 li
211.958 417.214 211.937 417.227 211.914 417.236 cv
211.891 417.245 211.865 417.247 211.837 417.242 cv
211.809 417.238 211.777 417.226 211.743 417.206 cv
211.709 417.187 211.67 417.156 211.627 417.113 cv
211.588 417.074 211.559 417.038 211.539 417.006 cv
211.519 416.974 211.508 416.945 211.504 416.918 cv
211.499 416.891 211.501 416.867 211.508 416.845 cv
211.516 416.823 211.529 416.803 211.547 416.784 cv
211.899 416.433 li
212.036 416.296 212.141 416.156 212.214 416.012 cv
212.288 415.868 212.329 415.725 212.339 415.583 cv
212.348 415.441 212.327 415.303 212.275 415.171 cv
212.223 415.038 212.14 414.915 212.026 414.801 cv
211.943 414.718 211.85 414.652 211.748 414.603 cv
211.645 414.554 211.539 414.529 211.429 414.527 cv
211.319 414.525 211.207 414.549 211.091 414.601 cv
210.975 414.653 210.862 414.733 210.752 414.843 cv
210.632 414.963 210.54 415.092 210.476 415.228 cv
210.413 415.365 210.362 415.494 210.325 415.614 cv
210.288 415.734 210.262 415.839 210.247 415.927 cv
210.231 416.015 210.213 416.069 210.193 416.09 cv
210.178 416.105 210.163 416.115 210.146 416.121 cv
210.13 416.127 210.11 416.126 210.087 416.118 cv
210.064 416.11 210.037 416.093 210.006 416.068 cv
209.975 416.043 209.937 416.008 209.891 415.963 cv
209.86 415.932 209.834 415.903 209.812 415.877 cv
209.79 415.851 209.774 415.827 209.762 415.803 cv
209.751 415.779 209.742 415.755 209.736 415.733 cv
209.73 415.71 209.727 415.679 209.727 415.64 cv
209.727 415.6 209.738 415.532 209.761 415.435 cv
209.784 415.337 209.821 415.227 209.873 415.102 cv
209.925 414.978 209.995 414.846 210.086 414.706 cv
210.176 414.566 210.287 414.43 210.419 414.298 cv
210.606 414.111 210.793 413.971 210.982 413.878 cv
211.17 413.785 211.355 413.735 211.536 413.727 cv
211.717 413.72 211.891 413.754 212.059 413.828 cv
212.227 413.903 212.384 414.013 212.531 414.16 cv
212.657 414.287 212.758 414.421 212.834 414.562 cv
212.909 414.704 212.957 414.849 212.976 414.997 cv
212.996 415.145 212.988 415.296 212.954 415.448 cv
212.92 415.6 212.853 415.749 212.753 415.894 cv
212.759 415.9 li
212.912 415.776 213.074 415.684 213.243 415.624 cv
213.413 415.564 213.581 415.534 213.747 415.534 cv
213.912 415.534 214.074 415.566 214.231 415.631 cv
214.388 415.695 214.53 415.79 214.656 415.917 cv
cp
0 0 0 .690608 cmyk
f
grestore
gsave
135.319 521.412 mo
329.86 326.871 li
337.638 334.65 li
143.097 529.191 li
cp
clp
227.027 440.289 mo
227.095 440.357 227.138 440.421 227.157 440.481 cv
227.175 440.541 227.166 440.589 227.128 440.627 cv
226.675 441.08 li
227.52 441.926 li
227.537 441.942 227.546 441.961 227.549 441.981 cv
227.552 442.001 227.547 442.025 227.534 442.055 cv
227.521 442.085 227.499 442.119 227.469 442.157 cv
227.439 442.195 227.398 442.241 227.344 442.294 cv
227.293 442.346 227.249 442.386 227.21 442.416 cv
227.172 442.446 227.139 442.467 227.11 442.479 cv
227.081 442.491 227.058 442.495 227.039 442.491 cv
227.02 442.487 227.002 442.477 226.986 442.46 cv
226.14 441.615 li
224.494 443.261 li
224.469 443.286 224.445 443.304 224.423 443.314 cv
224.4 443.324 224.374 443.328 224.344 443.324 cv
224.314 443.321 224.281 443.307 224.245 443.281 cv
224.209 443.255 224.166 443.217 224.117 443.168 cv
224.077 443.129 224.043 443.093 224.014 443.06 cv
223.985 443.027 223.961 442.994 223.941 442.962 cv
223.922 442.93 223.905 442.897 223.892 442.863 cv
223.878 442.829 223.865 442.792 223.853 442.75 cv
222.842 438.87 li
222.836 438.842 222.836 438.813 222.844 438.78 cv
222.852 438.748 222.867 438.711 222.891 438.671 cv
222.914 438.631 222.947 438.587 222.991 438.537 cv
223.034 438.487 223.087 438.431 223.151 438.368 cv
223.221 438.298 223.284 438.24 223.341 438.193 cv
223.398 438.147 223.446 438.112 223.486 438.088 cv
223.526 438.065 223.561 438.051 223.592 438.048 cv
223.622 438.045 223.647 438.052 223.665 438.071 cv
226.236 440.641 li
226.689 440.188 li
226.724 440.152 226.771 440.142 226.829 440.156 cv
226.887 440.171 226.953 440.215 227.027 440.289 cv
cp
225.701 441.176 mo
223.491 438.966 li
223.485 438.972 li
224.4 442.476 li
225.701 441.176 li
cp
229.151 439.766 mo
229.298 439.913 229.372 440.036 229.372 440.133 cv
229.372 440.231 229.308 440.344 229.18 440.472 cv
229.055 440.596 228.945 440.658 228.85 440.658 cv
228.755 440.658 228.635 440.587 228.492 440.443 cv
228.345 440.296 228.271 440.174 228.271 440.076 cv
228.271 439.979 228.335 439.866 228.463 439.737 cv
228.588 439.613 228.697 439.551 228.793 439.551 cv
228.888 439.551 229.008 439.623 229.151 439.766 cv
cp
231.628 435.365 mo
231.805 435.541 231.948 435.738 232.059 435.957 cv
232.17 436.175 232.232 436.403 232.245 436.64 cv
232.259 436.877 232.217 437.12 232.121 437.367 cv
232.025 437.615 231.859 437.856 231.626 438.09 cv
231.458 438.257 231.289 438.385 231.119 438.472 cv
230.949 438.559 230.778 438.612 230.606 438.63 cv
230.434 438.649 230.261 438.634 230.086 438.585 cv
229.911 438.536 229.732 438.46 229.551 438.355 cv
229.37 438.25 229.186 438.121 229 437.968 cv
228.813 437.815 228.623 437.641 228.428 437.446 cv
228.256 437.274 228.091 437.091 227.934 436.896 cv
227.776 436.701 227.639 436.498 227.523 436.287 cv
227.407 436.075 227.318 435.857 227.256 435.631 cv
227.194 435.405 227.171 435.177 227.188 434.947 cv
227.205 434.717 227.268 434.485 227.378 434.251 cv
227.488 434.017 227.657 433.785 227.885 433.557 cv
227.961 433.481 228.044 433.408 228.132 433.338 cv
228.22 433.269 228.305 433.209 228.387 433.158 cv
228.469 433.107 228.542 433.068 228.606 433.041 cv
228.67 433.014 228.715 432.999 228.741 432.996 cv
228.767 432.993 228.791 432.995 228.811 433.001 cv
228.832 433.007 228.852 433.016 228.872 433.028 cv
228.892 433.039 228.912 433.054 228.934 433.071 cv
228.956 433.089 228.981 433.112 229.01 433.141 cv
229.048 433.179 229.079 433.211 229.105 433.239 cv
229.131 433.267 229.149 433.293 229.158 433.317 cv
229.167 433.341 229.171 433.362 229.167 433.382 cv
229.164 433.402 229.153 433.421 229.135 433.44 cv
229.112 433.462 229.074 433.486 229.02 433.511 cv
228.966 433.536 228.902 433.568 228.829 433.606 cv
228.755 433.645 228.671 433.696 228.577 433.761 cv
228.482 433.827 228.383 433.912 228.277 434.018 cv
228.084 434.211 227.958 434.416 227.897 434.634 cv
227.837 434.851 227.829 435.07 227.874 435.291 cv
227.918 435.511 228.007 435.731 228.139 435.948 cv
228.272 436.166 228.43 436.373 228.615 436.57 cv
228.637 436.485 228.667 436.393 228.703 436.295 cv
228.739 436.196 228.785 436.095 228.84 435.99 cv
228.895 435.886 228.959 435.781 229.032 435.676 cv
229.106 435.572 229.193 435.469 229.295 435.367 cv
229.512 435.15 229.725 434.996 229.933 434.906 cv
230.141 434.816 230.344 434.777 230.541 434.79 cv
230.738 434.802 230.927 434.859 231.108 434.962 cv
231.289 435.065 231.463 435.199 231.628 435.365 cv
cp
231.135 435.953 mo
231.015 435.833 230.894 435.736 230.771 435.661 cv
230.649 435.586 230.526 435.543 230.401 435.53 cv
230.277 435.517 230.15 435.539 230.019 435.595 cv
229.889 435.651 229.755 435.747 229.618 435.884 cv
229.542 435.96 229.472 436.044 229.409 436.134 cv
229.346 436.224 229.29 436.317 229.243 436.412 cv
229.195 436.507 229.155 436.604 229.122 436.701 cv
229.089 436.798 229.064 436.893 229.047 436.984 cv
229.315 437.251 229.556 437.458 229.771 437.604 cv
229.985 437.751 230.18 437.846 230.354 437.889 cv
230.528 437.933 230.687 437.929 230.831 437.879 cv
230.975 437.828 231.112 437.738 231.242 437.607 cv
231.375 437.475 231.465 437.335 231.512 437.188 cv
231.56 437.041 231.574 436.893 231.554 436.745 cv
231.534 436.597 231.487 436.455 231.412 436.32 cv
231.338 436.186 231.245 436.063 231.135 435.953 cv
cp
233.983 434.934 mo
234.13 435.081 234.204 435.204 234.204 435.301 cv
234.204 435.399 234.14 435.512 234.012 435.64 cv
233.887 435.764 233.777 435.826 233.682 435.826 cv
233.587 435.826 233.467 435.755 233.324 435.611 cv
233.177 435.464 233.103 435.342 233.103 435.244 cv
233.103 435.147 233.167 435.034 233.295 434.905 cv
233.42 434.781 233.529 434.719 233.625 434.719 cv
233.72 434.719 233.84 434.791 233.983 434.934 cv
cp
236.479 430.819 mo
236.664 431.003 236.798 431.201 236.882 431.414 cv
236.965 431.626 237 431.845 236.986 432.071 cv
236.971 432.297 236.904 432.526 236.785 432.759 cv
236.666 432.992 236.496 433.219 236.274 433.441 cv
236.139 433.576 236.003 433.691 235.864 433.786 cv
235.725 433.882 235.596 433.96 235.474 434.021 cv
235.353 434.083 235.247 434.127 235.155 434.155 cv
235.063 434.184 235.002 434.198 234.972 434.199 cv
234.942 434.201 234.916 434.198 234.893 434.192 cv
234.87 434.186 234.845 434.175 234.819 434.161 cv
234.792 434.147 234.762 434.126 234.729 434.099 cv
234.696 434.073 234.658 434.038 234.615 433.994 cv
234.54 433.92 234.496 433.861 234.482 433.817 cv
234.468 433.774 234.475 433.738 234.503 433.71 cv
234.522 433.691 234.576 433.67 234.665 433.647 cv
234.755 433.623 234.862 433.587 234.989 433.536 cv
235.115 433.486 235.253 433.419 235.404 433.334 cv
235.555 433.249 235.703 433.134 235.847 432.99 cv
235.988 432.849 236.093 432.708 236.164 432.567 cv
236.235 432.425 236.274 432.286 236.282 432.15 cv
236.29 432.013 236.268 431.883 236.216 431.758 cv
236.164 431.634 236.086 431.52 235.982 431.416 cv
235.868 431.302 235.742 431.222 235.605 431.177 cv
235.467 431.131 235.321 431.12 235.166 431.142 cv
235.011 431.164 234.851 431.223 234.686 431.317 cv
234.521 431.411 234.357 431.54 234.192 431.705 cv
233.797 432.099 li
233.78 432.116 233.76 432.129 233.737 432.138 cv
233.714 432.147 233.688 432.149 233.66 432.145 cv
233.631 432.14 233.6 432.128 233.566 432.109 cv
233.532 432.089 233.493 432.058 233.45 432.015 cv
233.411 431.976 233.381 431.94 233.362 431.908 cv
233.342 431.876 233.33 431.847 233.326 431.82 cv
233.322 431.793 233.324 431.769 233.331 431.747 cv
233.339 431.725 233.352 431.705 233.37 431.687 cv
233.721 431.335 li
233.858 431.198 233.963 431.058 234.037 430.914 cv
234.111 430.77 234.152 430.627 234.161 430.485 cv
234.171 430.343 234.149 430.205 234.098 430.073 cv
234.046 429.94 233.963 429.817 233.849 429.703 cv
233.766 429.62 233.673 429.554 233.57 429.505 cv
233.468 429.457 233.362 429.431 233.252 429.429 cv
233.142 429.427 233.029 429.451 232.913 429.503 cv
232.798 429.555 232.685 429.635 232.575 429.745 cv
232.455 429.865 232.363 429.994 232.299 430.13 cv
232.235 430.267 232.185 430.396 232.148 430.516 cv
232.111 430.636 232.085 430.741 232.069 430.829 cv
232.054 430.917 232.036 430.971 232.015 430.992 cv
232.001 431.007 231.985 431.017 231.969 431.023 cv
231.952 431.029 231.933 431.028 231.91 431.02 cv
231.887 431.012 231.86 430.995 231.829 430.97 cv
231.798 430.945 231.76 430.91 231.714 430.865 cv
231.683 430.834 231.657 430.805 231.635 430.779 cv
231.613 430.753 231.597 430.729 231.585 430.705 cv
231.574 430.681 231.565 430.658 231.559 430.635 cv
231.553 430.612 231.549 430.581 231.549 430.542 cv
231.549 430.502 231.561 430.434 231.584 430.337 cv
231.606 430.239 231.644 430.129 231.695 430.004 cv
231.747 429.88 231.818 429.748 231.908 429.608 cv
231.998 429.468 232.11 429.332 232.242 429.2 cv
232.429 429.013 232.616 428.874 232.804 428.78 cv
232.993 428.687 233.178 428.637 233.359 428.63 cv
233.54 428.622 233.714 428.656 233.882 428.73 cv
234.05 428.805 234.207 428.915 234.354 429.062 cv
234.48 429.189 234.581 429.323 234.656 429.464 cv
234.732 429.606 234.779 429.751 234.799 429.899 cv
234.818 430.047 234.811 430.198 234.777 430.35 cv
234.742 430.502 234.676 430.651 234.576 430.796 cv
234.582 430.802 li
234.735 430.678 234.897 430.586 235.066 430.526 cv
235.236 430.466 235.404 430.436 235.569 430.436 cv
235.735 430.436 235.896 430.469 236.054 430.533 cv
236.211 430.597 236.353 430.692 236.479 430.819 cv
cp
238.185 428.275 mo
238.266 428.356 238.312 428.421 238.325 428.471 cv
238.337 428.521 238.326 428.564 238.291 428.599 cv
236.991 429.899 li
236.953 429.936 236.909 429.948 236.858 429.935 cv
236.807 429.921 236.743 429.875 236.664 429.796 cv
236.585 429.717 236.539 429.653 236.527 429.603 cv
236.514 429.553 236.527 429.51 236.564 429.473 cv
237.864 428.172 li
237.881 428.156 237.899 428.144 237.919 428.137 cv
237.939 428.129 237.962 428.13 237.989 428.138 cv
238.016 428.147 238.045 428.162 238.077 428.183 cv
238.11 428.205 238.145 428.236 238.185 428.275 cv
cp
241.865 425.451 mo
241.933 425.519 241.976 425.583 241.994 425.643 cv
242.013 425.703 242.003 425.752 241.966 425.789 cv
241.512 426.243 li
242.358 427.088 li
242.375 427.105 242.384 427.123 242.387 427.143 cv
242.39 427.163 242.385 427.188 242.372 427.217 cv
242.359 427.247 242.337 427.281 242.307 427.319 cv
242.277 427.357 242.236 427.403 242.182 427.456 cv
242.131 427.508 242.086 427.548 242.048 427.578 cv
242.01 427.608 241.976 427.629 241.948 427.641 cv
241.919 427.653 241.895 427.657 241.877 427.653 cv
241.858 427.649 241.84 427.639 241.824 427.623 cv
240.978 426.777 li
239.331 428.424 li
239.307 428.448 239.283 428.466 239.26 428.476 cv
239.238 428.486 239.212 428.49 239.182 428.487 cv
239.152 428.483 239.119 428.469 239.083 428.443 cv
239.047 428.417 239.004 428.38 238.954 428.33 cv
238.915 428.291 238.881 428.255 238.852 428.222 cv
238.823 428.189 238.799 428.156 238.779 428.124 cv
238.76 428.092 238.743 428.059 238.73 428.025 cv
238.716 427.991 238.703 427.954 238.691 427.913 cv
237.68 424.032 li
237.673 424.005 237.674 423.975 237.682 423.942 cv
237.689 423.91 237.705 423.873 237.728 423.833 cv
237.752 423.793 237.785 423.749 237.829 423.699 cv
237.872 423.65 237.925 423.593 237.989 423.53 cv
238.058 423.46 238.122 423.402 238.178 423.355 cv
238.236 423.309 238.284 423.274 238.324 423.25 cv
238.364 423.227 238.399 423.214 238.43 423.21 cv
238.46 423.207 238.484 423.214 238.503 423.233 cv
241.073 425.803 li
241.527 425.35 li
241.562 425.314 241.609 425.304 241.667 425.318 cv
241.724 425.333 241.79 425.377 241.865 425.451 cv
cp
240.539 426.338 mo
238.329 424.128 li
238.323 424.134 li
239.238 427.638 li
240.539 426.338 li
cp
243.989 424.928 mo
244.136 425.075 244.21 425.198 244.21 425.295 cv
244.21 425.393 244.146 425.506 244.017 425.634 cv
243.893 425.758 243.783 425.821 243.688 425.82 cv
243.592 425.82 243.473 425.749 243.33 425.605 cv
243.182 425.458 243.109 425.336 243.109 425.238 cv
243.109 425.141 243.173 425.028 243.301 424.899 cv
243.425 424.775 243.535 424.713 243.631 424.713 cv
243.726 424.713 243.845 424.785 243.989 424.928 cv
cp
246.466 420.527 mo
246.642 420.703 246.786 420.9 246.897 421.119 cv
247.007 421.337 247.07 421.565 247.083 421.802 cv
247.097 422.04 247.055 422.282 246.959 422.529 cv
246.863 422.777 246.697 423.018 246.463 423.252 cv
246.296 423.42 246.127 423.547 245.957 423.634 cv
245.787 423.721 245.616 423.774 245.444 423.792 cv
245.272 423.811 245.099 423.796 244.924 423.747 cv
244.749 423.699 244.57 423.622 244.389 423.517 cv
244.208 423.413 244.024 423.284 243.837 423.13 cv
243.651 422.977 243.46 422.803 243.266 422.608 cv
243.094 422.436 242.929 422.253 242.771 422.058 cv
242.614 421.863 242.477 421.66 242.361 421.449 cv
242.245 421.238 242.156 421.019 242.094 420.793 cv
242.032 420.567 242.009 420.339 242.026 420.109 cv
242.042 419.879 242.106 419.647 242.216 419.413 cv
242.325 419.179 242.494 418.948 242.722 418.72 cv
242.799 418.643 242.882 418.57 242.97 418.5 cv
243.058 418.431 243.143 418.371 243.225 418.32 cv
243.307 418.269 243.38 418.23 243.444 418.204 cv
243.508 418.177 243.553 418.162 243.579 418.159 cv
243.605 418.155 243.628 418.157 243.649 418.163 cv
243.67 418.17 243.69 418.178 243.71 418.19 cv
243.729 418.201 243.75 418.216 243.772 418.233 cv
243.794 418.251 243.819 418.274 243.848 418.303 cv
243.886 418.341 243.917 418.373 243.943 418.401 cv
243.969 418.429 243.987 418.455 243.996 418.479 cv
244.005 418.503 244.008 418.525 244.005 418.544 cv
244.002 418.564 243.991 418.583 243.973 418.602 cv
243.95 418.625 243.911 418.648 243.858 418.673 cv
243.804 418.698 243.74 418.73 243.666 418.768 cv
243.593 418.807 243.509 418.858 243.415 418.924 cv
243.32 418.989 243.22 419.074 243.115 419.18 cv
242.922 419.373 242.795 419.578 242.735 419.796 cv
242.675 420.013 242.667 420.232 242.712 420.453 cv
242.756 420.674 242.845 420.893 242.977 421.11 cv
243.11 421.328 243.268 421.535 243.452 421.732 cv
243.475 421.647 243.505 421.555 243.541 421.457 cv
243.577 421.358 243.623 421.257 243.678 421.152 cv
243.733 421.048 243.797 420.943 243.87 420.839 cv
243.944 420.734 244.031 420.631 244.133 420.529 cv
244.35 420.312 244.563 420.158 244.771 420.068 cv
244.979 419.978 245.182 419.939 245.379 419.952 cv
245.575 419.964 245.764 420.022 245.946 420.124 cv
246.127 420.227 246.3 420.361 246.466 420.527 cv
cp
245.973 421.116 mo
245.853 420.995 245.732 420.898 245.609 420.823 cv
245.487 420.748 245.364 420.705 245.239 420.692 cv
245.115 420.68 244.988 420.701 244.857 420.757 cv
244.727 420.813 244.593 420.909 244.456 421.046 cv
244.38 421.123 244.31 421.206 244.247 421.296 cv
244.184 421.386 244.128 421.479 244.081 421.574 cv
244.033 421.669 243.993 421.766 243.96 421.863 cv
243.926 421.96 243.902 422.055 243.885 422.146 cv
244.153 422.413 244.394 422.62 244.608 422.767 cv
244.823 422.913 245.017 423.008 245.191 423.051 cv
245.366 423.095 245.525 423.092 245.669 423.041 cv
245.813 422.99 245.95 422.9 246.08 422.77 cv
246.213 422.637 246.303 422.497 246.35 422.35 cv
246.398 422.203 246.412 422.055 246.392 421.907 cv
246.372 421.759 246.325 421.617 246.25 421.483 cv
246.176 421.348 246.083 421.225 245.973 421.116 cv
cp
248.821 420.096 mo
248.968 420.243 249.042 420.366 249.042 420.463 cv
249.042 420.561 248.978 420.674 248.849 420.802 cv
248.725 420.926 248.615 420.989 248.52 420.988 cv
248.424 420.988 248.305 420.917 248.162 420.773 cv
248.014 420.626 247.941 420.504 247.941 420.406 cv
247.941 420.309 248.005 420.196 248.133 420.067 cv
248.257 419.943 248.367 419.881 248.463 419.881 cv
248.558 419.881 248.677 419.953 248.821 420.096 cv
cp
251.529 415.787 mo
251.597 415.855 251.64 415.919 251.658 415.979 cv
251.677 416.039 251.667 416.088 251.63 416.125 cv
251.176 416.578 li
252.022 417.424 li
252.039 417.441 252.048 417.459 252.051 417.479 cv
252.054 417.499 252.049 417.524 252.036 417.553 cv
252.023 417.583 252.001 417.617 251.971 417.655 cv
251.941 417.693 251.9 417.739 251.846 417.792 cv
251.795 417.844 251.75 417.884 251.712 417.914 cv
251.674 417.944 251.64 417.965 251.612 417.977 cv
251.583 417.989 251.559 417.993 251.541 417.989 cv
251.522 417.985 251.504 417.975 251.488 417.959 cv
250.642 417.113 li
248.995 418.76 li
248.971 418.784 248.947 418.802 248.924 418.812 cv
248.902 418.822 248.876 418.826 248.846 418.823 cv
248.816 418.819 248.783 418.805 248.747 418.779 cv
248.711 418.753 248.668 418.716 248.618 418.666 cv
248.579 418.627 248.545 418.591 248.516 418.558 cv
248.487 418.525 248.463 418.492 248.443 418.46 cv
248.424 418.428 248.407 418.395 248.394 418.361 cv
248.38 418.327 248.367 418.29 248.355 418.249 cv
247.344 414.368 li
247.337 414.341 247.338 414.311 247.346 414.278 cv
247.354 414.246 247.369 414.209 247.393 414.169 cv
247.416 414.129 247.449 414.085 247.493 414.035 cv
247.536 413.986 247.589 413.929 247.653 413.866 cv
247.722 413.796 247.786 413.738 247.843 413.691 cv
247.9 413.645 247.948 413.61 247.988 413.586 cv
248.028 413.563 248.063 413.55 248.094 413.546 cv
248.124 413.543 248.148 413.55 248.167 413.569 cv
250.737 416.139 li
251.191 415.686 li
251.226 415.65 251.273 415.64 251.331 415.654 cv
251.389 415.669 251.454 415.713 251.529 415.787 cv
cp
250.203 416.674 mo
247.993 414.464 li
247.987 414.47 li
248.902 417.974 li
250.203 416.674 li
cp
0 0 0 .690608 cmyk
f
grestore
gsave
172.301 521.156 mo
366.392 327.064 li
374.17 334.842 li
180.079 528.934 li
cp
clp
263.816 440.225 mo
263.884 440.293 263.927 440.357 263.946 440.417 cv
263.964 440.477 263.955 440.525 263.917 440.563 cv
263.464 441.016 li
264.309 441.862 li
264.326 441.878 264.336 441.896 264.338 441.916 cv
264.341 441.936 264.336 441.961 264.323 441.991 cv
264.31 442.02 264.289 442.054 264.259 442.093 cv
264.229 442.131 264.187 442.177 264.134 442.23 cv
264.082 442.281 264.038 442.322 263.999 442.352 cv
263.961 442.382 263.928 442.403 263.899 442.415 cv
263.871 442.427 263.847 442.431 263.828 442.427 cv
263.809 442.423 263.791 442.413 263.775 442.396 cv
262.929 441.551 li
261.283 443.197 li
261.258 443.222 261.234 443.239 261.212 443.25 cv
261.189 443.26 261.163 443.263 261.133 443.26 cv
261.103 443.257 261.07 443.243 261.034 443.217 cv
260.998 443.191 260.955 443.153 260.906 443.104 cv
260.866 443.064 260.832 443.028 260.803 442.995 cv
260.775 442.962 260.75 442.93 260.731 442.898 cv
260.711 442.866 260.694 442.833 260.681 442.799 cv
260.668 442.765 260.655 442.727 260.642 442.686 cv
259.631 438.805 li
259.625 438.778 259.626 438.748 259.633 438.716 cv
259.641 438.683 259.656 438.647 259.68 438.607 cv
259.703 438.567 259.737 438.522 259.78 438.473 cv
259.823 438.423 259.877 438.367 259.94 438.303 cv
260.01 438.234 260.073 438.175 260.13 438.129 cv
260.187 438.082 260.235 438.047 260.275 438.024 cv
260.315 438.001 260.35 437.987 260.381 437.984 cv
260.411 437.98 260.436 437.988 260.454 438.007 cv
263.025 440.577 li
263.478 440.123 li
263.514 440.088 263.56 440.078 263.618 440.092 cv
263.676 440.106 263.742 440.151 263.816 440.225 cv
cp
262.49 441.112 mo
260.28 438.902 li
260.274 438.908 li
261.19 442.412 li
262.49 441.112 li
cp
265.94 439.702 mo
266.087 439.849 266.161 439.971 266.161 440.069 cv
266.161 440.166 266.097 440.279 265.969 440.408 cv
265.844 440.532 265.734 440.594 265.639 440.594 cv
265.544 440.594 265.424 440.522 265.281 440.379 cv
265.134 440.232 265.06 440.109 265.06 440.012 cv
265.06 439.914 265.124 439.801 265.252 439.673 cv
265.377 439.549 265.487 439.487 265.582 439.487 cv
265.677 439.487 265.797 439.558 265.94 439.702 cv
cp
268.418 435.3 mo
268.594 435.476 268.737 435.674 268.848 435.892 cv
268.959 436.111 269.021 436.339 269.034 436.576 cv
269.048 436.813 269.007 437.056 268.91 437.303 cv
268.814 437.551 268.649 437.791 268.415 438.025 cv
268.247 438.193 268.078 438.321 267.908 438.408 cv
267.738 438.495 267.567 438.547 267.395 438.566 cv
267.224 438.585 267.05 438.57 266.875 438.521 cv
266.7 438.472 266.522 438.395 266.34 438.291 cv
266.159 438.186 265.975 438.057 265.789 437.904 cv
265.602 437.751 265.412 437.577 265.217 437.382 cv
265.045 437.21 264.88 437.026 264.723 436.832 cv
264.565 436.637 264.429 436.434 264.313 436.223 cv
264.197 436.011 264.108 435.793 264.045 435.567 cv
263.983 435.341 263.961 435.113 263.977 434.883 cv
263.994 434.653 264.057 434.421 264.167 434.186 cv
264.277 433.952 264.446 433.721 264.674 433.493 cv
264.75 433.416 264.833 433.343 264.921 433.274 cv
265.009 433.205 265.094 433.145 265.176 433.094 cv
265.258 433.043 265.331 433.004 265.395 432.977 cv
265.459 432.95 265.504 432.935 265.53 432.932 cv
265.556 432.929 265.58 432.931 265.6 432.937 cv
265.621 432.943 265.641 432.952 265.661 432.963 cv
265.681 432.975 265.702 432.989 265.723 433.007 cv
265.745 433.025 265.771 433.048 265.8 433.077 cv
265.837 433.114 265.869 433.147 265.895 433.175 cv
265.92 433.203 265.938 433.229 265.947 433.253 cv
265.957 433.276 265.96 433.298 265.957 433.318 cv
265.953 433.338 265.943 433.357 265.924 433.375 cv
265.901 433.398 265.863 433.422 265.809 433.447 cv
265.755 433.472 265.691 433.503 265.618 433.542 cv
265.544 433.58 265.46 433.632 265.366 433.697 cv
265.272 433.763 265.172 433.848 265.066 433.954 cv
264.873 434.147 264.747 434.352 264.686 434.569 cv
264.626 434.787 264.618 435.006 264.663 435.227 cv
264.707 435.447 264.796 435.666 264.928 435.884 cv
265.061 436.101 265.22 436.309 265.404 436.505 cv
265.427 436.421 265.456 436.329 265.492 436.23 cv
265.529 436.132 265.574 436.03 265.629 435.926 cv
265.684 435.821 265.748 435.717 265.822 435.612 cv
265.895 435.508 265.983 435.404 266.084 435.303 cv
266.302 435.085 266.514 434.932 266.723 434.842 cv
266.931 434.752 267.133 434.713 267.33 434.725 cv
267.527 434.738 267.716 434.795 267.897 434.898 cv
268.078 435 268.252 435.135 268.418 435.3 cv
cp
267.924 435.889 mo
267.804 435.769 267.683 435.671 267.561 435.597 cv
267.438 435.522 267.315 435.478 267.191 435.466 cv
267.066 435.453 266.939 435.475 266.808 435.531 cv
266.678 435.587 266.544 435.683 266.408 435.82 cv
266.331 435.896 266.261 435.979 266.198 436.07 cv
266.135 436.16 266.079 436.253 266.032 436.348 cv
265.984 436.443 265.944 436.539 265.911 436.637 cv
265.878 436.734 265.853 436.828 265.836 436.919 cv
266.104 437.187 266.345 437.394 266.56 437.54 cv
266.774 437.686 266.969 437.781 267.143 437.825 cv
267.317 437.869 267.476 437.865 267.62 437.815 cv
267.764 437.764 267.901 437.673 268.031 437.543 cv
268.164 437.41 268.254 437.271 268.302 437.123 cv
268.349 436.976 268.363 436.829 268.343 436.681 cv
268.323 436.533 268.276 436.391 268.201 436.256 cv
268.127 436.121 268.034 435.999 267.924 435.889 cv
cp
270.772 434.87 mo
270.919 435.017 270.993 435.139 270.993 435.237 cv
270.993 435.334 270.929 435.447 270.801 435.576 cv
270.676 435.7 270.566 435.762 270.471 435.762 cv
270.376 435.762 270.256 435.69 270.113 435.547 cv
269.966 435.4 269.892 435.277 269.892 435.18 cv
269.892 435.082 269.956 434.969 270.084 434.841 cv
270.209 434.717 270.319 434.655 270.414 434.655 cv
270.509 434.655 270.629 434.726 270.772 434.87 cv
cp
273.48 430.561 mo
273.548 430.629 273.591 430.693 273.61 430.753 cv
273.628 430.813 273.619 430.861 273.582 430.898 cv
273.128 431.352 li
273.973 432.198 li
273.99 432.214 274 432.232 274.003 432.252 cv
274.005 432.272 274 432.297 273.987 432.327 cv
273.974 432.356 273.953 432.39 273.923 432.429 cv
273.893 432.467 273.851 432.513 273.798 432.566 cv
273.746 432.617 273.702 432.658 273.663 432.688 cv
273.625 432.718 273.592 432.739 273.563 432.751 cv
273.534 432.763 273.511 432.767 273.492 432.763 cv
273.473 432.759 273.455 432.749 273.439 432.732 cv
272.593 431.887 li
270.947 433.533 li
270.922 433.558 270.898 433.575 270.876 433.585 cv
270.853 433.596 270.827 433.599 270.797 433.596 cv
270.767 433.593 270.734 433.579 270.698 433.553 cv
270.662 433.527 270.619 433.489 270.57 433.44 cv
270.53 433.4 270.496 433.364 270.467 433.331 cv
270.439 433.298 270.414 433.266 270.395 433.234 cv
270.375 433.202 270.358 433.169 270.345 433.135 cv
270.332 433.101 270.319 433.063 270.306 433.022 cv
269.295 429.141 li
269.289 429.114 269.29 429.084 269.297 429.052 cv
269.305 429.019 269.32 428.983 269.344 428.943 cv
269.367 428.903 269.401 428.858 269.444 428.809 cv
269.487 428.759 269.541 428.703 269.604 428.639 cv
269.674 428.57 269.737 428.511 269.794 428.465 cv
269.851 428.418 269.899 428.383 269.939 428.36 cv
269.979 428.337 270.014 428.323 270.045 428.32 cv
270.075 428.316 270.1 428.324 270.118 428.343 cv
272.689 430.913 li
273.142 430.459 li
273.178 430.424 273.224 430.414 273.282 430.428 cv
273.34 430.442 273.406 430.487 273.48 430.561 cv
cp
272.154 431.448 mo
269.944 429.238 li
269.938 429.244 li
270.854 432.748 li
272.154 431.448 li
cp
274.974 428.211 mo
275.055 428.292 275.102 428.357 275.114 428.407 cv
275.126 428.457 275.115 428.499 275.08 428.535 cv
273.78 429.835 li
273.742 429.872 273.698 429.884 273.647 429.87 cv
273.597 429.857 273.532 429.811 273.453 429.732 cv
273.374 429.653 273.328 429.589 273.316 429.539 cv
273.304 429.489 273.316 429.446 273.353 429.408 cv
274.653 428.108 li
274.67 428.092 274.688 428.08 274.708 428.072 cv
274.728 428.065 274.751 428.066 274.778 428.074 cv
274.805 428.082 274.835 428.097 274.867 428.119 cv
274.899 428.141 274.935 428.172 274.974 428.211 cv
cp
278.654 425.387 mo
278.722 425.455 278.765 425.519 278.784 425.579 cv
278.802 425.639 278.793 425.687 278.755 425.725 cv
278.302 426.178 li
279.147 427.024 li
279.164 427.04 279.173 427.059 279.176 427.079 cv
279.179 427.099 279.174 427.123 279.161 427.153 cv
279.148 427.183 279.126 427.216 279.096 427.255 cv
279.066 427.293 279.025 427.339 278.971 427.392 cv
278.92 427.443 278.875 427.484 278.837 427.514 cv
278.799 427.544 278.766 427.565 278.737 427.577 cv
278.708 427.589 278.685 427.593 278.666 427.589 cv
278.647 427.585 278.629 427.575 278.613 427.558 cv
277.767 426.713 li
276.121 428.359 li
276.096 428.384 276.072 428.401 276.05 428.412 cv
276.027 428.422 276.001 428.425 275.971 428.422 cv
275.941 428.419 275.908 428.405 275.872 428.379 cv
275.836 428.353 275.793 428.315 275.743 428.266 cv
275.704 428.227 275.67 428.19 275.641 428.158 cv
275.612 428.124 275.588 428.092 275.569 428.06 cv
275.549 428.028 275.532 427.995 275.519 427.961 cv
275.505 427.927 275.492 427.89 275.48 427.848 cv
274.469 423.967 li
274.463 423.94 274.463 423.911 274.471 423.878 cv
274.479 423.845 274.494 423.809 274.518 423.769 cv
274.541 423.729 274.574 423.684 274.618 423.635 cv
274.661 423.585 274.714 423.529 274.778 423.465 cv
274.848 423.396 274.911 423.338 274.968 423.291 cv
275.025 423.244 275.073 423.21 275.113 423.186 cv
275.153 423.163 275.188 423.149 275.219 423.146 cv
275.249 423.143 275.274 423.15 275.292 423.169 cv
277.862 425.739 li
278.316 425.286 li
278.351 425.25 278.398 425.24 278.456 425.254 cv
278.514 425.268 278.58 425.313 278.654 425.387 cv
cp
277.328 426.274 mo
275.118 424.064 li
275.112 424.07 li
276.027 427.574 li
277.328 426.274 li
cp
280.778 424.864 mo
280.925 425.011 280.999 425.134 280.999 425.231 cv
280.999 425.329 280.935 425.441 280.806 425.57 cv
280.682 425.694 280.572 425.756 280.477 425.756 cv
280.382 425.756 280.262 425.684 280.119 425.541 cv
279.972 425.394 279.898 425.271 279.898 425.174 cv
279.898 425.076 279.962 424.964 280.09 424.835 cv
280.215 424.711 280.324 424.649 280.42 424.649 cv
280.515 424.649 280.634 424.721 280.778 424.864 cv
cp
283.255 420.462 mo
283.431 420.639 283.575 420.836 283.686 421.054 cv
283.797 421.273 283.859 421.501 283.872 421.738 cv
283.886 421.975 283.844 422.218 283.748 422.465 cv
283.652 422.713 283.487 422.954 283.253 423.188 cv
283.085 423.355 282.916 423.483 282.746 423.57 cv
282.576 423.657 282.405 423.71 282.233 423.728 cv
282.061 423.747 281.888 423.732 281.713 423.683 cv
281.538 423.634 281.359 423.558 281.178 423.453 cv
280.997 423.348 280.813 423.219 280.627 423.066 cv
280.44 422.913 280.25 422.739 280.055 422.544 cv
279.883 422.372 279.718 422.189 279.561 421.994 cv
279.403 421.799 279.266 421.596 279.15 421.385 cv
279.034 421.173 278.945 420.955 278.883 420.729 cv
278.821 420.503 278.798 420.275 278.815 420.045 cv
278.832 419.815 278.895 419.583 279.005 419.349 cv
279.115 419.115 279.284 418.883 279.512 418.655 cv
279.588 418.579 279.671 418.506 279.759 418.436 cv
279.847 418.367 279.932 418.307 280.014 418.256 cv
280.096 418.205 280.169 418.166 280.233 418.139 cv
280.297 418.112 280.342 418.097 280.368 418.094 cv
280.394 418.091 280.418 418.093 280.438 418.099 cv
280.459 418.105 280.479 418.114 280.499 418.125 cv
280.519 418.137 280.539 418.151 280.561 418.169 cv
280.583 418.187 280.608 418.21 280.637 418.239 cv
280.675 418.276 280.706 418.309 280.732 418.337 cv
280.758 418.365 280.776 418.391 280.785 418.415 cv
280.794 418.439 280.797 418.46 280.794 418.48 cv
280.791 418.5 280.78 418.519 280.762 418.537 cv
280.739 418.56 280.701 418.584 280.647 418.609 cv
280.593 418.634 280.529 418.666 280.456 418.704 cv
280.382 418.742 280.298 418.794 280.204 418.859 cv
280.109 418.925 280.009 419.01 279.904 419.116 cv
279.711 419.309 279.585 419.514 279.524 419.731 cv
279.464 419.949 279.456 420.168 279.501 420.389 cv
279.545 420.609 279.634 420.828 279.766 421.046 cv
279.899 421.263 280.057 421.471 280.242 421.667 cv
280.264 421.583 280.294 421.491 280.33 421.393 cv
280.366 421.294 280.412 421.193 280.467 421.088 cv
280.522 420.983 280.586 420.879 280.659 420.774 cv
280.733 420.67 280.82 420.567 280.922 420.465 cv
281.139 420.248 281.352 420.094 281.56 420.004 cv
281.768 419.914 281.971 419.875 282.168 419.887 cv
282.365 419.9 282.554 419.957 282.735 420.06 cv
282.916 420.162 283.09 420.297 283.255 420.462 cv
cp
282.762 421.051 mo
282.642 420.931 282.521 420.833 282.398 420.759 cv
282.276 420.684 282.153 420.641 282.028 420.628 cv
281.904 420.615 281.777 420.637 281.646 420.693 cv
281.516 420.749 281.382 420.845 281.245 420.982 cv
281.169 421.058 281.099 421.142 281.036 421.232 cv
280.973 421.322 280.917 421.415 280.87 421.51 cv
280.822 421.605 280.782 421.701 280.749 421.799 cv
280.716 421.896 280.691 421.99 280.674 422.082 cv
280.942 422.349 281.183 422.556 281.398 422.702 cv
281.612 422.849 281.806 422.944 281.981 422.987 cv
282.155 423.031 282.314 423.027 282.458 422.977 cv
282.602 422.926 282.739 422.836 282.869 422.705 cv
283.002 422.573 283.092 422.433 283.139 422.286 cv
283.187 422.139 283.201 421.991 283.181 421.843 cv
283.161 421.695 283.114 421.553 283.039 421.418 cv
282.965 421.284 282.872 421.161 282.762 421.051 cv
cp
285.61 420.032 mo
285.757 420.179 285.831 420.302 285.831 420.399 cv
285.831 420.497 285.767 420.609 285.638 420.738 cv
285.514 420.862 285.404 420.924 285.309 420.924 cv
285.214 420.924 285.094 420.852 284.951 420.709 cv
284.804 420.562 284.73 420.439 284.73 420.342 cv
284.73 420.244 284.794 420.132 284.922 420.003 cv
285.047 419.879 285.156 419.817 285.252 419.817 cv
285.347 419.817 285.466 419.888 285.61 420.032 cv
cp
287.976 415.761 mo
288.191 415.976 288.347 416.204 288.442 416.444 cv
288.537 416.685 288.576 416.929 288.558 417.176 cv
288.541 417.424 288.47 417.669 288.347 417.913 cv
288.224 418.156 288.05 418.39 287.826 418.614 cv
287.702 418.738 287.575 418.847 287.446 418.942 cv
287.316 419.036 287.195 419.114 287.082 419.175 cv
286.97 419.236 286.873 419.282 286.792 419.314 cv
286.711 419.345 286.656 419.361 286.626 419.362 cv
286.596 419.363 286.572 419.361 286.553 419.354 cv
286.535 419.348 286.514 419.339 286.491 419.327 cv
286.469 419.314 286.443 419.296 286.414 419.271 cv
286.385 419.246 286.352 419.215 286.315 419.178 cv
286.28 419.143 286.25 419.11 286.225 419.079 cv
286.2 419.048 286.183 419.02 286.174 418.994 cv
286.165 418.968 286.162 418.945 286.165 418.925 cv
286.168 418.906 286.177 418.889 286.191 418.874 cv
286.212 418.854 286.257 418.834 286.326 418.817 cv
286.396 418.799 286.482 418.768 286.586 418.725 cv
286.689 418.681 286.809 418.619 286.944 418.537 cv
287.08 418.455 287.222 418.34 287.371 418.19 cv
287.51 418.052 287.621 417.908 287.704 417.759 cv
287.787 417.609 287.835 417.458 287.848 417.303 cv
287.862 417.149 287.839 416.994 287.78 416.84 cv
287.72 416.686 287.614 416.532 287.461 416.378 cv
287.332 416.25 287.198 416.157 287.06 416.098 cv
286.921 416.04 286.777 416.021 286.627 416.039 cv
286.478 416.058 286.323 416.115 286.162 416.212 cv
286.002 416.308 285.832 416.446 285.654 416.624 cv
285.528 416.75 285.425 416.865 285.346 416.969 cv
285.267 417.073 285.189 417.164 285.11 417.243 cv
285.052 417.301 284.997 417.329 284.945 417.327 cv
284.893 417.325 284.829 417.285 284.753 417.209 cv
283.115 415.571 li
283.046 415.502 283.012 415.436 283.011 415.37 cv
283.01 415.305 283.039 415.242 283.099 415.182 cv
284.882 413.4 li
284.898 413.383 284.919 413.372 284.944 413.365 cv
284.969 413.359 284.996 413.36 285.025 413.368 cv
285.054 413.376 285.085 413.392 285.119 413.416 cv
285.153 413.44 285.19 413.471 285.229 413.511 cv
285.304 413.585 285.352 413.653 285.373 413.714 cv
285.394 413.775 285.387 413.823 285.351 413.859 cv
283.912 415.299 li
285.041 416.428 li
285.1 416.348 285.166 416.27 285.237 416.195 cv
285.307 416.12 285.391 416.034 285.487 415.939 cv
285.708 415.717 285.93 415.551 286.15 415.44 cv
286.371 415.329 286.587 415.268 286.798 415.258 cv
287.01 415.247 287.215 415.285 287.415 415.371 cv
287.615 415.457 287.802 415.587 287.976 415.761 cv
cp
0 0 0 .690608 cmyk
f
grestore
%ADOBeginSubsetFont: IKBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IKBBAA+Calibri gcheck setglobal} if
1 1216 6 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>IKBBAA+Calibri AddT42Char 
IKBBAA+Calibri /CharStrings get begin
/g6 6 def
end
IKBBAA+Calibri /Encoding get
dup 72 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/USTWFV+Calibri*1 [33{/.notdef}rp /g37 /g1 /g39 /g41 /g43 /g45 /g38 /g33 /g40 /g34 /g7 /g31 /g22 /g13 /g16 /g26 /g24 /g17 /g8 /g12 /g28 /g19 /g27 /g11 /g20 /g23 /g4 /g2 /g9 /g18 /g25 /g29 /g42 /g3 /g14 /g10 /g15 /g21 /g5 /g6 183{/.notdef}rp]USTWFV+Calibri nfUSTWFV+Calibri*1 [0 -10 -10 0 0 0 ]msf48.2673 400.376 mo(+,-./0"12"34567")[-6.45496 -5.25394 -7.98795 -5.25397 -4.97598 -3.48599 -2.26099 -5.27292 -3.05194 -2.26099 -5.16599 -4.79004 -3.35007 -5.25394 -3.91104 0 ]yshUSTWFV+Calibri*1 [10 0 0 -10 0 0 ]msf170.634 459.245 mo(8/0791:"3490")[5.67401 4.97601 3.48599 3.91106 2.29504 5.27292 5.25395 2.26097 5.16597 4.79004 2.29504 3.48599 0 ]xshUSTWFV+Calibri*1 [14 0 0 -14 0 0 ]msf148.816 310.115 mo(H4-.1")[11.9699 6.70605 11.1832 7.3555 7.38211 0 ]xsh121.067 482.71 mo
126.008 482.71 li
126.008 487.651 li
121.067 487.651 li
cp
.630945 .325231 .0310369 0 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf127.978 488.69 mo(?45)sh140.033 488.69 mo(6*/:@0/")[4.72855 2.7558 4.47841 4.72855 5.01396 3.13739 4.47841 0 ]xsh179.013 482.71 mo
183.954 482.71 li
183.954 487.651 li
179.013 487.651 li
cp
.158206 .719326 .596887 .0181277 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf185.925 488.69 mo(?45)sh197.979 488.69 mo(6*?405/")[4.72855 2.75578 4.72855 4.31104 3.13739 3.01508 4.47841 0 ]xsh.75 lw
23.7673 286.616 mo
318.461 286.616 li
318.461 502.615 li
23.7673 502.615 li
cp
0 0 0 .130129 cmyk
@
330.769 286.615 mo
706.154 286.615 li
706.154 502.615 li
330.769 502.615 li
cp
0 0 0 0 cmyk
ef
.75 lw
391.969 417.852 mo
693.06 417.852 li
391.969 406.724 mo
693.06 406.724 li
391.969 395.27 mo
693.06 395.27 li
391.969 384.143 mo
693.06 384.143 li
391.969 372.688 mo
693.06 372.688 li
391.969 361.234 mo
693.06 361.234 li
391.969 350.106 mo
693.06 350.106 li
391.969 338.652 mo
693.06 338.652 li
391.969 327.524 mo
693.06 327.524 li
0 0 0 .130129 cmyk
@
402.769 352.397 mo
412.26 352.397 li
412.26 429.235 li
402.769 429.235 li
cp
445.642 352.397 mo
455.46 352.397 li
455.46 429.235 li
445.642 429.235 li
cp
488.842 336.361 mo
498.333 336.361 li
498.333 429.235 li
488.842 429.235 li
cp
531.715 335.706 mo
541.206 335.706 li
541.206 429.235 li
531.715 429.235 li
cp
574.587 335.706 mo
584.406 335.706 li
584.406 429.235 li
574.587 429.235 li
cp
617.787 335.379 mo
627.278 335.379 li
627.278 429.235 li
617.787 429.235 li
cp
660.66 335.052 mo
670.478 335.052 li
670.478 429.235 li
660.66 429.235 li
cp
.630945 .325231 .0310369 0 cmyk
f
414.878 421.452 mo
424.696 421.452 li
424.696 429.235 li
414.878 429.235 li
cp
458.078 424.07 mo
467.569 424.07 li
467.569 429.235 li
458.078 429.235 li
cp
500.951 336.361 mo
510.442 336.361 li
510.442 429.235 li
500.951 429.235 li
cp
543.824 398.87 mo
553.642 398.87 li
553.642 429.235 li
543.824 429.235 li
cp
587.024 404.106 mo
596.515 404.106 li
596.515 429.235 li
587.024 429.235 li
cp
629.896 412.615 mo
639.715 412.615 li
639.715 429.235 li
629.896 429.235 li
cp
673.096 382.506 mo
682.587 382.506 li
682.587 429.235 li
673.096 429.235 li
cp
.158206 .719326 .596887 .0181277 cmyk
f
392.114 429.235 mo
693.154 429.235 li
0 0 0 .130129 cmyk
@
0 0 0 .774868 cmyk
%ADOBeginSubsetFont: IKBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IKBBAA+Calibri gcheck setglobal} if
1 12218 44 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>IKBBAA+Calibri AddT42Char 
1 12552 46 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>IKBBAA+Calibri AddT42Char 
IKBBAA+Calibri /CharStrings get begin
/g44 44 def
/g46 46 def
end
IKBBAA+Calibri /Encoding get
dup 73 /g44 put
dup 74 /g46 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/USTWFV+Calibri*1 [33{/.notdef}rp /g37 /g1 /g39 /g41 /g43 /g45 /g38 /g33 /g40 /g34 /g7 /g31 /g22 /g13 /g16 /g26 /g24 /g17 /g8 /g12 /g28 /g19 /g27 /g11 /g20 /g23 /g4 /g2 /g9 /g18 /g25 /g29 /g42 /g3 /g14 /g10 /g15 /g21 /g5 /g6 /g44 /g46 181{/.notdef}rp]USTWFV+Calibri nfUSTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf378.769 432.835 mo(!")[4.56122 0 ]xsh360.769 421.522 mo('!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 410.209 mo(#!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 398.895 mo(\)!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 387.582 mo($!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 376.269 mo(A!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 364.955 mo(%!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 353.642 mo(I!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 342.329 mo(&!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh360.769 331.015 mo(J!!!!")[4.56122 4.56125 4.56122 4.56125 4.56122 0 ]xsh394.011 443.945 mo('\('\(%*'\('\(I")[4.56125 2.27518 4.56125 2.27518 4.56122 2.75223 4.56122 2.27518 4.56125 2.27518 4.56125 0 ]xsh437.017 443.945 mo('\('\(I*'\('\(&")[4.56125 2.27518 4.56125 2.27518 4.56122 2.75223 4.56122 2.27518 4.56125 2.27518 4.56125 0 ]xsh479.702 443.945 mo('\('\(&*'\(#\(!")[4.56125 2.27518 4.56125 2.27518 4.56122 2.75223 4.56122 2.27518 4.56125 2.27515 4.56128 0 ]xsh523.028 443.945 mo('\(#\(!*'\(#\('")[4.56128 2.27515 4.56128 2.27515 4.56122 2.75226 4.56122 2.27515 4.56128 2.27515 4.56128 0 ]xsh565.713 443.945 mo('\(#\('*'\(#\(#")[4.56128 2.27515 4.56128 2.27515 4.56122 2.75226 4.56122 2.27515 4.56128 2.27515 4.56128 0 ]xsh609.039 443.945 mo('\(#\(#*'\(#\(\)")[4.56128 2.27515 4.56128 2.27515 4.56122 2.75226 4.56122 2.27515 4.56128 2.27515 4.56128 0 ]xsh651.724 443.945 mo('\(#\(\)*'\(#\($")[4.56128 2.27515 4.56128 2.27515 4.56122 2.75226 4.56122 2.27515 4.56128 2.27515 4.56128 0 ]xshUSTWFV+Calibri*1 [0 -10 -10 0 0 0 ]msf355.269 412.691 mo(+,-./0"12"34567")[-6.45496 -5.25394 -7.98795 -5.25397 -4.97598 -3.48599 -2.26099 -5.27292 -3.05194 -2.26099 -5.16599 -4.79004 -3.35007 -5.25394 -3.91104 0 ]yshUSTWFV+Calibri*1 [10 0 0 -10 0 0 ]msf518.119 459.245 mo(8/0791:"3490")[5.67401 4.97601 3.48602 3.91107 2.29504 5.27289 5.25397 2.26099 5.16595 4.79004 2.29504 3.48596 0 ]xshUSTWFV+Calibri*1 [14 0 0 -14 0 0 ]msf498.808 310.115 mo(H4:@7")[11.9699 6.70605 7.35547 7.7995 5.47552 0 ]xsh468.414 482.71 mo
473.355 482.71 li
473.355 487.651 li
468.414 487.651 li
cp
.630945 .325231 .0310369 0 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf475.325 488.69 mo(?45)sh487.38 488.69 mo(6*/:@0/")[4.72855 2.7558 4.47842 4.72852 5.01398 3.13736 4.47845 0 ]xsh526.36 482.71 mo
531.301 482.71 li
531.301 487.651 li
526.36 487.651 li
cp
.158206 .719326 .596887 .0181277 cmyk
ef
0 0 0 .774868 cmyk
USTWFV+Calibri*1 [9 0 0 -9 0 0 ]msf533.272 488.69 mo(?45)sh545.326 488.69 mo(6*?405/")[4.72852 2.7558 4.72858 4.31104 3.13739 3.01508 4.47839 0 ]xsh.75 lw
330.769 286.616 mo
706.154 286.616 li
706.154 502.615 li
330.769 502.615 li
cp
0 0 0 .130129 cmyk
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/USTWFV+Calibri*1 uf/USTWFV+Calibri uf/IKBBAA+Calibri ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
